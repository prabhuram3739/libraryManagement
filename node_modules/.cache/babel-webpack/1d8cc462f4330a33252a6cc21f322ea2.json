{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ChangeDetectionStrategy, ElementRef, Inject, Input, Output, EventEmitter, Optional, NgZone, ViewEncapsulation, ViewChild, InjectionToken, inject, NgModule } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n// Boilerplate for applying mixins to MatProgressBar.\n\n/**\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"primaryValueBar\"];\n\nvar MatProgressBarBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatProgressBarBase(_elementRef) {\n  _classCallCheck(this, MatProgressBarBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_BAR_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n  /** @type {?} */\n  var _document = inject(DOCUMENT);\n  /** @type {?} */\n\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/**\n * Counter used to generate unique IDs for progress bars.\n * @type {?}\n */\n\n\nvar progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\n\nvar MatProgressBar = /*#__PURE__*/function (_MatProgressBarMixinB) {\n  _inherits(MatProgressBar, _MatProgressBarMixinB);\n\n  var _super = _createSuper(MatProgressBar);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?=} _animationMode\n   * @param {?=} location\n   */\n  function MatProgressBar(_elementRef, _ngZone, _animationMode,\n  /**\n   * @deprecated `location` parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  location) {\n    var _this;\n\n    _classCallCheck(this, MatProgressBar);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._ngZone = _ngZone;\n    _this._animationMode = _animationMode;\n    /**\n     * Flag that indicates whether NoopAnimations mode is set to true.\n     */\n\n    _this._isNoopAnimation = false;\n    _this._value = 0;\n    _this._bufferValue = 0;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     */\n\n    _this.animationEnd = new EventEmitter();\n    /**\n     * Reference to animation end subscription to be unsubscribed on destroy.\n     */\n\n    _this._animationEndSubscription = Subscription.EMPTY;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n\n    _this.mode = 'determinate';\n    /**\n     * ID of the progress bar.\n     */\n\n    _this.progressbarId = \"mat-progress-bar-\".concat(progressbarId++); // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n\n    /** @type {?} */\n\n    var path = location ? location.getPathname().split('#')[0] : '';\n    _this._rectangleFillValue = \"url('\".concat(path, \"#\").concat(_this.progressbarId, \"')\");\n    _this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    return _this;\n  }\n  /**\n   * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n   * @return {?}\n   */\n\n\n  _createClass(MatProgressBar, [{\n    key: \"_primaryTransform\",\n\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    value: function _primaryTransform() {\n      /** @type {?} */\n      var scale = this.value / 100;\n      return {\n        transform: \"scaleX(\".concat(scale, \")\")\n      };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_bufferTransform\",\n    value: function _bufferTransform() {\n      if (this.mode === 'buffer') {\n        /** @type {?} */\n        var scale = this.bufferValue / 100;\n        return {\n          transform: \"scaleX(\".concat(scale, \")\")\n        };\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      if (!this._isNoopAnimation) {\n        // Run outside angular so change detection didn't get triggered on every transition end\n        // instead only on the animation that we care about (primary value bar's transitionend)\n        this._ngZone.runOutsideAngular(function () {\n          _this2._animationEndSubscription = fromEvent(_this2._primaryValueBar.nativeElement, 'transitionend').pipe(filter(function (e) {\n            return e.target === _this2._primaryValueBar.nativeElement;\n          })).subscribe(function (_) {\n            return _this2._ngZone.run(function () {\n              return _this2.emitAnimationEnd();\n            });\n          });\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._animationEndSubscription.unsubscribe();\n    }\n    /**\n     * Emit an animationEnd event if in determinate or buffer mode.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"emitAnimationEnd\",\n    value: function emitAnimationEnd() {\n      if (this.mode === 'determinate' || this.mode === 'buffer') {\n        this.animationEnd.next({\n          value: this.value\n        });\n      }\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._value = clamp(v || 0); // When noop animation is set to true, trigger animationEnd directly.\n\n      if (this._isNoopAnimation) {\n        this.emitAnimationEnd();\n      }\n    }\n    /**\n     * Buffer value of the progress bar. Defaults to zero.\n     * @return {?}\n     */\n\n  }, {\n    key: \"bufferValue\",\n    get: function get() {\n      return this._bufferValue;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._bufferValue = clamp(v || 0);\n    }\n  }]);\n\n  return MatProgressBar;\n}(_MatProgressBarMixinBase);\n\nMatProgressBar.ɵfac = function MatProgressBar_Factory(t) {\n  return new (t || MatProgressBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_LOCATION, 8));\n};\n\nMatProgressBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatProgressBar,\n  selectors: [[\"mat-progress-bar\"]],\n  viewQuery: function MatProgressBar_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._primaryValueBar = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"mat-progress-bar\"],\n  hostVars: 4,\n  hostBindings: function MatProgressBar_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.value)(\"mode\", ctx.mode);\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    mode: \"mode\",\n    value: \"value\",\n    bufferValue: \"bufferValue\"\n  },\n  outputs: {\n    animationEnd: \"animationEnd\"\n  },\n  exportAs: [\"matProgressBar\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 9,\n  vars: 4,\n  consts: [[\"width\", \"100%\", \"height\", \"4\", \"focusable\", \"false\", 1, \"mat-progress-bar-background\", \"mat-progress-bar-element\"], [\"x\", \"4\", \"y\", \"0\", \"width\", \"8\", \"height\", \"4\", \"patternUnits\", \"userSpaceOnUse\", 3, \"id\"], [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\"], [\"width\", \"100%\", \"height\", \"100%\"], [1, \"mat-progress-bar-buffer\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [1, \"mat-progress-bar-primary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [\"primaryValueBar\", \"\"], [1, \"mat-progress-bar-secondary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\"]],\n  template: function MatProgressBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵelementStart(2, \"pattern\", 1);\n      ɵngcc0.ɵɵelement(3, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(4, \"rect\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelement(5, \"div\", 4);\n      ɵngcc0.ɵɵelement(6, \"div\", 5, 6);\n      ɵngcc0.ɵɵelement(8, \"div\", 7);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.progressbarId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"fill\", ctx._rectangleFillValue);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._bufferTransform());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._primaryTransform());\n    }\n  },\n  directives: [ɵngcc1.NgStyle],\n  styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-background{display:none}}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:none;transition:none}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatProgressBar.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_PROGRESS_BAR_LOCATION]\n    }]\n  }];\n};\n\nMatProgressBar.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  bufferValue: [{\n    type: Input\n  }],\n  _primaryValueBar: [{\n    type: ViewChild,\n    args: ['primaryValueBar']\n  }],\n  animationEnd: [{\n    type: Output\n  }],\n  mode: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatProgressBar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-bar',\n      exportAs: 'matProgressBar',\n      host: {\n        'role': 'progressbar',\n        'aria-valuemin': '0',\n        'aria-valuemax': '100',\n        '[attr.aria-valuenow]': 'value',\n        '[attr.mode]': 'mode',\n        'class': 'mat-progress-bar',\n        '[class._mat-animation-noopable]': \"_isNoopAnimation\"\n      },\n      inputs: ['color'],\n      template: \"<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\"><defs><pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\"><circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/></pattern></defs><rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/></svg><div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div><div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div><div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\",\n      styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-background{display:none}}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:none;transition:none}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\"],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_PROGRESS_BAR_LOCATION]\n      }]\n    }];\n  }, {\n    animationEnd: [{\n      type: Output\n    }],\n    mode: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    bufferValue: [{\n      type: Input\n    }],\n    _primaryValueBar: [{\n      type: ViewChild,\n      args: ['primaryValueBar']\n    }]\n  });\n})();\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\n\n\nfunction clamp(v) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  return Math.max(min, Math.min(max, v));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatProgressBarModule = function MatProgressBarModule() {\n  _classCallCheck(this, MatProgressBarModule);\n};\n\nMatProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatProgressBarModule\n});\nMatProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatProgressBarModule_Factory(t) {\n    return new (t || MatProgressBarModule)();\n  },\n  imports: [[CommonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressBarModule, {\n    declarations: function declarations() {\n      return [MatProgressBar];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatProgressBar, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatProgressBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule],\n      exports: [MatProgressBar, MatCommonModule],\n      declarations: [MatProgressBar]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatProgressBarModule, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBarBase, _MatProgressBarMixinBase, MAT_PROGRESS_BAR_LOCATION, MatProgressBar };","map":{"version":3,"sources":["../../../src/lib/progress-bar/progress-bar.ts","../../../src/lib/progress-bar/progress-bar-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n"]},"metadata":{},"sourceType":"module"}