{"ast":null,"code":"import _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  var resultSelector;\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    resultSelector = sources.pop();\n  }\n\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0];\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    return forkJoin(sources).pipe(map(function (args) {\n      return resultSelector.apply(void 0, _toConsumableArray(args));\n    }));\n  }\n\n  return new Observable(function (subscriber) {\n    return new ForkJoinSubscriber(subscriber, sources);\n  });\n}\n\nvar ForkJoinSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(ForkJoinSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(ForkJoinSubscriber);\n\n  function ForkJoinSubscriber(destination, sources) {\n    var _this;\n\n    _classCallCheck(this, ForkJoinSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.sources = sources;\n    _this.completed = 0;\n    _this.haveValues = 0;\n    var len = sources.length;\n    _this.values = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var source = sources[i];\n      var innerSubscription = subscribeToResult(_assertThisInitialized(_this), source, null, i);\n\n      if (innerSubscription) {\n        _this.add(innerSubscription);\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(ForkJoinSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.values[outerIndex] = innerValue;\n\n      if (!innerSub._hasValue) {\n        innerSub._hasValue = true;\n        this.haveValues++;\n      }\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      var destination = this.destination,\n          haveValues = this.haveValues,\n          values = this.values;\n      var len = values.length;\n\n      if (!innerSub._hasValue) {\n        destination.complete();\n        return;\n      }\n\n      this.completed++;\n\n      if (this.completed !== len) {\n        return;\n      }\n\n      if (haveValues === len) {\n        destination.next(values);\n      }\n\n      destination.complete();\n    }\n  }]);\n\n  return ForkJoinSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/observable/forkJoin.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,OAAT,QAAwB,iBAAxB;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,iBAAT,QAAkC,2BAAlC;AACA,SAAS,eAAT,QAAgC,oBAAhC;AAGA,SAAS,GAAT,QAAoB,kBAApB;AAqIA,OAAM,SAAU,QAAV,GACmE;AAAA,oCAApE,OAAoE;AAApE,IAAA,OAAoE;AAAA;;AAGvE,MAAI,cAAJ;;AACA,MAAI,OAAO,OAAO,CAAC,OAAO,CAAC,MAAR,GAAiB,CAAlB,CAAd,KAAuC,UAA3C,EAAuD;AAErD,IAAA,cAAc,GAAG,OAAO,CAAC,GAAR,EAAjB;AACD;;AAID,MAAI,OAAO,CAAC,MAAR,KAAmB,CAAnB,IAAwB,OAAO,CAAC,OAAO,CAAC,CAAD,CAAR,CAAnC,EAAiD;AAC/C,IAAA,OAAO,GAAG,OAAO,CAAC,CAAD,CAAjB;AACD;;AAED,MAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAO,KAAP;AACD;;AAED,MAAI,cAAJ,EAAoB;AAElB,WAAO,QAAQ,CAAC,OAAD,CAAR,CAAkB,IAAlB,CACL,GAAG,CAAC,UAAA,IAAI;AAAA,aAAI,cAAc,MAAd,4BAAkB,IAAlB,EAAJ;AAAA,KAAL,CADE,CAAP;AAGD;;AAED,SAAO,IAAI,UAAJ,CAAe,UAAA,UAAU,EAAG;AACjC,WAAO,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,OAAnC,CAAP;AACD,GAFM,CAAP;AAGD;;IAMK,kB;;;;;AAKJ,8BAAY,WAAZ,EACoB,OADpB,EACsD;AAAA;;AAAA;;AACpD,8BAAM,WAAN;AADkB,UAAA,OAAA,GAAA,OAAA;AALZ,UAAA,SAAA,GAAY,CAAZ;AAEA,UAAA,UAAA,GAAa,CAAb;AAMN,QAAM,GAAG,GAAG,OAAO,CAAC,MAApB;AACA,UAAK,MAAL,GAAc,IAAI,KAAJ,CAAU,GAAV,CAAd;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,UAAM,MAAM,GAAG,OAAO,CAAC,CAAD,CAAtB;AACA,UAAM,iBAAiB,GAAG,iBAAiB,gCAAO,MAAP,EAAe,IAAf,EAAqB,CAArB,CAA3C;;AAEA,UAAI,iBAAJ,EAAuB;AACrB,cAAK,GAAL,CAAS,iBAAT;AACD;AACF;;AAbmD;AAcrD;;;;+BAEU,U,EAAiB,U,EACjB,U,EAAoB,U,EACpB,Q,EAA+B;AACxC,WAAK,MAAL,CAAY,UAAZ,IAA0B,UAA1B;;AACA,UAAI,CAAE,QAAgB,CAAC,SAAvB,EAAkC;AAC/B,QAAA,QAAgB,CAAC,SAAjB,GAA6B,IAA7B;AACD,aAAK,UAAL;AACD;AACF;;;mCAEc,Q,EAA+B;AAAA,UACpC,WADoC,GACA,IADA,CACpC,WADoC;AAAA,UACvB,UADuB,GACA,IADA,CACvB,UADuB;AAAA,UACX,MADW,GACA,IADA,CACX,MADW;AAE5C,UAAM,GAAG,GAAG,MAAM,CAAC,MAAnB;;AAEA,UAAI,CAAE,QAAgB,CAAC,SAAvB,EAAkC;AAChC,QAAA,WAAW,CAAC,QAAZ;AACA;AACD;;AAED,WAAK,SAAL;;AAEA,UAAI,KAAK,SAAL,KAAmB,GAAvB,EAA4B;AAC1B;AACD;;AAED,UAAI,UAAU,KAAK,GAAnB,EAAwB;AACtB,QAAA,WAAW,CAAC,IAAZ,CAAiB,MAAjB;AACD;;AAED,MAAA,WAAW,CAAC,QAAZ;AACD;;;;EApDoC,e","sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin(...sources) {\n    let resultSelector;\n    if (typeof sources[sources.length - 1] === 'function') {\n        resultSelector = sources.pop();\n    }\n    if (sources.length === 1 && isArray(sources[0])) {\n        sources = sources[0];\n    }\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    if (resultSelector) {\n        return forkJoin(sources).pipe(map(args => resultSelector(...args)));\n    }\n    return new Observable(subscriber => {\n        return new ForkJoinSubscriber(subscriber, sources);\n    });\n}\nclass ForkJoinSubscriber extends OuterSubscriber {\n    constructor(destination, sources) {\n        super(destination);\n        this.sources = sources;\n        this.completed = 0;\n        this.haveValues = 0;\n        const len = sources.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            const source = sources[i];\n            const innerSubscription = subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                this.add(innerSubscription);\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    }\n    notifyComplete(innerSub) {\n        const { destination, haveValues, values } = this;\n        const len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            destination.next(values);\n        }\n        destination.complete();\n    }\n}\n//# sourceMappingURL=forkJoin.js.map"]},"metadata":{},"sourceType":"module"}