{"ast":null,"code":"import _get from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, setLines, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nvar _c0 = [\"*\"];\nvar _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nvar _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nvar _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\";\nvar MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar MatGridTile = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?=} _gridList\n   */\n  function MatGridTile(_element, _gridList) {\n    _classCallCheck(this, MatGridTile);\n\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /**\n   * Amount of rows that the grid tile takes up.\n   * @return {?}\n   */\n\n\n  _createClass(MatGridTile, [{\n    key: \"_setStyle\",\n\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    value: function _setStyle(property, value) {\n      /** @type {?} */\n      this._element.nativeElement.style[property] = value;\n    }\n  }, {\n    key: \"rowspan\",\n    get: function get() {\n      return this._rowspan;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n\n  }, {\n    key: \"colspan\",\n    get: function get() {\n      return this._colspan;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._colspan = Math.round(coerceNumberProperty(value));\n    }\n  }]);\n\n  return MatGridTile;\n}();\n\nMatGridTile.ɵfac = function MatGridTile_Factory(t) {\n  return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n};\n\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTile,\n  selectors: [[\"mat-grid-tile\"]],\n  hostAttrs: [1, \"mat-grid-tile\"],\n  inputs: {\n    rowspan: \"rowspan\",\n    colspan: \"colspan\"\n  },\n  exportAs: [\"matGridTile\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-figure\"]],\n  template: function MatGridTile_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTile.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_GRID_LIST]\n    }]\n  }];\n};\n\nMatGridTile.propDecorators = {\n  rowspan: [{\n    type: Input\n  }],\n  colspan: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile'\n      },\n      template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_GRID_LIST]\n      }]\n    }];\n  }, {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\n\nvar MatGridTileText = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   */\n  function MatGridTileText(_element) {\n    _classCallCheck(this, MatGridTileText);\n\n    this._element = _element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatGridTileText, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n  }]);\n\n  return MatGridTileText;\n}();\n\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n  return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTileText,\n  selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n  contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"mat-grid-list-text\"]],\n  template: function MatGridTileText_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(3, 2);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTileText.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nMatGridTileText.propDecorators = {\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridAvatarCssMatStyler = function MatGridAvatarCssMatStyler() {\n  _classCallCheck(this, MatGridAvatarCssMatStyler);\n};\n\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n  return new (t || MatGridAvatarCssMatStyler)();\n};\n\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-grid-avatar\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridTileHeaderCssMatStyler = function MatGridTileHeaderCssMatStyler() {\n  _classCallCheck(this, MatGridTileHeaderCssMatStyler);\n};\n\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n  return new (t || MatGridTileHeaderCssMatStyler)();\n};\n\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileHeaderCssMatStyler,\n  selectors: [[\"mat-grid-tile-header\"]],\n  hostAttrs: [1, \"mat-grid-tile-header\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridTileFooterCssMatStyler = function MatGridTileFooterCssMatStyler() {\n  _classCallCheck(this, MatGridTileFooterCssMatStyler);\n};\n\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n  return new (t || MatGridTileFooterCssMatStyler)();\n};\n\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileFooterCssMatStyler,\n  selectors: [[\"mat-grid-tile-footer\"]],\n  hostAttrs: [1, \"mat-grid-tile-footer\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\n\n\nvar TileCoordinator = /*#__PURE__*/function () {\n  function TileCoordinator() {\n    _classCallCheck(this, TileCoordinator);\n\n    /**\n     * Index at which the search for the next gap will start.\n     */\n    this.columnIndex = 0;\n    /**\n     * The current row index.\n     */\n\n    this.rowIndex = 0;\n  }\n  /**\n   * Gets the total number of rows occupied by tiles\n   * @return {?}\n   */\n\n\n  _createClass(TileCoordinator, [{\n    key: \"update\",\n\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles\n     * @return {?}\n     */\n    value: function update(numColumns, tiles) {\n      var _this = this;\n\n      this.columnIndex = 0;\n      this.rowIndex = 0;\n      this.tracker = new Array(numColumns);\n      this.tracker.fill(0, 0, this.tracker.length);\n      this.positions = tiles.map(function (tile) {\n        return _this._trackTile(tile);\n      });\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trackTile\",\n    value: function _trackTile(tile) {\n      // Find a gap large enough for this tile.\n\n      /** @type {?} */\n      var gapStartIndex = this._findMatchingGap(tile.colspan); // Place tile in the resulting gap.\n\n\n      this._markTilePosition(gapStartIndex, tile); // The next time we look for a gap, the search will start at columnIndex, which should be\n      // immediately after the tile that has just been placed.\n\n\n      this.columnIndex = gapStartIndex + tile.colspan;\n      return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n\n  }, {\n    key: \"_findMatchingGap\",\n    value: function _findMatchingGap(tileCols) {\n      if (tileCols > this.tracker.length) {\n        throw Error(\"mat-grid-list: tile with colspan \".concat(tileCols, \" is wider than \") + \"grid with cols=\\\"\".concat(this.tracker.length, \"\\\".\"));\n      } // Start index is inclusive, end index is exclusive.\n\n      /** @type {?} */\n\n\n      var gapStartIndex = -1;\n      /** @type {?} */\n\n      var gapEndIndex = -1; // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n\n      do {\n        // If we've reached the end of the row, go to the next row.\n        if (this.columnIndex + tileCols > this.tracker.length) {\n          this._nextRow();\n\n          gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n          gapEndIndex = this._findGapEndIndex(gapStartIndex);\n          continue;\n        }\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex); // If there are no more empty spaces in this row at all, move on to the next row.\n\n        if (gapStartIndex == -1) {\n          this._nextRow();\n\n          gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n          gapEndIndex = this._findGapEndIndex(gapStartIndex);\n          continue;\n        }\n\n        gapEndIndex = this._findGapEndIndex(gapStartIndex); // If a gap large enough isn't found, we want to start looking immediately after the current\n        // gap on the next iteration.\n\n        this.columnIndex = gapStartIndex + 1; // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n        // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n      } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0); // If we still didn't manage to find a gap, ensure that the index is\n      // at least zero so the tile doesn't get pulled out of the grid.\n\n\n      return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_nextRow\",\n    value: function _nextRow() {\n      this.columnIndex = 0;\n      this.rowIndex++; // Decrement all spaces by one to reflect moving down one row.\n\n      for (var i = 0; i < this.tracker.length; i++) {\n        this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n      }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_findGapEndIndex\",\n    value: function _findGapEndIndex(gapStartIndex) {\n      for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {\n        if (this.tracker[i] != 0) {\n          return i;\n        }\n      } // The gap ends with the end of the row.\n\n\n      return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markTilePosition\",\n    value: function _markTilePosition(start, tile) {\n      for (var i = 0; i < tile.colspan; i++) {\n        this.tracker[start + i] = tile.rowspan;\n      }\n    }\n  }, {\n    key: \"rowCount\",\n    get: function get() {\n      return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n\n  }, {\n    key: \"rowspan\",\n    get: function get() {\n      /** @type {?} */\n      var lastRowMax = Math.max.apply(Math, _toConsumableArray(this.tracker)); // if any of the tiles has a rowspan that pushes it beyond the total row count,\n      // add the difference to the rowcount\n\n      return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n  }]);\n\n  return TileCoordinator;\n}();\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\n\n\nvar TilePosition =\n/**\n * @param {?} row\n * @param {?} col\n */\nfunction TilePosition(row, col) {\n  _classCallCheck(this, TilePosition);\n\n  this.row = row;\n  this.col = col;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\n\n\nvar cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\n\nvar TileStyler = /*#__PURE__*/function () {\n  function TileStyler() {\n    _classCallCheck(this, TileStyler);\n\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param {?} gutterSize Size of the grid's gutter.\n   * @param {?} tracker Instance of the TileCoordinator.\n   * @param {?} cols Amount of columns in the grid.\n   * @param {?} direction Layout direction of the grid.\n   * @return {?}\n   */\n\n\n  _createClass(TileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      this._gutterSize = normalizeUnits(gutterSize);\n      this._rows = tracker.rowCount;\n      this._rowspan = tracker.rowspan;\n      this._cols = cols;\n      this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n\n  }, {\n    key: \"getBaseTileSize\",\n    value: function getBaseTileSize(sizePercent, gutterFraction) {\n      // Take the base size percent (as would be if evenly dividing the size between cells),\n      // and then subtracting the size of one gutter. However, since there are no gutters on the\n      // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n      // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n      // edge evenly among the cells).\n      return \"(\".concat(sizePercent, \"% - (\").concat(this._gutterSize, \" * \").concat(gutterFraction, \"))\");\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTilePosition\",\n    value: function getTilePosition(baseSize, offset) {\n      // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n      // row/column (offset).\n      return offset === 0 ? '0' : calc(\"(\".concat(baseSize, \" + \").concat(this._gutterSize, \") * \").concat(offset));\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTileSize\",\n    value: function getTileSize(baseSize, span) {\n      return \"(\".concat(baseSize, \" * \").concat(span, \") + (\").concat(span - 1, \" * \").concat(this._gutterSize, \")\");\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(tile, rowIndex, colIndex) {\n      // Percent of the available horizontal space that one column takes up.\n\n      /** @type {?} */\n      var percentWidthPerTile = 100 / this._cols; // Fraction of the vertical gutter size that each column takes up.\n      // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n\n      /** @type {?} */\n\n      var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n      this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n      this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n\n  }, {\n    key: \"setColStyles\",\n    value: function setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n      // Base horizontal size of a column.\n\n      /** @type {?} */\n      var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth); // The width and horizontal position of each tile is always calculated the same way, but the\n      // height and vertical position depends on the rowMode.\n\n      /** @type {?} */\n\n      var side = this._direction === 'rtl' ? 'right' : 'left';\n\n      tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n\n      tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getGutterSpan\",\n    value: function getGutterSpan() {\n      return \"\".concat(this._gutterSize, \" * (\").concat(this._rowspan, \" - 1)\");\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTileSpan\",\n    value: function getTileSpan(tileHeight) {\n      return \"\".concat(this._rowspan, \" * \").concat(this.getTileSize(tileHeight, 1));\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return null;\n    }\n  }]);\n\n  return TileStyler;\n}();\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\n\n\nvar FixedTileStyler = /*#__PURE__*/function (_TileStyler) {\n  _inherits(FixedTileStyler, _TileStyler);\n\n  var _super = _createSuper(FixedTileStyler);\n\n  /**\n   * @param {?} fixedRowHeight\n   */\n  function FixedTileStyler(fixedRowHeight) {\n    var _this2;\n\n    _classCallCheck(this, FixedTileStyler);\n\n    _this2 = _super.call(this);\n    _this2.fixedRowHeight = fixedRowHeight;\n    return _this2;\n  }\n  /**\n   * @param {?} gutterSize\n   * @param {?} tracker\n   * @param {?} cols\n   * @param {?} direction\n   * @return {?}\n   */\n\n\n  _createClass(FixedTileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      _get(_getPrototypeOf(FixedTileStyler.prototype), \"init\", this).call(this, gutterSize, tracker, cols, direction);\n\n      this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n      if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n        throw Error(\"Invalid value \\\"\".concat(this.fixedRowHeight, \"\\\" set as rowHeight.\"));\n      }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex) {\n      tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['height', calc(\"\".concat(this.getTileSpan(this.fixedRowHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['height', null]);\n\n      if (list._tiles) {\n        list._tiles.forEach(function (tile) {\n          tile._setStyle('top', null);\n\n          tile._setStyle('height', null);\n        });\n      }\n    }\n  }]);\n\n  return FixedTileStyler;\n}(TileStyler);\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\n\n\nvar RatioTileStyler = /*#__PURE__*/function (_TileStyler2) {\n  _inherits(RatioTileStyler, _TileStyler2);\n\n  var _super2 = _createSuper(RatioTileStyler);\n\n  /**\n   * @param {?} value\n   */\n  function RatioTileStyler(value) {\n    var _this3;\n\n    _classCallCheck(this, RatioTileStyler);\n\n    _this3 = _super2.call(this);\n\n    _this3._parseRatio(value);\n\n    return _this3;\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n\n\n  _createClass(RatioTileStyler, [{\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n      /** @type {?} */\n      var percentHeightPerTile = percentWidth / this.rowHeightRatio;\n      this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth); // Use padding-top and margin-top to maintain the given aspect ratio, as\n      // a percentage-based value for these properties is applied versus the *width* of the\n      // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\n      tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n\n      tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['paddingBottom', calc(\"\".concat(this.getTileSpan(this.baseTileHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['paddingBottom', null]);\n\n      list._tiles.forEach(function (tile) {\n        tile._setStyle('marginTop', null);\n\n        tile._setStyle('paddingTop', null);\n      });\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseRatio\",\n    value: function _parseRatio(value) {\n      /** @type {?} */\n      var ratioParts = value.split(':');\n\n      if (ratioParts.length !== 2) {\n        throw Error(\"mat-grid-list: invalid ratio given for row-height: \\\"\".concat(value, \"\\\"\"));\n      }\n\n      this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n  }]);\n\n  return RatioTileStyler;\n}(TileStyler);\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\n\n\nvar FitTileStyler = /*#__PURE__*/function (_TileStyler3) {\n  _inherits(FitTileStyler, _TileStyler3);\n\n  var _super3 = _createSuper(FitTileStyler);\n\n  function FitTileStyler() {\n    _classCallCheck(this, FitTileStyler);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(FitTileStyler, [{\n    key: \"setRowStyles\",\n\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    value: function setRowStyles(tile, rowIndex) {\n      // Percent of the available vertical space that one row takes up.\n\n      /** @type {?} */\n      var percentHeightPerTile = 100 / this._rowspan; // Fraction of the horizontal gutter size that each column takes up.\n\n      /** @type {?} */\n\n      var gutterHeightPerTile = (this._rows - 1) / this._rows; // Base vertical size of a column.\n\n      /** @type {?} */\n\n      var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n      tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      if (list._tiles) {\n        list._tiles.forEach(function (tile) {\n          tile._setStyle('top', null);\n\n          tile._setStyle('height', null);\n        });\n      }\n    }\n  }]);\n\n  return FitTileStyler;\n}(TileStyler);\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\n\n\nfunction calc(exp) {\n  return \"calc(\".concat(exp, \")\");\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\n\n\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : \"\".concat(value, \"px\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\n/** @type {?} */\n\n\nvar MAT_FIT_MODE = 'fit';\n\nvar MatGridList = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  function MatGridList(_element, _dir) {\n    _classCallCheck(this, MatGridList);\n\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     */\n\n    this._gutter = '1px';\n  }\n  /**\n   * Amount of columns in the grid list.\n   * @return {?}\n   */\n\n\n  _createClass(MatGridList, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      this._checkCols();\n\n      this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkCols\",\n    value: function _checkCols() {\n      if (!this.cols) {\n        throw Error(\"mat-grid-list: must pass in number of columns. \" + \"Example: <mat-grid-list cols=\\\"3\\\">\");\n      }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkRowHeight\",\n    value: function _checkRowHeight() {\n      if (!this._rowHeight) {\n        this._setTileStyler('1:1');\n      }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTileStyler\",\n    value: function _setTileStyler(rowHeight) {\n      if (this._tileStyler) {\n        this._tileStyler.reset(this);\n      }\n\n      if (rowHeight === MAT_FIT_MODE) {\n        this._tileStyler = new FitTileStyler();\n      } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n        this._tileStyler = new RatioTileStyler(rowHeight);\n      } else {\n        this._tileStyler = new FixedTileStyler(rowHeight);\n      }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_layoutTiles\",\n    value: function _layoutTiles() {\n      var _this4 = this;\n\n      if (!this._tileCoordinator) {\n        this._tileCoordinator = new TileCoordinator();\n      }\n      /** @type {?} */\n\n\n      var tracker = this._tileCoordinator;\n      /** @type {?} */\n\n      var tiles = this._tiles.filter(function (tile) {\n        return !tile._gridList || tile._gridList === _this4;\n      });\n      /** @type {?} */\n\n\n      var direction = this._dir ? this._dir.value : 'ltr';\n\n      this._tileCoordinator.update(this.cols, tiles);\n\n      this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n      tiles.forEach(function (tile, index) {\n        /** @type {?} */\n        var pos = tracker.positions[index];\n\n        _this4._tileStyler.setStyle(tile, pos.row, pos.col);\n      });\n\n      this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setListStyle\",\n    value: function _setListStyle(style) {\n      if (style) {\n        /** @type {?} */\n        this._element.nativeElement.style[style[0]] = style[1];\n      }\n    }\n  }, {\n    key: \"cols\",\n    get: function get() {\n      return this._cols;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n\n  }, {\n    key: \"gutterSize\",\n    get: function get() {\n      return this._gutter;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._gutter = \"\".concat(value == null ? '' : value);\n    }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"rowHeight\",\n    get: function get() {\n      return this._rowHeight;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = \"\".concat(value == null ? '' : value);\n\n      if (newValue !== this._rowHeight) {\n        this._rowHeight = newValue;\n\n        this._setTileStyler(this._rowHeight);\n      }\n    }\n  }]);\n\n  return MatGridList;\n}();\n\nMatGridList.ɵfac = function MatGridList_Factory(t) {\n  return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridList,\n  selectors: [[\"mat-grid-list\"]],\n  contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-grid-list\"],\n  inputs: {\n    cols: \"cols\",\n    gutterSize: \"gutterSize\",\n    rowHeight: \"rowHeight\"\n  },\n  exportAs: [\"matGridList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }])],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function MatGridList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [_c3],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatGridList.propDecorators = {\n  _tiles: [{\n    type: ContentChildren,\n    args: [MatGridTile, {\n      descendants: true\n    }]\n  }],\n  cols: [{\n    type: Input\n  }],\n  gutterSize: [{\n    type: Input\n  }],\n  rowHeight: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      template: \"<div><ng-content></ng-content></div>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\n      host: {\n        'class': 'mat-grid-list'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatGridListModule = function MatGridListModule() {\n  _classCallCheck(this, MatGridListModule);\n};\n\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatGridListModule\n});\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatGridListModule_Factory(t) {\n    return new (t || MatGridListModule)();\n  },\n  imports: [[MatLineModule, MatCommonModule], MatLineModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, {\n    declarations: function declarations() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    },\n    imports: function imports() {\n      return [MatLineModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      declarations: [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa8 };","map":{"version":3,"sources":["../../../src/lib/grid-list/grid-list-base.ts","../../../src/lib/grid-list/grid-tile.ts","../../../src/lib/grid-list/tile-coordinator.ts","../../../src/lib/grid-list/tile-styler.ts","../../../src/lib/grid-list/grid-list.ts","../../../src/lib/grid-list/grid-list-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n"]},"metadata":{},"sourceType":"module"}