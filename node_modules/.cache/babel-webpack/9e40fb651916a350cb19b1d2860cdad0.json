{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\nvar MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n\n/** @type {?} */\n\nvar nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatCheckbox;\n  }),\n  multi: true\n};\n/** @enum {number} */\n\nvar TransitionCheckState = {\n  /** The initial state of the component before any user interaction. */\n  Init: 0,\n\n  /** The state representing the component when it's becoming checked. */\n  Checked: 1,\n\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked: 2,\n\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate: 3\n};\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\n/**\n * Change event object emitted by MatCheckbox.\n */\n\nvar MatCheckboxChange = function MatCheckboxChange() {\n  _classCallCheck(this, MatCheckboxChange);\n}; // Boilerplate for applying mixins to MatCheckbox.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatCheckboxBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatCheckboxBase(_elementRef) {\n  _classCallCheck(this, MatCheckboxBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n\n\nvar MatCheckbox = /*#__PURE__*/function (_MatCheckboxMixinBase2) {\n  _inherits(MatCheckbox, _MatCheckboxMixinBase2);\n\n  var _super = _createSuper(MatCheckbox);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _focusMonitor\n   * @param {?} _ngZone\n   * @param {?} tabIndex\n   * @param {?} _clickAction\n   * @param {?=} _animationMode\n   */\n  function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatCheckbox);\n\n    _this = _super.call(this, elementRef);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._focusMonitor = _focusMonitor;\n    _this._ngZone = _ngZone;\n    _this._clickAction = _clickAction;\n    _this._animationMode = _animationMode;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n\n    _this.ariaLabel = '';\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    _this.ariaLabelledby = null;\n    _this._uniqueId = \"mat-checkbox-\".concat(++nextUniqueId);\n    /**\n     * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n     */\n\n    _this.id = _this._uniqueId;\n    /**\n     * Whether the label should appear after or before the checkbox. Defaults to 'after'\n     */\n\n    _this.labelPosition = 'after';\n    /**\n     * Name value will be applied to the input element if present\n     */\n\n    _this.name = null;\n    /**\n     * Event emitted when the checkbox's `checked` value changes.\n     */\n\n    _this.change = new EventEmitter();\n    /**\n     * Event emitted when the checkbox's `indeterminate` value changes.\n     */\n\n    _this.indeterminateChange = new EventEmitter();\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * \\@docs-private\n     */\n\n    _this._onTouched = function () {};\n\n    _this._currentAnimationClass = '';\n    _this._currentCheckState = TransitionCheckState.Init;\n\n    _this._controlValueAccessorChangeFn = function () {};\n\n    _this._checked = false;\n    _this._disabled = false;\n    _this._indeterminate = false;\n    _this.tabIndex = parseInt(tabIndex) || 0;\n\n    _this._focusMonitor.monitor(elementRef, true).subscribe(function (focusOrigin) {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(function () {\n          _this._onTouched();\n\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * Returns the unique id for the visual hidden input.\n   * @return {?}\n   */\n\n\n  _createClass(MatCheckbox, [{\n    key: \"ngAfterViewChecked\",\n    // TODO: Delete next major revision.\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterViewChecked() {}\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n\n    /**\n     * @return {?}\n     */\n    value: function _isRippleDisabled() {\n      return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onLabelTextChange\",\n    value: function _onLabelTextChange() {\n      // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n      // component will be only marked for check, but no actual change detection runs automatically.\n      // Instead of going back into the zone in order to trigger a change detection which causes\n      // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n      // an explicit change detection for the checkbox view and it's children.\n      this._changeDetectorRef.detectChanges();\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = !!value;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaChecked\",\n    value: function _getAriaChecked() {\n      return this.checked ? 'true' : this.indeterminate ? 'mixed' : 'false';\n    }\n    /**\n     * @private\n     * @param {?} newState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_transitionCheckState\",\n    value: function _transitionCheckState(newState) {\n      /** @type {?} */\n      var oldState = this._currentCheckState;\n      /** @type {?} */\n\n      var element = this._elementRef.nativeElement;\n\n      if (oldState === newState) {\n        return;\n      }\n\n      if (this._currentAnimationClass.length > 0) {\n        element.classList.remove(this._currentAnimationClass);\n      }\n\n      this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n      this._currentCheckState = newState;\n\n      if (this._currentAnimationClass.length > 0) {\n        element.classList.add(this._currentAnimationClass); // Remove the animation class to avoid animation when the checkbox is moved between containers\n\n        /** @type {?} */\n\n        var animationClass = this._currentAnimationClass;\n\n        this._ngZone.runOutsideAngular(function () {\n          setTimeout(function () {\n            element.classList.remove(animationClass);\n          }, 1000);\n        });\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      /** @type {?} */\n      var event = new MatCheckboxChange();\n      event.source = this;\n      event.checked = this.checked;\n\n      this._controlValueAccessorChangeFn(this.checked);\n\n      this.change.emit(event);\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      var _this2 = this;\n\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `checkbox` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation(); // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n\n      if (!this.disabled && this._clickAction !== 'noop') {\n        // When user manually click on the checkbox, `indeterminate` is set to false.\n        if (this.indeterminate && this._clickAction !== 'check') {\n          Promise.resolve().then(function () {\n            _this2._indeterminate = false;\n\n            _this2.indeterminateChange.emit(_this2._indeterminate);\n          });\n        }\n\n        this.toggle();\n\n        this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked); // Emit our custom change event if the native input emitted one.\n        // It is important to only emit it, if the native input triggered one, because\n        // we don't want to trigger a change event, when the `checked` variable changes for example.\n\n\n        this._emitChangeEvent();\n      } else if (!this.disabled && this._clickAction === 'noop') {\n        // Reset native input when clicked with noop. The native checkbox becomes checked after\n        // click, reset it to be align with `checked` value of `mat-checkbox`.\n        this._inputElement.nativeElement.checked = this.checked;\n        this._inputElement.nativeElement.indeterminate = this.indeterminate;\n      }\n    }\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInteractionEvent\",\n    value: function _onInteractionEvent(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the `change` output.\n      event.stopPropagation();\n    }\n    /**\n     * @private\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAnimationClassForCheckStateTransition\",\n    value: function _getAnimationClassForCheckStateTransition(oldState, newState) {\n      // Don't transition if animations are disabled.\n      if (this._animationMode === 'NoopAnimations') {\n        return '';\n      }\n      /** @type {?} */\n\n\n      var animSuffix = '';\n\n      switch (oldState) {\n        case TransitionCheckState.Init:\n          // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n          // [checked] bound to it.\n          if (newState === TransitionCheckState.Checked) {\n            animSuffix = 'unchecked-checked';\n          } else if (newState == TransitionCheckState.Indeterminate) {\n            animSuffix = 'unchecked-indeterminate';\n          } else {\n            return '';\n          }\n\n          break;\n\n        case TransitionCheckState.Unchecked:\n          animSuffix = newState === TransitionCheckState.Checked ? 'unchecked-checked' : 'unchecked-indeterminate';\n          break;\n\n        case TransitionCheckState.Checked:\n          animSuffix = newState === TransitionCheckState.Unchecked ? 'checked-unchecked' : 'checked-indeterminate';\n          break;\n\n        case TransitionCheckState.Indeterminate:\n          animSuffix = newState === TransitionCheckState.Checked ? 'indeterminate-checked' : 'indeterminate-unchecked';\n          break;\n      }\n\n      return \"mat-checkbox-anim-\".concat(animSuffix);\n    }\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value != this.checked) {\n        this._checked = value;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this.disabled) {\n        this._disabled = newValue;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n\n  }, {\n    key: \"indeterminate\",\n    get: function get() {\n      return this._indeterminate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var changed = value != this._indeterminate;\n      this._indeterminate = value;\n\n      if (changed) {\n        if (this._indeterminate) {\n          this._transitionCheckState(TransitionCheckState.Indeterminate);\n        } else {\n          this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n        }\n\n        this.indeterminateChange.emit(this._indeterminate);\n      }\n    }\n  }]);\n\n  return MatCheckbox;\n}(_MatCheckboxMixinBase);\n\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) {\n  return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCheckbox,\n  selectors: [[\"mat-checkbox\"]],\n  viewQuery: function MatCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n      ɵngcc0.ɵɵviewQuery(MatRipple, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-checkbox\"],\n  hostVars: 12,\n  hostBindings: function MatCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    name: \"name\",\n    required: \"required\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    indeterminate: \"indeterminate\",\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\",\n    indeterminateChange: \"indeterminateChange\"\n  },\n  exportAs: [\"matCheckbox\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 17,\n  vars: 20,\n  consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"indeterminate\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n      ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) {\n        return ctx._onInteractionEvent($event);\n      })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n      ɵngcc0.ɵɵelement(6, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(7, \"div\", 7);\n      ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n      ɵngcc0.ɵɵelement(10, \"path\", 10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelement(11, \"div\", 11);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n      ɵngcc0.ɵɵtext(15, \"\\xA0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(16);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      var _r2 = ɵngcc0.ɵɵreference(13);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"indeterminate\", ctx.indeterminate);\n      ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    }\n  },\n  directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n  styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCheckbox.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: NgZone\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_CHECKBOX_CLICK_ACTION]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatCheckbox.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  id: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  indeterminateChange: [{\n    type: Output\n  }],\n  value: [{\n    type: Input\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }],\n  ripple: [{\n    type: ViewChild,\n    args: [MatRipple]\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  indeterminate: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'mat-checkbox',\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\n      styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\n      exportAs: 'matCheckbox',\n      host: {\n        'class': 'mat-checkbox',\n        '[id]': 'id',\n        '[attr.tabindex]': 'null',\n        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n        '[class.mat-checkbox-checked]': 'checked',\n        '[class.mat-checkbox-disabled]': 'disabled',\n        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\"\n      },\n      providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n      inputs: ['disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_CLICK_ACTION]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    indeterminate: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MatCheckboxRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n\nvar MatCheckboxRequiredValidator = /*#__PURE__*/function (_CheckboxRequiredVali) {\n  _inherits(MatCheckboxRequiredValidator, _CheckboxRequiredVali);\n\n  var _super2 = _createSuper(MatCheckboxRequiredValidator);\n\n  function MatCheckboxRequiredValidator() {\n    _classCallCheck(this, MatCheckboxRequiredValidator);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatCheckboxRequiredValidator;\n}(CheckboxRequiredValidator);\n\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) {\n  return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator);\n};\n\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatCheckboxRequiredValidator,\n  selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n  hostVars: 1,\n  hostBindings: function MatCheckboxRequiredValidator_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"required\", ctx.required ? \"\" : null);\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatCheckboxRequiredValidator_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\",\n      providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n      host: {\n        '[attr.required]': 'required ? \"\" : null'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatCheckboxModule = function MatCheckboxModule() {\n  _classCallCheck(this, MatCheckboxModule);\n};\n\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatCheckboxModule\n});\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatCheckboxModule_Factory(t) {\n    return new (t || MatCheckboxModule)();\n  },\n  imports: [[CommonModule, MatRippleModule, MatCommonModule, ObserversModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, {\n    declarations: function declarations() {\n      return [MatCheckbox, MatCheckboxRequiredValidator];\n    },\n    imports: function imports() {\n      return [CommonModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n      declarations: [MatCheckbox, MatCheckboxRequiredValidator]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };","map":{"version":3,"sources":["../../../src/lib/checkbox/checkbox-config.ts","../../../src/lib/checkbox/checkbox.ts","../../../src/lib/checkbox/checkbox-required-validator.ts","../../../src/lib/checkbox/checkbox-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n"]},"metadata":{},"sourceType":"module"}