{"ast":null,"code":"import _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, ElementRef, NgZone, InjectionToken, ViewContainerRef, Directive, Attribute, ContentChild, defineInjectable } from '@angular/core';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, SPACE, ESCAPE } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { A11yModule } from '@angular/cdk/a11y';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/button';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/portal';\nimport * as ɵngcc7 from '@angular/material/dialog';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\nimport * as ɵngcc9 from '@angular/material/form-field';\nvar _c0 = [\"mat-calendar-body\", \"\"];\n\nfunction MatCalendarBody_tr_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tr\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"td\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r0.numCols);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.label);\n  }\n}\n\nfunction MatCalendarBody_tr_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"padding-top\", ctx_r4._cellPadding)(\"padding-bottom\", ctx_r4._cellPadding);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r4._firstRowOffset);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4._firstRowOffset >= ctx_r4.labelMinRequiredCells ? ctx_r4.label : \"\");\n  }\n}\n\nfunction MatCalendarBody_tr_1_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function MatCalendarBody_tr_1_td_2_Template_td_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var item_r6 = ctx.$implicit;\n      var ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r8._cellClicked(item_r6);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 9);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r6 = ctx.$implicit;\n    var colIndex_r7 = ctx.index;\n    var rowIndex_r3 = ɵngcc0.ɵɵnextContext().index;\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r5._cellWidth)(\"padding-top\", ctx_r5._cellPadding)(\"padding-bottom\", ctx_r5._cellPadding);\n    ɵngcc0.ɵɵclassProp(\"mat-calendar-body-disabled\", !item_r6.enabled)(\"mat-calendar-body-active\", ctx_r5._isActiveCell(rowIndex_r3, colIndex_r7));\n    ɵngcc0.ɵɵproperty(\"ngClass\", item_r6.cssClasses)(\"tabindex\", ctx_r5._isActiveCell(rowIndex_r3, colIndex_r7) ? 0 : 0 - 1);\n    ɵngcc0.ɵɵattribute(\"aria-label\", item_r6.ariaLabel)(\"aria-disabled\", !item_r6.enabled || null)(\"aria-selected\", ctx_r5.selectedValue === item_r6.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"mat-calendar-body-selected\", ctx_r5.selectedValue === item_r6.value)(\"mat-calendar-body-today\", ctx_r5.todayValue === item_r6.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(item_r6.displayValue);\n  }\n}\n\nfunction MatCalendarBody_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tr\", 4);\n    ɵngcc0.ɵɵtemplate(1, MatCalendarBody_tr_1_td_1_Template, 2, 6, \"td\", 5);\n    ɵngcc0.ɵɵtemplate(2, MatCalendarBody_tr_1_td_2_Template, 3, 20, \"td\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var row_r2 = ctx.$implicit;\n    var rowIndex_r3 = ctx.index;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", rowIndex_r3 === 0 && ctx_r1._firstRowOffset);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", row_r2);\n  }\n}\n\nfunction MatMonthView_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var day_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"aria-label\", day_r1.long);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(day_r1.narrow);\n  }\n}\n\nvar _c1 = [\"*\"];\n\nfunction MatCalendar_ng_template_0_Template(rf, ctx) {}\n\nfunction MatCalendar_mat_month_view_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-month-view\", 5);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_month_view_2_Template_mat_month_view_activeDateChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activeDate = $event;\n    })(\"selectedChange\", function MatCalendar_mat_month_view_2_Template_mat_month_view_selectedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6._dateSelected($event);\n    })(\"_userSelection\", function MatCalendar_mat_month_view_2_Template_mat_month_view__userSelection_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7._userSelected();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r1.activeDate)(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass);\n  }\n}\n\nfunction MatCalendar_mat_year_view_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-year-view\", 6);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_year_view_3_Template_mat_year_view_activeDateChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.activeDate = $event;\n    })(\"monthSelected\", function MatCalendar_mat_year_view_3_Template_mat_year_view_monthSelected_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._monthSelectedInYearView($event);\n    })(\"selectedChange\", function MatCalendar_mat_year_view_3_Template_mat_year_view_selectedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11._goToDateInView($event, \"month\");\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r2.activeDate)(\"selected\", ctx_r2.selected)(\"dateFilter\", ctx_r2.dateFilter)(\"maxDate\", ctx_r2.maxDate)(\"minDate\", ctx_r2.minDate);\n  }\n}\n\nfunction MatCalendar_mat_multi_year_view_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-multi-year-view\", 7);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_activeDateChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.activeDate = $event;\n    })(\"yearSelected\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_yearSelected_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14._yearSelectedInMultiYearView($event);\n    })(\"selectedChange\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_selectedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15._goToDateInView($event, \"year\");\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r3.activeDate)(\"selected\", ctx_r3.selected)(\"dateFilter\", ctx_r3.dateFilter)(\"maxDate\", ctx_r3.maxDate)(\"minDate\", ctx_r3.minDate);\n  }\n}\n\nvar _c2 = [\"button\"];\n\nfunction MatDatepickerToggle__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 3);\n    ɵngcc0.ɵɵelement(1, \"path\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c3 = [[[\"\", \"matDatepickerToggleIcon\", \"\"]]];\nvar _c4 = [\"[matDatepickerToggleIcon]\"];\n\nfunction createMissingDateImplError(provider) {\n  return Error(\"MatDatepicker: No provider found for \".concat(provider, \". You must import one of the following \") + \"modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a \" + \"custom implementation.\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Datepicker data that requires internationalization.\n */\n\n\nvar MatDatepickerIntl = function MatDatepickerIntl() {\n  _classCallCheck(this, MatDatepickerIntl);\n\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  this.changes = new Subject();\n  /**\n   * A label for the calendar popup (used by screen readers).\n   */\n\n  this.calendarLabel = 'Calendar';\n  /**\n   * A label for the button used to open the calendar popup (used by screen readers).\n   */\n\n  this.openCalendarLabel = 'Open calendar';\n  /**\n   * A label for the previous month button (used by screen readers).\n   */\n\n  this.prevMonthLabel = 'Previous month';\n  /**\n   * A label for the next month button (used by screen readers).\n   */\n\n  this.nextMonthLabel = 'Next month';\n  /**\n   * A label for the previous year button (used by screen readers).\n   */\n\n  this.prevYearLabel = 'Previous year';\n  /**\n   * A label for the next year button (used by screen readers).\n   */\n\n  this.nextYearLabel = 'Next year';\n  /**\n   * A label for the previous multi-year button (used by screen readers).\n   */\n\n  this.prevMultiYearLabel = 'Previous 20 years';\n  /**\n   * A label for the next multi-year button (used by screen readers).\n   */\n\n  this.nextMultiYearLabel = 'Next 20 years';\n  /**\n   * A label for the 'switch to month view' button (used by screen readers).\n   */\n\n  this.switchToMonthViewLabel = 'Choose date';\n  /**\n   * A label for the 'switch to year view' button (used by screen readers).\n   */\n\n  this.switchToMultiYearViewLabel = 'Choose month and year';\n};\n\nMatDatepickerIntl.ɵfac = function MatDatepickerIntl_Factory(t) {\n  return new (t || MatDatepickerIntl)();\n};\n\nMatDatepickerIntl.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MatDatepickerIntl,\n  factory: MatDatepickerIntl.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMatDatepickerIntl.ngInjectableDef = defineInjectable({\n  factory: function MatDatepickerIntl_Factory() {\n    return new MatDatepickerIntl();\n  },\n  token: MatDatepickerIntl,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\n\n\nvar MatCalendarCell =\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n * @param {?=} cssClasses\n */\nfunction MatCalendarCell(value, displayValue, ariaLabel, enabled, cssClasses) {\n  _classCallCheck(this, MatCalendarCell);\n\n  this.value = value;\n  this.displayValue = displayValue;\n  this.ariaLabel = ariaLabel;\n  this.enabled = enabled;\n  this.cssClasses = cssClasses;\n};\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\n\n\nvar MatCalendarBody = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   */\n  function MatCalendarBody(_elementRef, _ngZone) {\n    _classCallCheck(this, MatCalendarBody);\n\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * The number of columns in the table.\n     */\n\n    this.numCols = 7;\n    /**\n     * The cell number of the active cell in the table.\n     */\n\n    this.activeCell = 0;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n\n    this.cellAspectRatio = 1;\n    /**\n     * Emits when a new value is selected.\n     */\n\n    this.selectedValueChange = new EventEmitter();\n  }\n  /**\n   * @param {?} cell\n   * @return {?}\n   */\n\n\n  _createClass(MatCalendarBody, [{\n    key: \"_cellClicked\",\n    value: function _cellClicked(cell) {\n      if (cell.enabled) {\n        this.selectedValueChange.emit(cell.value);\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var columnChanges = changes['numCols'];\n      var rows = this.rows,\n          numCols = this.numCols;\n\n      if (changes['rows'] || columnChanges) {\n        this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n      }\n\n      if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n        this._cellPadding = \"\".concat(50 * this.cellAspectRatio / numCols, \"%\");\n      }\n\n      if (columnChanges || !this._cellWidth) {\n        this._cellWidth = \"\".concat(100 / numCols, \"%\");\n      }\n    }\n    /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isActiveCell\",\n    value: function _isActiveCell(rowIndex, colIndex) {\n      /** @type {?} */\n      var cellNumber = rowIndex * this.numCols + colIndex; // Account for the fact that the first row may not have as many cells.\n\n      if (rowIndex) {\n        cellNumber -= this._firstRowOffset;\n      }\n\n      return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusActiveCell\",\n    value: function _focusActiveCell() {\n      var _this = this;\n\n      this._ngZone.runOutsideAngular(function () {\n        _this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n          /** @type {?} */\n          var activeCell = _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n          if (activeCell) {\n            activeCell.focus();\n          }\n        });\n      });\n    }\n  }]);\n\n  return MatCalendarBody;\n}();\n\nMatCalendarBody.ɵfac = function MatCalendarBody_Factory(t) {\n  return new (t || MatCalendarBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nMatCalendarBody.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCalendarBody,\n  selectors: [[\"\", \"mat-calendar-body\", \"\"]],\n  hostAttrs: [\"role\", \"grid\", \"aria-readonly\", \"true\", 1, \"mat-calendar-body\"],\n  inputs: {\n    numCols: \"numCols\",\n    activeCell: \"activeCell\",\n    cellAspectRatio: \"cellAspectRatio\",\n    label: \"label\",\n    rows: \"rows\",\n    todayValue: \"todayValue\",\n    selectedValue: \"selectedValue\",\n    labelMinRequiredCells: \"labelMinRequiredCells\"\n  },\n  outputs: {\n    selectedValueChange: \"selectedValueChange\"\n  },\n  exportAs: [\"matCalendarBody\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c0,\n  decls: 2,\n  vars: 2,\n  consts: [[\"aria-hidden\", \"true\", 4, \"ngIf\"], [\"role\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"aria-hidden\", \"true\"], [1, \"mat-calendar-body-label\"], [\"role\", \"row\"], [\"aria-hidden\", \"true\", \"class\", \"mat-calendar-body-label\", 3, \"paddingTop\", \"paddingBottom\", 4, \"ngIf\"], [\"role\", \"gridcell\", \"class\", \"mat-calendar-body-cell\", 3, \"ngClass\", \"tabindex\", \"mat-calendar-body-disabled\", \"mat-calendar-body-active\", \"width\", \"paddingTop\", \"paddingBottom\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-body-label\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell\", 3, \"ngClass\", \"tabindex\", \"click\"], [1, \"mat-calendar-body-cell-content\"]],\n  template: function MatCalendarBody_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatCalendarBody_tr_0_Template, 3, 6, \"tr\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatCalendarBody_tr_1_Template, 3, 2, \"tr\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._firstRowOffset < ctx.labelMinRequiredCells);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.rows);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc1.NgClass],\n  styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCalendarBody.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nMatCalendarBody.propDecorators = {\n  label: [{\n    type: Input\n  }],\n  rows: [{\n    type: Input\n  }],\n  todayValue: [{\n    type: Input\n  }],\n  selectedValue: [{\n    type: Input\n  }],\n  labelMinRequiredCells: [{\n    type: Input\n  }],\n  numCols: [{\n    type: Input\n  }],\n  activeCell: [{\n    type: Input\n  }],\n  cellAspectRatio: [{\n    type: Input\n  }],\n  selectedValueChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCalendarBody, [{\n    type: Component,\n    args: [{\n      selector: '[mat-calendar-body]',\n      template: \"<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\"><td class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"numCols\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{label}}</td></tr><tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\"><td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\" aria-hidden=\\\"true\\\" class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"_firstRowOffset\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\\\"let item of row; let colIndex = index\\\" role=\\\"gridcell\\\" class=\\\"mat-calendar-body-cell\\\" [ngClass]=\\\"item.cssClasses\\\" [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\" [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\" [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\" [attr.aria-label]=\\\"item.ariaLabel\\\" [attr.aria-disabled]=\\\"!item.enabled || null\\\" [attr.aria-selected]=\\\"selectedValue === item.value\\\" (click)=\\\"_cellClicked(item)\\\" [style.width]=\\\"_cellWidth\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\"><div class=\\\"mat-calendar-body-cell-content\\\" [class.mat-calendar-body-selected]=\\\"selectedValue === item.value\\\" [class.mat-calendar-body-today]=\\\"todayValue === item.value\\\">{{item.displayValue}}</div></td></tr>\",\n      styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n      host: {\n        'class': 'mat-calendar-body',\n        'role': 'grid',\n        'aria-readonly': 'true'\n      },\n      exportAs: 'matCalendarBody',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    numCols: [{\n      type: Input\n    }],\n    activeCell: [{\n      type: Input\n    }],\n    cellAspectRatio: [{\n      type: Input\n    }],\n    selectedValueChange: [{\n      type: Output\n    }],\n    label: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    todayValue: [{\n      type: Input\n    }],\n    selectedValue: [{\n      type: Input\n    }],\n    labelMinRequiredCells: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\n\nvar MatMonthView = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateFormats\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   */\n  function MatMonthView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n    _classCallCheck(this, MatMonthView);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateFormats = _dateFormats;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    /**\n     * Emits when a new date is selected.\n     */\n\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits when any date is selected.\n     */\n\n    this._userSelection = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n\n    this.activeDateChange = new EventEmitter();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n    /** @type {?} */\n\n\n    var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    /** @type {?} */\n\n\n    var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    /** @type {?} */\n\n\n    var longWeekdays = this._dateAdapter.getDayOfWeekNames('long'); // Rotate the labels for days of the week based on the configured first day of the week.\n\n    /** @type {?} */\n\n\n    var weekdays = longWeekdays.map(function (long, i) {\n      return {\n        long: long,\n        narrow: narrowWeekdays[i]\n      };\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   * @return {?}\n   */\n\n\n  _createClass(MatMonthView, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      this._init();\n    }\n    /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dateSelected\",\n    value: function _dateSelected(date) {\n      if (this._selectedDate != date) {\n        /** @type {?} */\n        var selectedYear = this._dateAdapter.getYear(this.activeDate);\n        /** @type {?} */\n\n\n        var selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n        /** @type {?} */\n\n\n        var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n        this.selectedChange.emit(selectedDate);\n      }\n\n      this._userSelection.emit();\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleCalendarBodyKeydown\",\n    value: function _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var isRtl = this._isRtl();\n\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n          break;\n\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n          break;\n\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n          break;\n\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n          break;\n\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n          break;\n\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));\n          break;\n\n        case PAGE_UP:\n          this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n          break;\n\n        case PAGE_DOWN:\n          this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n          break;\n\n        case ENTER:\n        case SPACE:\n          if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n            this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n\n            this._userSelection.emit(); // Prevent unexpected default actions such as form submission.\n\n\n            event.preventDefault();\n          }\n\n          return;\n\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n\n      this._focusActiveCell(); // Prevent unexpected default actions such as form submission.\n\n\n      event.preventDefault();\n    }\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      this._selectedDate = this._getDateInCurrentMonth(this.selected);\n      this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n      this._monthLabel = this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n      /** @type {?} */\n\n      var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n\n      this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n      this._createWeekCells();\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusActiveCell\",\n    value: function _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createWeekCells\",\n    value: function _createWeekCells() {\n      /** @type {?} */\n      var daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n      /** @type {?} */\n\n\n      var dateNames = this._dateAdapter.getDateNames();\n\n      this._weeks = [[]];\n\n      for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n        if (cell == DAYS_PER_WEEK) {\n          this._weeks.push([]);\n\n          cell = 0;\n        }\n        /** @type {?} */\n\n\n        var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n        /** @type {?} */\n\n\n        var enabled = this._shouldEnableDate(date);\n        /** @type {?} */\n\n\n        var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n        /** @type {?} */\n\n\n        var cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n        this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n      }\n    }\n    /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldEnableDate\",\n    value: function _shouldEnableDate(date) {\n      return !!date && (!this.dateFilter || this.dateFilter(date)) && (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) && (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDateInCurrentMonth\",\n    value: function _getDateInCurrentMonth(date) {\n      return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\n    }\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasSameMonthAndYear\",\n    value: function _hasSameMonthAndYear(d1, d2) {\n      return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) && this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n  }, {\n    key: \"activeDate\",\n    get: function get() {\n      return this._activeDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n      if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n        this._init();\n      }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n      this._selectedDate = this._getDateInCurrentMonth(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minDate\",\n    get: function get() {\n      return this._minDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxDate\",\n    get: function get() {\n      return this._maxDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }]);\n\n  return MatMonthView;\n}();\n\nMatMonthView.ɵfac = function MatMonthView_Factory(t) {\n  return new (t || MatMonthView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nMatMonthView.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatMonthView,\n  selectors: [[\"mat-month-view\"]],\n  viewQuery: function MatMonthView_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    }\n  },\n  inputs: {\n    activeDate: \"activeDate\",\n    selected: \"selected\",\n    minDate: \"minDate\",\n    maxDate: \"maxDate\",\n    dateFilter: \"dateFilter\",\n    dateClass: \"dateClass\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    _userSelection: \"_userSelection\",\n    activeDateChange: \"activeDateChange\"\n  },\n  exportAs: [\"matMonthView\"],\n  decls: 7,\n  vars: 7,\n  consts: [[1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [4, \"ngFor\", \"ngForOf\"], [\"colspan\", \"7\", \"aria-hidden\", \"true\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"label\", \"rows\", \"todayValue\", \"selectedValue\", \"labelMinRequiredCells\", \"activeCell\", \"selectedValueChange\", \"keydown\"]],\n  template: function MatMonthView_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"tr\");\n      ɵngcc0.ɵɵtemplate(3, MatMonthView_th_3_Template, 2, 2, \"th\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"tr\");\n      ɵngcc0.ɵɵelement(5, \"th\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"tbody\", 4);\n      ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatMonthView_Template_tbody_selectedValueChange_6_listener($event) {\n        return ctx._dateSelected($event);\n      })(\"keydown\", function MatMonthView_Template_tbody_keydown_6_listener($event) {\n        return ctx._handleCalendarBodyKeydown($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._weekdays);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"label\", ctx._monthLabel)(\"rows\", ctx._weeks)(\"todayValue\", ctx._todayDate)(\"selectedValue\", ctx._selectedDate)(\"labelMinRequiredCells\", 3)(\"activeCell\", ctx._dateAdapter.getDate(ctx.activeDate) - 1);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, MatCalendarBody],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatMonthView.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatMonthView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  _userSelection: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMonthView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-month-view',\n      template: \"<table class=\\\"mat-calendar-table\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th></tr><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_monthLabel\\\" [rows]=\\\"_weeks\\\" [todayValue]=\\\"_todayDate\\\" [selectedValue]=\\\"_selectedDate\\\" [labelMinRequiredCells]=\\\"3\\\" [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\" (selectedValueChange)=\\\"_dateSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n      exportAs: 'matMonthView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    selectedChange: [{\n      type: Output\n    }],\n    _userSelection: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar yearsPerPage = 24;\n/** @type {?} */\n\nvar yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\n\nvar MatMultiYearView = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   */\n  function MatMultiYearView(_changeDetectorRef, _dateAdapter, _dir) {\n    _classCallCheck(this, MatMultiYearView);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    /**\n     * Emits when a new year is selected.\n     */\n\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the selected year. This doesn't imply a change on the selected date\n     */\n\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n\n    this.activeDateChange = new EventEmitter();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this multi-year view (everything other than the year is ignored).\n   * @return {?}\n   */\n\n\n  _createClass(MatMultiYearView, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      this._init();\n    }\n    /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this2 = this;\n\n      this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n      /** @type {?} */\n\n      var activeYear = this._dateAdapter.getYear(this._activeDate);\n      /** @type {?} */\n\n\n      var activeOffset = activeYear % yearsPerPage;\n      this._years = [];\n\n      for (var i = 0, row = []; i < yearsPerPage; i++) {\n        row.push(activeYear - activeOffset + i);\n\n        if (row.length == yearsPerRow) {\n          this._years.push(row.map(function (year) {\n            return _this2._createCellForYear(year);\n          }));\n\n          row = [];\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Handles when a new year is selected.\n     * @param {?} year\n     * @return {?}\n     */\n\n  }, {\n    key: \"_yearSelected\",\n    value: function _yearSelected(year) {\n      this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n      /** @type {?} */\n\n      var month = this._dateAdapter.getMonth(this.activeDate);\n      /** @type {?} */\n\n\n      var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n\n      this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleCalendarBodyKeydown\",\n    value: function _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var isRtl = this._isRtl();\n\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n          break;\n\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n          break;\n\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n          break;\n\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n          break;\n\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n          break;\n\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n          break;\n\n        case PAGE_UP:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n          break;\n\n        case PAGE_DOWN:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n          break;\n\n        case ENTER:\n        case SPACE:\n          this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n\n          break;\n\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n\n      this._focusActiveCell(); // Prevent unexpected default actions such as form submission.\n\n\n      event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getActiveCell\",\n    value: function _getActiveCell() {\n      return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusActiveCell\",\n    value: function _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createCellForYear\",\n    value: function _createCellForYear(year) {\n      /** @type {?} */\n      var yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n\n      return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n    }\n    /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldEnableYear\",\n    value: function _shouldEnableYear(year) {\n      // disable if the year is greater than maxDate lower than minDate\n      if (year === undefined || year === null || this.maxDate && year > this._dateAdapter.getYear(this.maxDate) || this.minDate && year < this._dateAdapter.getYear(this.minDate)) {\n        return false;\n      } // enable if it reaches here and there's no filter defined\n\n\n      if (!this.dateFilter) {\n        return true;\n      }\n      /** @type {?} */\n\n\n      var firstOfYear = this._dateAdapter.createDate(year, 0, 1); // If any date in the year is enabled count the year as enabled.\n\n\n      for (var date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n        if (this.dateFilter(date)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n  }, {\n    key: \"activeDate\",\n    get: function get() {\n      return this._activeDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n      if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) != Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n        this._init();\n      }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n      this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minDate\",\n    get: function get() {\n      return this._minDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxDate\",\n    get: function get() {\n      return this._maxDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }]);\n\n  return MatMultiYearView;\n}();\n\nMatMultiYearView.ɵfac = function MatMultiYearView_Factory(t) {\n  return new (t || MatMultiYearView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nMatMultiYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatMultiYearView,\n  selectors: [[\"mat-multi-year-view\"]],\n  viewQuery: function MatMultiYearView_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    }\n  },\n  inputs: {\n    activeDate: \"activeDate\",\n    selected: \"selected\",\n    minDate: \"minDate\",\n    maxDate: \"maxDate\",\n    dateFilter: \"dateFilter\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    yearSelected: \"yearSelected\",\n    activeDateChange: \"activeDateChange\"\n  },\n  exportAs: [\"matMultiYearView\"],\n  decls: 5,\n  vars: 6,\n  consts: [[1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"rows\", \"todayValue\", \"selectedValue\", \"numCols\", \"cellAspectRatio\", \"activeCell\", \"selectedValueChange\", \"keydown\"]],\n  template: function MatMultiYearView_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"tr\");\n      ɵngcc0.ɵɵelement(3, \"th\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"tbody\", 3);\n      ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatMultiYearView_Template_tbody_selectedValueChange_4_listener($event) {\n        return ctx._yearSelected($event);\n      })(\"keydown\", function MatMultiYearView_Template_tbody_keydown_4_listener($event) {\n        return ctx._handleCalendarBodyKeydown($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"rows\", ctx._years)(\"todayValue\", ctx._todayYear)(\"selectedValue\", ctx._selectedYear)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._getActiveCell());\n    }\n  },\n  directives: [MatCalendarBody],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatMultiYearView.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatMultiYearView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMultiYearView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-multi-year-view',\n      template: \"<table class=\\\"mat-calendar-table\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [rows]=\\\"_years\\\" [todayValue]=\\\"_todayYear\\\" [selectedValue]=\\\"_selectedYear\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_getActiveCell()\\\" (selectedValueChange)=\\\"_yearSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n      exportAs: 'matMultiYearView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    selectedChange: [{\n      type: Output\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\n\n\nvar MatYearView = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateFormats\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   */\n  function MatYearView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n    _classCallCheck(this, MatYearView);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateFormats = _dateFormats;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    /**\n     * Emits when a new month is selected.\n     */\n\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the selected month. This doesn't imply a change on the selected date\n     */\n\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n\n    this.activeDateChange = new EventEmitter();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this year view (everything other than the year is ignored).\n   * @return {?}\n   */\n\n\n  _createClass(MatYearView, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      this._init();\n    }\n    /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n\n  }, {\n    key: \"_monthSelected\",\n    value: function _monthSelected(month) {\n      /** @type {?} */\n      var normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n      this.monthSelected.emit(normalizedDate);\n      /** @type {?} */\n\n      var daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n      this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleCalendarBodyKeydown\",\n    value: function _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var isRtl = this._isRtl();\n\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n          break;\n\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n          break;\n\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n          break;\n\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n          break;\n\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n          break;\n\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n          break;\n\n        case PAGE_UP:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n          break;\n\n        case PAGE_DOWN:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n          break;\n\n        case ENTER:\n        case SPACE:\n          this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n\n          break;\n\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n\n      this._focusActiveCell(); // Prevent unexpected default actions such as form submission.\n\n\n      event.preventDefault();\n    }\n    /**\n     * Initializes this year view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this3 = this;\n\n      this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n      this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n      this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n      /** @type {?} */\n\n      var monthNames = this._dateAdapter.getMonthNames('short'); // First row of months only contains 5 elements so we can fit the year label on the same row.\n\n\n      this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(function (row) {\n        return row.map(function (month) {\n          return _this3._createCellForMonth(month, monthNames[month]);\n        });\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusActiveCell\",\n    value: function _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getMonthInCurrentYear\",\n    value: function _getMonthInCurrentYear(date) {\n      return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ? this._dateAdapter.getMonth(date) : null;\n    }\n    /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createCellForMonth\",\n    value: function _createCellForMonth(month, monthName) {\n      /** @type {?} */\n      var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n\n      return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n    }\n    /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldEnableMonth\",\n    value: function _shouldEnableMonth(month) {\n      /** @type {?} */\n      var activeYear = this._dateAdapter.getYear(this.activeDate);\n\n      if (month === undefined || month === null || this._isYearAndMonthAfterMaxDate(activeYear, month) || this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n        return false;\n      }\n\n      if (!this.dateFilter) {\n        return true;\n      }\n      /** @type {?} */\n\n\n      var firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1); // If any date in the month is enabled count the month as enabled.\n\n\n      for (var date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n        if (this.dateFilter(date)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isYearAndMonthAfterMaxDate\",\n    value: function _isYearAndMonthAfterMaxDate(year, month) {\n      if (this.maxDate) {\n        /** @type {?} */\n        var maxYear = this._dateAdapter.getYear(this.maxDate);\n        /** @type {?} */\n\n\n        var maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n        return year > maxYear || year === maxYear && month > maxMonth;\n      }\n\n      return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isYearAndMonthBeforeMinDate\",\n    value: function _isYearAndMonthBeforeMinDate(year, month) {\n      if (this.minDate) {\n        /** @type {?} */\n        var minYear = this._dateAdapter.getYear(this.minDate);\n        /** @type {?} */\n\n\n        var minMonth = this._dateAdapter.getMonth(this.minDate);\n\n        return year < minYear || year === minYear && month < minMonth;\n      }\n\n      return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n  }, {\n    key: \"activeDate\",\n    get: function get() {\n      return this._activeDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n      if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n        this._init();\n      }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n      this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minDate\",\n    get: function get() {\n      return this._minDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxDate\",\n    get: function get() {\n      return this._maxDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }]);\n\n  return MatYearView;\n}();\n\nMatYearView.ɵfac = function MatYearView_Factory(t) {\n  return new (t || MatYearView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nMatYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatYearView,\n  selectors: [[\"mat-year-view\"]],\n  viewQuery: function MatYearView_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    }\n  },\n  inputs: {\n    activeDate: \"activeDate\",\n    selected: \"selected\",\n    minDate: \"minDate\",\n    maxDate: \"maxDate\",\n    dateFilter: \"dateFilter\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    monthSelected: \"monthSelected\",\n    activeDateChange: \"activeDateChange\"\n  },\n  exportAs: [\"matYearView\"],\n  decls: 5,\n  vars: 8,\n  consts: [[1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"label\", \"rows\", \"todayValue\", \"selectedValue\", \"labelMinRequiredCells\", \"numCols\", \"cellAspectRatio\", \"activeCell\", \"selectedValueChange\", \"keydown\"]],\n  template: function MatYearView_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"tr\");\n      ɵngcc0.ɵɵelement(3, \"th\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"tbody\", 3);\n      ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatYearView_Template_tbody_selectedValueChange_4_listener($event) {\n        return ctx._monthSelected($event);\n      })(\"keydown\", function MatYearView_Template_tbody_keydown_4_listener($event) {\n        return ctx._handleCalendarBodyKeydown($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"label\", ctx._yearLabel)(\"rows\", ctx._months)(\"todayValue\", ctx._todayMonth)(\"selectedValue\", ctx._selectedMonth)(\"labelMinRequiredCells\", 2)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._dateAdapter.getMonth(ctx.activeDate));\n    }\n  },\n  directives: [MatCalendarBody],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatYearView.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatYearView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatYearView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-year-view',\n      template: \"<table class=\\\"mat-calendar-table\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_yearLabel\\\" [rows]=\\\"_months\\\" [todayValue]=\\\"_todayMonth\\\" [selectedValue]=\\\"_selectedMonth\\\" [labelMinRequiredCells]=\\\"2\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\" (selectedValueChange)=\\\"_monthSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n      exportAs: 'matYearView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    selectedChange: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default header for MatCalendar\n * @template D\n */\n\n\nvar MatCalendarHeader = /*#__PURE__*/function () {\n  /**\n   * @param {?} _intl\n   * @param {?} calendar\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} changeDetectorRef\n   */\n  function MatCalendarHeader(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n    _classCallCheck(this, MatCalendarHeader);\n\n    this._intl = _intl;\n    this.calendar = calendar;\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this.calendar.stateChanges.subscribe(function () {\n      return changeDetectorRef.markForCheck();\n    });\n  }\n  /**\n   * The label for the current calendar view.\n   * @return {?}\n   */\n\n\n  _createClass(MatCalendarHeader, [{\n    key: \"currentPeriodClicked\",\n\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    value: function currentPeriodClicked() {\n      this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"previousClicked\",\n    value: function previousClicked() {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextClicked\",\n    value: function nextClicked() {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"previousEnabled\",\n    value: function previousEnabled() {\n      if (!this.calendar.minDate) {\n        return true;\n      }\n\n      return !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextEnabled\",\n    value: function nextEnabled() {\n      return !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSameView\",\n    value: function _isSameView(date1, date2) {\n      if (this.calendar.currentView == 'month') {\n        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n      }\n\n      if (this.calendar.currentView == 'year') {\n        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n      } // Otherwise we are in 'multi-year' view.\n\n\n      return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) == Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n    }\n  }, {\n    key: \"periodButtonText\",\n    get: function get() {\n      if (this.calendar.currentView == 'month') {\n        return this._dateAdapter.format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n      }\n\n      if (this.calendar.currentView == 'year') {\n        return this._dateAdapter.getYearName(this.calendar.activeDate);\n      }\n      /** @type {?} */\n\n\n      var activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n      /** @type {?} */\n\n\n      var firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n      /** @type {?} */\n\n\n      var lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n      return \"\".concat(firstYearInView, \" \\u2013 \").concat(lastYearInView);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"periodButtonLabel\",\n    get: function get() {\n      return this.calendar.currentView == 'month' ? this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n    }\n    /**\n     * The label for the previous button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"prevButtonLabel\",\n    get: function get() {\n      return {\n        'month': this._intl.prevMonthLabel,\n        'year': this._intl.prevYearLabel,\n        'multi-year': this._intl.prevMultiYearLabel\n      }[this.calendar.currentView];\n    }\n    /**\n     * The label for the next button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextButtonLabel\",\n    get: function get() {\n      return {\n        'month': this._intl.nextMonthLabel,\n        'year': this._intl.nextYearLabel,\n        'multi-year': this._intl.nextMultiYearLabel\n      }[this.calendar.currentView];\n    }\n  }]);\n\n  return MatCalendarHeader;\n}();\n\nMatCalendarHeader.ɵfac = function MatCalendarHeader_Factory(t) {\n  return new (t || MatCalendarHeader)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n    return MatCalendar;\n  })), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatCalendarHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCalendarHeader,\n  selectors: [[\"mat-calendar-header\"]],\n  exportAs: [\"matCalendarHeader\"],\n  ngContentSelectors: _c1,\n  decls: 9,\n  vars: 8,\n  consts: [[1, \"mat-calendar-header\"], [1, \"mat-calendar-controls\"], [\"mat-button\", \"\", \"type\", \"button\", \"cdkAriaLive\", \"polite\", 1, \"mat-calendar-period-button\", 3, \"click\"], [1, \"mat-calendar-arrow\"], [1, \"mat-calendar-spacer\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-previous-button\", 3, \"disabled\", \"click\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-next-button\", 3, \"disabled\", \"click\"]],\n  template: function MatCalendarHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"button\", 2);\n      ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_2_listener() {\n        return ctx.currentPeriodClicked();\n      });\n      ɵngcc0.ɵɵtext(3);\n      ɵngcc0.ɵɵelement(4, \"div\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(5, \"div\", 4);\n      ɵngcc0.ɵɵprojection(6);\n      ɵngcc0.ɵɵelementStart(7, \"button\", 5);\n      ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_7_listener() {\n        return ctx.previousClicked();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(8, \"button\", 6);\n      ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_8_listener() {\n        return ctx.nextClicked();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.periodButtonLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.periodButtonText);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"mat-calendar-invert\", ctx.calendar.currentView != \"month\");\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"disabled\", !ctx.previousEnabled());\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.prevButtonLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", !ctx.nextEnabled());\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.nextButtonLabel);\n    }\n  },\n  directives: [ɵngcc4.MatButton, ɵngcc5.CdkAriaLive],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCalendarHeader.ctorParameters = function () {\n  return [{\n    type: MatDatepickerIntl\n  }, {\n    type: MatCalendar,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(function () {\n        return MatCalendar;\n      })]\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCalendarHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-calendar-header',\n      template: \"<div class=\\\"mat-calendar-header\\\"><div class=\\\"mat-calendar-controls\\\"><button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\" (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\" cdkAriaLive=\\\"polite\\\">{{periodButtonText}}<div class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div></button><div class=\\\"mat-calendar-spacer\\\"></div><ng-content></ng-content><button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\" [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\" [attr.aria-label]=\\\"prevButtonLabel\\\"></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\" [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\" [attr.aria-label]=\\\"nextButtonLabel\\\"></button></div></div>\",\n      exportAs: 'matCalendarHeader',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: MatDatepickerIntl\n    }, {\n      type: MatCalendar,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return MatCalendar;\n        })]\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\n\n\nvar MatCalendar = /*#__PURE__*/function () {\n  /**\n   * @param {?} _intl\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} _changeDetectorRef\n   */\n  function MatCalendar(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n    var _this4 = this;\n\n    _classCallCheck(this, MatCalendar);\n\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n\n    this._moveFocusOnNextTick = false;\n    /**\n     * Whether the calendar should be started in month or year view.\n     */\n\n    this.startView = 'month';\n    /**\n     * Emits when the currently selected date changes.\n     */\n\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when any date is selected.\n     */\n\n    this._userSelection = new EventEmitter();\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n\n    this.stateChanges = new Subject();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(function () {\n      _changeDetectorRef.markForCheck();\n\n      _this4.stateChanges.next();\n    });\n  }\n  /**\n   * A date representing the period (month or year) to start the calendar in.\n   * @return {?}\n   */\n\n\n  _createClass(MatCalendar, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n      this.activeDate = this.startAt || this._dateAdapter.today(); // Assign to the private property since we don't want to move focus on init.\n\n      this._currentView = this.startView;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      if (this._moveFocusOnNextTick) {\n        this._moveFocusOnNextTick = false;\n        this.focusActiveCell();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._intlChanges.unsubscribe();\n\n      this.stateChanges.complete();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n      if (change && !change.firstChange) {\n        /** @type {?} */\n        var view = this._getCurrentViewComponent();\n\n        if (view) {\n          // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n          // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n          this._changeDetectorRef.detectChanges();\n\n          view._init();\n        }\n      }\n\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"focusActiveCell\",\n    value: function focusActiveCell() {\n      this._getCurrentViewComponent()._focusActiveCell();\n    }\n    /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateTodaysDate\",\n    value: function updateTodaysDate() {\n      /** @type {?} */\n      var view = this.currentView == 'month' ? this.monthView : this.currentView == 'year' ? this.yearView : this.multiYearView;\n      view.ngAfterContentInit();\n    }\n    /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dateSelected\",\n    value: function _dateSelected(date) {\n      if (!this._dateAdapter.sameDate(date, this.selected)) {\n        this.selectedChange.emit(date);\n      }\n    }\n    /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n\n  }, {\n    key: \"_yearSelectedInMultiYearView\",\n    value: function _yearSelectedInMultiYearView(normalizedYear) {\n      this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n\n  }, {\n    key: \"_monthSelectedInYearView\",\n    value: function _monthSelectedInYearView(normalizedMonth) {\n      this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_userSelected\",\n    value: function _userSelected() {\n      this._userSelection.emit();\n    }\n    /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n\n  }, {\n    key: \"_goToDateInView\",\n    value: function _goToDateInView(date, view) {\n      this.activeDate = date;\n      this.currentView = view;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCurrentViewComponent\",\n    value: function _getCurrentViewComponent() {\n      return this.monthView || this.yearView || this.multiYearView;\n    }\n  }, {\n    key: \"startAt\",\n    get: function get() {\n      return this._startAt;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minDate\",\n    get: function get() {\n      return this._minDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxDate\",\n    get: function get() {\n      return this._maxDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeDate\",\n    get: function get() {\n      return this._clampedActiveDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n      this.stateChanges.next();\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether the calendar is in month view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"currentView\",\n    get: function get() {\n      return this._currentView;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._currentView = value;\n      this._moveFocusOnNextTick = true;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatCalendar;\n}();\n\nMatCalendar.ɵfac = function MatCalendar_Factory(t) {\n  return new (t || MatCalendar)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatCalendar.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCalendar,\n  selectors: [[\"mat-calendar\"]],\n  viewQuery: function MatCalendar_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatMonthView, true);\n      ɵngcc0.ɵɵviewQuery(MatYearView, true);\n      ɵngcc0.ɵɵviewQuery(MatMultiYearView, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthView = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearView = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.multiYearView = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-calendar\"],\n  inputs: {\n    startView: \"startView\",\n    startAt: \"startAt\",\n    selected: \"selected\",\n    minDate: \"minDate\",\n    maxDate: \"maxDate\",\n    headerComponent: \"headerComponent\",\n    dateFilter: \"dateFilter\",\n    dateClass: \"dateClass\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    yearSelected: \"yearSelected\",\n    monthSelected: \"monthSelected\",\n    _userSelection: \"_userSelection\"\n  },\n  exportAs: [\"matCalendar\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 5,\n  consts: [[3, \"cdkPortalOutlet\"], [\"cdkMonitorSubtreeFocus\", \"\", \"tabindex\", \"-1\", 1, \"mat-calendar-content\", 3, \"ngSwitch\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"activeDateChange\", \"selectedChange\", \"_userSelection\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"monthSelected\", \"selectedChange\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"yearSelected\", \"selectedChange\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"activeDateChange\", \"selectedChange\", \"_userSelection\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"monthSelected\", \"selectedChange\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"yearSelected\", \"selectedChange\"]],\n  template: function MatCalendar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatCalendar_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatCalendar_mat_month_view_2_Template, 1, 6, \"mat-month-view\", 2);\n      ɵngcc0.ɵɵtemplate(3, MatCalendar_mat_year_view_3_Template, 1, 5, \"mat-year-view\", 3);\n      ɵngcc0.ɵɵtemplate(4, MatCalendar_mat_multi_year_view_4_Template, 1, 5, \"mat-multi-year-view\", 4);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._calendarHeaderPortal);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.currentView);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"month\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"year\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"multi-year\");\n    }\n  },\n  directives: [ɵngcc6.CdkPortalOutlet, ɵngcc5.CdkMonitorFocus, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, MatMonthView, MatYearView, MatMultiYearView],\n  styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCalendar.ctorParameters = function () {\n  return [{\n    type: MatDatepickerIntl\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nMatCalendar.propDecorators = {\n  headerComponent: [{\n    type: Input\n  }],\n  startAt: [{\n    type: Input\n  }],\n  startView: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  _userSelection: [{\n    type: Output\n  }],\n  monthView: [{\n    type: ViewChild,\n    args: [MatMonthView]\n  }],\n  yearView: [{\n    type: ViewChild,\n    args: [MatYearView]\n  }],\n  multiYearView: [{\n    type: ViewChild,\n    args: [MatMultiYearView]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCalendar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-calendar',\n      template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template><div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\"><mat-month-view *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" [dateClass]=\\\"dateClass\\\" (selectedChange)=\\\"_dateSelected($event)\\\" (_userSelection)=\\\"_userSelected()\\\"></mat-month-view><mat-year-view *ngSwitchCase=\\\"'year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\\\"'multi-year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view></div>\",\n      styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n      host: {\n        'class': 'mat-calendar'\n      },\n      exportAs: 'matCalendar',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: MatDatepickerIntl\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    startView: [{\n      type: Input\n    }],\n    selectedChange: [{\n      type: Output\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    _userSelection: [{\n      type: Output\n    }],\n    startAt: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    headerComponent: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    monthView: [{\n      type: ViewChild,\n      args: [MatMonthView]\n    }],\n    yearView: [{\n      type: ViewChild,\n      args: [MatYearView]\n    }],\n    multiYearView: [{\n      type: ViewChild,\n      args: [MatMultiYearView]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by the Material datepicker.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar matDatepickerAnimations = {\n  /**\n   * Transforms the height of the datepicker's calendar.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    opacity: 0,\n    transform: 'scale(1, 0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1, 1)'\n  }))), transition('* => void', animate('100ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * Fades in the content of the calendar.\n   */\n  fadeInCalendar: trigger('fadeInCalendar', [state('void', style({\n    opacity: 0\n  })), state('enter', style({\n    opacity: 1\n  })), // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n  // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n  transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used to generate a unique ID for each datepicker instance.\n * @type {?}\n */\n\nvar datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n * @type {?}\n */\n\nvar MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\n}; // Boilerplate for applying mixins to MatDatepickerContent.\n\n/**\n * \\@docs-private\n */\n\nvar MatDatepickerContentBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatDatepickerContentBase(_elementRef) {\n  _classCallCheck(this, MatDatepickerContentBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template D\n */\n\n\nvar MatDatepickerContent = /*#__PURE__*/function (_MatDatepickerContent) {\n  _inherits(MatDatepickerContent, _MatDatepickerContent);\n\n  var _super = _createSuper(MatDatepickerContent);\n\n  /**\n   * @param {?} elementRef\n   */\n  function MatDatepickerContent(elementRef) {\n    _classCallCheck(this, MatDatepickerContent);\n\n    return _super.call(this, elementRef);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerContent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this._calendar.focusActiveCell();\n    }\n  }]);\n\n  return MatDatepickerContent;\n}(_MatDatepickerContentMixinBase);\n\nMatDatepickerContent.ɵfac = function MatDatepickerContent_Factory(t) {\n  return new (t || MatDatepickerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatDatepickerContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDatepickerContent,\n  selectors: [[\"mat-datepicker-content\"]],\n  viewQuery: function MatDatepickerContent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatCalendar, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._calendar = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-datepicker-content\"],\n  hostVars: 3,\n  hostBindings: function MatDatepickerContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@transformPanel\", \"enter\");\n      ɵngcc0.ɵɵclassProp(\"mat-datepicker-content-touch\", ctx.datepicker.touchUi);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  exportAs: [\"matDatepickerContent\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 11,\n  consts: [[\"cdkTrapFocus\", \"\", 3, \"id\", \"ngClass\", \"startAt\", \"startView\", \"minDate\", \"maxDate\", \"dateFilter\", \"headerComponent\", \"selected\", \"dateClass\", \"selectedChange\", \"yearSelected\", \"monthSelected\", \"_userSelection\"]],\n  template: function MatDatepickerContent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"mat-calendar\", 0);\n      ɵngcc0.ɵɵlistener(\"selectedChange\", function MatDatepickerContent_Template_mat_calendar_selectedChange_0_listener($event) {\n        return ctx.datepicker.select($event);\n      })(\"yearSelected\", function MatDatepickerContent_Template_mat_calendar_yearSelected_0_listener($event) {\n        return ctx.datepicker._selectYear($event);\n      })(\"monthSelected\", function MatDatepickerContent_Template_mat_calendar_monthSelected_0_listener($event) {\n        return ctx.datepicker._selectMonth($event);\n      })(\"_userSelection\", function MatDatepickerContent_Template_mat_calendar__userSelection_0_listener() {\n        return ctx.datepicker.close();\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"id\", ctx.datepicker.id)(\"ngClass\", ctx.datepicker.panelClass)(\"startAt\", ctx.datepicker.startAt)(\"startView\", ctx.datepicker.startView)(\"minDate\", ctx.datepicker._minDate)(\"maxDate\", ctx.datepicker._maxDate)(\"dateFilter\", ctx.datepicker._dateFilter)(\"headerComponent\", ctx.datepicker.calendarHeaderComponent)(\"selected\", ctx.datepicker._selected)(\"dateClass\", ctx.datepicker.dateClass)(\"@fadeInCalendar\", \"enter\");\n    }\n  },\n  directives: [MatCalendar, ɵngcc5.CdkTrapFocus, ɵngcc1.NgClass],\n  styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDatepickerContent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nMatDatepickerContent.propDecorators = {\n  _calendar: [{\n    type: ViewChild,\n    args: [MatCalendar]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker-content',\n      template: \"<mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\" [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\" [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\" [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\" (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\" (monthSelected)=\\\"datepicker._selectMonth($event)\\\" (_userSelection)=\\\"datepicker.close()\\\"></mat-calendar>\",\n      styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n      host: {\n        'class': 'mat-datepicker-content',\n        '[@transformPanel]': '\"enter\"',\n        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi'\n      },\n      animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar],\n      exportAs: 'matDatepickerContent',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['color']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    _calendar: [{\n      type: ViewChild,\n      args: [MatCalendar]\n    }]\n  });\n})(); // TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\n\n\nvar MatDatepicker = /*#__PURE__*/function () {\n  /**\n   * @param {?} _dialog\n   * @param {?} _overlay\n   * @param {?} _ngZone\n   * @param {?} _viewContainerRef\n   * @param {?} scrollStrategy\n   * @param {?} _dateAdapter\n   * @param {?} _dir\n   * @param {?} _document\n   */\n  function MatDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {\n    _classCallCheck(this, MatDatepicker);\n\n    this._dialog = _dialog;\n    this._overlay = _overlay;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    this._document = _document;\n    /**\n     * The view that the calendar should start in.\n     */\n\n    this.startView = 'month';\n    this._touchUi = false;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when the datepicker has been opened.\n     */\n\n    this.openedStream = new EventEmitter();\n    /**\n     * Emits when the datepicker has been closed.\n     */\n\n    this.closedStream = new EventEmitter();\n    this._opened = false;\n    /**\n     * The id for the datepicker calendar.\n     */\n\n    this.id = \"mat-datepicker-\".concat(datepickerUid++);\n    this._validSelected = null;\n    /**\n     * The element that was focused before the datepicker was opened.\n     */\n\n    this._focusedElementBeforeOpen = null;\n    /**\n     * Subscription to value changes in the associated input element.\n     */\n\n    this._inputSubscription = Subscription.EMPTY;\n    /**\n     * Emits when the datepicker is disabled.\n     */\n\n    this._disabledChange = new Subject();\n    /**\n     * Emits new selected date when selected date changes.\n     */\n\n    this._selectedChanged = new Subject();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * The date to open the calendar to initially.\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepicker, [{\n    key: \"ngOnDestroy\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnDestroy() {\n      this.close();\n\n      this._inputSubscription.unsubscribe();\n\n      this._disabledChange.complete();\n\n      if (this._popupRef) {\n        this._popupRef.dispose();\n\n        this._popupComponentRef = null;\n      }\n    }\n    /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(date) {\n      /** @type {?} */\n      var oldValue = this._selected;\n      this._selected = date;\n\n      if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n        this._selectedChanged.next(date);\n      }\n    }\n    /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n\n  }, {\n    key: \"_selectYear\",\n    value: function _selectYear(normalizedYear) {\n      this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n\n  }, {\n    key: \"_selectMonth\",\n    value: function _selectMonth(normalizedMonth) {\n      this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerInput\",\n    value: function _registerInput(input) {\n      var _this5 = this;\n\n      if (this._datepickerInput) {\n        throw Error('A MatDatepicker can only be associated with a single input.');\n      }\n\n      this._datepickerInput = input;\n      this._inputSubscription = this._datepickerInput._valueChange.subscribe(function (value) {\n        return _this5._selected = value;\n      });\n    }\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (this._opened || this.disabled) {\n        return;\n      }\n\n      if (!this._datepickerInput) {\n        throw Error('Attempted to open an MatDatepicker with no associated input.');\n      }\n\n      if (this._document) {\n        this._focusedElementBeforeOpen = this._document.activeElement;\n      }\n\n      this.touchUi ? this._openAsDialog() : this._openAsPopup();\n      this._opened = true;\n      this.openedStream.emit();\n    }\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n\n      if (!this._opened) {\n        return;\n      }\n\n      if (this._popupRef && this._popupRef.hasAttached()) {\n        this._popupRef.detach();\n      }\n\n      if (this._dialogRef) {\n        this._dialogRef.close();\n\n        this._dialogRef = null;\n      }\n\n      if (this._calendarPortal && this._calendarPortal.isAttached) {\n        this._calendarPortal.detach();\n      }\n      /** @type {?} */\n\n\n      var completeClose = function completeClose() {\n        // The `_opened` could've been reset already if\n        // we got two events in quick succession.\n        if (_this6._opened) {\n          _this6._opened = false;\n\n          _this6.closedStream.emit();\n\n          _this6._focusedElementBeforeOpen = null;\n        }\n      };\n\n      if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {\n        // Because IE moves focus asynchronously, we can't count on it being restored before we've\n        // marked the datepicker as closed. If the event fires out of sequence and the element that\n        // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n        // able to close the calendar at all. We work around it by making the logic, that marks\n        // the datepicker as closed, async as well.\n        this._focusedElementBeforeOpen.focus();\n\n        setTimeout(completeClose);\n      } else {\n        completeClose();\n      }\n    }\n    /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openAsDialog\",\n    value: function _openAsDialog() {\n      var _this7 = this;\n\n      // Usually this would be handled by `open` which ensures that we can only have one overlay\n      // open at a time, however since we reset the variables in async handlers some overlays\n      // may slip through if the user opens and closes multiple times in quick succession (e.g.\n      // by holding down the enter key).\n      if (this._dialogRef) {\n        this._dialogRef.close();\n      }\n\n      this._dialogRef = this._dialog.open(MatDatepickerContent, {\n        direction: this._dir ? this._dir.value : 'ltr',\n        viewContainerRef: this._viewContainerRef,\n        panelClass: 'mat-datepicker-dialog'\n      });\n\n      this._dialogRef.afterClosed().subscribe(function () {\n        return _this7.close();\n      });\n\n      this._dialogRef.componentInstance.datepicker = this;\n\n      this._setColor();\n    }\n    /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openAsPopup\",\n    value: function _openAsPopup() {\n      var _this8 = this;\n\n      if (!this._calendarPortal) {\n        this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n      }\n\n      if (!this._popupRef) {\n        this._createPopup();\n      }\n\n      if (!this._popupRef.hasAttached()) {\n        this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n        this._popupComponentRef.instance.datepicker = this;\n\n        this._setColor(); // Update the position once the calendar has rendered.\n\n\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n          _this8._popupRef.updatePosition();\n        });\n      }\n    }\n    /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createPopup\",\n    value: function _createPopup() {\n      var _this9 = this;\n\n      /** @type {?} */\n      var overlayConfig = new OverlayConfig({\n        positionStrategy: this._createPopupPositionStrategy(),\n        hasBackdrop: true,\n        backdropClass: 'mat-overlay-transparent-backdrop',\n        direction: this._dir,\n        scrollStrategy: this._scrollStrategy(),\n        panelClass: 'mat-datepicker-popup'\n      });\n      this._popupRef = this._overlay.create(overlayConfig);\n\n      this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n      merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(function (event) {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE || _this9._datepickerInput && event.altKey && event.keyCode === UP_ARROW;\n      }))).subscribe(function () {\n        return _this9.close();\n      });\n    }\n    /**\n     * Create the popup PositionStrategy.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createPopupPositionStrategy\",\n    value: function _createPopupPositionStrategy() {\n      return this._overlay.position().flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin()).withTransformOriginOn('.mat-datepicker-content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition().withPositions([{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }, {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n      }]);\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Passes the current theme color along to the calendar overlay.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setColor\",\n    value: function _setColor() {\n      /** @type {?} */\n      var color = this.color;\n\n      if (this._popupComponentRef) {\n        this._popupComponentRef.instance.color = color;\n      }\n\n      if (this._dialogRef) {\n        this._dialogRef.componentInstance.color = color;\n      }\n    }\n  }, {\n    key: \"startAt\",\n    get: function get() {\n      // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n      // selected value is.\n      return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * Color palette to use on the datepicker's calendar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this._color || (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._color = value;\n    }\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     * @return {?}\n     */\n\n  }, {\n    key: \"touchUi\",\n    get: function get() {\n      return this._touchUi;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._touchUi = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the datepicker pop-up should be disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled === undefined && this._datepickerInput ? this._datepickerInput.disabled : !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._disabled) {\n        this._disabled = newValue;\n\n        this._disabledChange.next(newValue);\n      }\n    }\n    /**\n     * Whether the calendar is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"opened\",\n    get: function get() {\n      return this._opened;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      value ? this.open() : this.close();\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_selected\",\n    get: function get() {\n      return this._validSelected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._validSelected = value;\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_minDate\",\n    get: function get() {\n      return this._datepickerInput && this._datepickerInput.min;\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_maxDate\",\n    get: function get() {\n      return this._datepickerInput && this._datepickerInput.max;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dateFilter\",\n    get: function get() {\n      return this._datepickerInput && this._datepickerInput._dateFilter;\n    }\n  }]);\n\n  return MatDatepicker;\n}();\n\nMatDatepicker.ɵfac = function MatDatepicker_Factory(t) {\n  return new (t || MatDatepicker)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATEPICKER_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\n\nMatDatepicker.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDatepicker,\n  selectors: [[\"mat-datepicker\"]],\n  inputs: {\n    startView: \"startView\",\n    startAt: \"startAt\",\n    color: \"color\",\n    touchUi: \"touchUi\",\n    disabled: \"disabled\",\n    opened: \"opened\",\n    calendarHeaderComponent: \"calendarHeaderComponent\",\n    panelClass: \"panelClass\",\n    dateClass: \"dateClass\"\n  },\n  outputs: {\n    yearSelected: \"yearSelected\",\n    monthSelected: \"monthSelected\",\n    openedStream: \"opened\",\n    closedStream: \"closed\"\n  },\n  exportAs: [\"matDatepicker\"],\n  decls: 0,\n  vars: 0,\n  template: function MatDatepicker_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDatepicker.ctorParameters = function () {\n  return [{\n    type: MatDialog\n  }, {\n    type: Overlay\n  }, {\n    type: NgZone\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DATEPICKER_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nMatDatepicker.propDecorators = {\n  calendarHeaderComponent: [{\n    type: Input\n  }],\n  startAt: [{\n    type: Input\n  }],\n  startView: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  touchUi: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  opened: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepicker, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker',\n      template: '',\n      exportAs: 'matDatepicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc7.MatDialog\n    }, {\n      type: ɵngcc8.Overlay\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DATEPICKER_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    startView: [{\n      type: Input\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    startAt: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    touchUi: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    opened: [{\n      type: Input\n    }],\n    calendarHeaderComponent: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatDatepickerInput;\n  }),\n  multi: true\n};\n/**\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_DATEPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(function () {\n    return MatDatepickerInput;\n  }),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\n\nvar MatDatepickerInputEvent =\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nfunction MatDatepickerInputEvent(target, targetElement) {\n  _classCallCheck(this, MatDatepickerInputEvent);\n\n  this.target = target;\n  this.targetElement = targetElement;\n  this.value = this.target.value;\n};\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\n\n\nvar MatDatepickerInput = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} _formField\n   */\n  function MatDatepickerInput(_elementRef, _dateAdapter, _dateFormats, _formField) {\n    var _this10 = this;\n\n    _classCallCheck(this, MatDatepickerInput);\n\n    this._elementRef = _elementRef;\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._formField = _formField;\n    /**\n     * Emits when a `change` event is fired on this `<input>`.\n     */\n\n    this.dateChange = new EventEmitter();\n    /**\n     * Emits when an `input` event is fired on this `<input>`.\n     */\n\n    this.dateInput = new EventEmitter();\n    /**\n     * Emits when the value changes (either due to user input or programmatic change).\n     */\n\n    this._valueChange = new EventEmitter();\n    /**\n     * Emits when the disabled state has changed\n     */\n\n    this._disabledChange = new EventEmitter();\n\n    this._onTouched = function () {};\n\n    this._cvaOnChange = function () {};\n\n    this._validatorOnChange = function () {};\n\n    this._datepickerSubscription = Subscription.EMPTY;\n    this._localeSubscription = Subscription.EMPTY;\n    /**\n     * The form control validator for whether the input parses.\n     */\n\n    this._parseValidator = function () {\n      return _this10._lastValueValid ? null : {\n        'matDatepickerParse': {\n          'text': _this10._elementRef.nativeElement.value\n        }\n      };\n    };\n    /**\n     * The form control validator for the min date.\n     */\n\n\n    this._minValidator = function (control) {\n      /** @type {?} */\n      var controlValue = _this10._getValidDateOrNull(_this10._dateAdapter.deserialize(control.value));\n\n      return !_this10.min || !controlValue || _this10._dateAdapter.compareDate(_this10.min, controlValue) <= 0 ? null : {\n        'matDatepickerMin': {\n          'min': _this10.min,\n          'actual': controlValue\n        }\n      };\n    };\n    /**\n     * The form control validator for the max date.\n     */\n\n\n    this._maxValidator = function (control) {\n      /** @type {?} */\n      var controlValue = _this10._getValidDateOrNull(_this10._dateAdapter.deserialize(control.value));\n\n      return !_this10.max || !controlValue || _this10._dateAdapter.compareDate(_this10.max, controlValue) >= 0 ? null : {\n        'matDatepickerMax': {\n          'max': _this10.max,\n          'actual': controlValue\n        }\n      };\n    };\n    /**\n     * The form control validator for the date filter.\n     */\n\n\n    this._filterValidator = function (control) {\n      /** @type {?} */\n      var controlValue = _this10._getValidDateOrNull(_this10._dateAdapter.deserialize(control.value));\n\n      return !_this10._dateFilter || !controlValue || _this10._dateFilter(controlValue) ? null : {\n        'matDatepickerFilter': true\n      };\n    };\n    /**\n     * The combined form control validator for this input.\n     */\n\n\n    this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n    /**\n     * Whether the last value set on the input was valid.\n     */\n\n    this._lastValueValid = false;\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    } // Update the displayed date when the locale changes.\n\n\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(function () {\n      _this10.value = _this10.value;\n    });\n  }\n  /**\n   * The datepicker that this input is associated with.\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerInput, [{\n    key: \"ngOnDestroy\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnDestroy() {\n      this._datepickerSubscription.unsubscribe();\n\n      this._localeSubscription.unsubscribe();\n\n      this._valueChange.complete();\n\n      this._disabledChange.complete();\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnValidatorChange\",\n    value: function registerOnValidatorChange(fn) {\n      this._validatorOnChange = fn;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(c) {\n      return this._validator ? this._validator(c) : null;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n\n  }, {\n    key: \"getPopupConnectionElementRef\",\n    value: function getPopupConnectionElementRef() {\n      return this.getConnectedOverlayOrigin();\n    }\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n\n  }, {\n    key: \"getConnectedOverlayOrigin\",\n    value: function getConnectedOverlayOrigin() {\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._cvaOnChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeydown\",\n    value: function _onKeydown(event) {\n      /** @type {?} */\n      var isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n      if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n        this._datepicker.open();\n\n        event.preventDefault();\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput(value) {\n      /** @type {?} */\n      var date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n\n      this._lastValueValid = !date || this._dateAdapter.isValid(date);\n      date = this._getValidDateOrNull(date);\n\n      if (!this._dateAdapter.sameDate(date, this._value)) {\n        this._value = date;\n\n        this._cvaOnChange(date);\n\n        this._valueChange.emit(date);\n\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      } else {\n        this._validatorOnChange();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getThemePalette\",\n    value: function _getThemePalette() {\n      return this._formField ? this._formField.color : undefined;\n    }\n    /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      // Reformat the input only if we have a valid value.\n      if (this.value) {\n        this._formatValue(this.value);\n      }\n\n      this._onTouched();\n    }\n    /**\n     * Formats a value and sets it on the input element.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      this._elementRef.nativeElement.value = value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n  }, {\n    key: \"matDatepicker\",\n    set: function set(value) {\n      var _this11 = this;\n\n      if (!value) {\n        return;\n      }\n\n      this._datepicker = value;\n\n      this._datepicker._registerInput(this);\n\n      this._datepickerSubscription.unsubscribe();\n\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe(function (selected) {\n        _this11.value = selected;\n\n        _this11._cvaOnChange(selected);\n\n        _this11._onTouched();\n\n        _this11.dateInput.emit(new MatDatepickerInputEvent(_this11, _this11._elementRef.nativeElement));\n\n        _this11.dateChange.emit(new MatDatepickerInputEvent(_this11, _this11._elementRef.nativeElement));\n      });\n    }\n    /**\n     * Function that can be used to filter out dates within the datepicker.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"matDatepickerFilter\",\n    set: function set(value) {\n      this._dateFilter = value;\n\n      this._validatorOnChange();\n    }\n    /**\n     * The value of the input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      value = this._dateAdapter.deserialize(value);\n      this._lastValueValid = !value || this._dateAdapter.isValid(value);\n      value = this._getValidDateOrNull(value);\n      /** @type {?} */\n\n      var oldDate = this.value;\n      this._value = value;\n\n      this._formatValue(value);\n\n      if (!this._dateAdapter.sameDate(oldDate, value)) {\n        this._valueChange.emit(value);\n      }\n    }\n    /**\n     * The minimum valid date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._min;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n      this._validatorOnChange();\n    }\n    /**\n     * The maximum valid date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._max;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n      this._validatorOnChange();\n    }\n    /**\n     * Whether the datepicker-input is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n      /** @type {?} */\n\n      var element = this._elementRef.nativeElement;\n\n      if (this._disabled !== newValue) {\n        this._disabled = newValue;\n\n        this._disabledChange.emit(newValue);\n      } // We need to null check the `blur` method, because it's undefined during SSR.\n\n\n      if (newValue && element.blur) {\n        // Normally, native input elements automatically blur if they turn disabled. This behavior\n        // is problematic, because it would mean that it triggers another change detection cycle,\n        // which then causes a changed after checked error if the input element was focused before.\n        element.blur();\n      }\n    }\n  }]);\n\n  return MatDatepickerInput;\n}();\n\nMatDatepickerInput.ɵfac = function MatDatepickerInput_Factory(t) {\n  return new (t || MatDatepickerInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.MatFormField, 8));\n};\n\nMatDatepickerInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDatepickerInput,\n  selectors: [[\"input\", \"matDatepicker\", \"\"]],\n  hostVars: 5,\n  hostBindings: function MatDatepickerInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function MatDatepickerInput_input_HostBindingHandler($event) {\n        return ctx._onInput($event.target.value);\n      })(\"change\", function MatDatepickerInput_change_HostBindingHandler() {\n        return ctx._onChange();\n      })(\"blur\", function MatDatepickerInput_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      })(\"keydown\", function MatDatepickerInput_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"aria-haspopup\", true)(\"aria-owns\", (ctx._datepicker == null ? null : ctx._datepicker.opened) && ctx._datepicker.id || null)(\"min\", ctx.min ? ctx._dateAdapter.toIso8601(ctx.min) : null)(\"max\", ctx.max ? ctx._dateAdapter.toIso8601(ctx.max) : null);\n    }\n  },\n  inputs: {\n    value: \"value\",\n    matDatepicker: \"matDatepicker\",\n    matDatepickerFilter: \"matDatepickerFilter\",\n    min: \"min\",\n    max: \"max\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    dateChange: \"dateChange\",\n    dateInput: \"dateInput\"\n  },\n  exportAs: [\"matDatepickerInput\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n    provide: MAT_INPUT_VALUE_ACCESSOR,\n    useExisting: MatDatepickerInput\n  }])]\n});\n/** @nocollapse */\n\nMatDatepickerInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatDatepickerInput.propDecorators = {\n  matDatepicker: [{\n    type: Input\n  }],\n  matDatepickerFilter: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  dateChange: [{\n    type: Output\n  }],\n  dateInput: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matDatepicker]',\n      providers: [MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n        provide: MAT_INPUT_VALUE_ACCESSOR,\n        useExisting: MatDatepickerInput\n      }],\n      host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event.target.value)',\n        '(change)': '_onChange()',\n        '(blur)': '_onBlur()',\n        '(keydown)': '_onKeydown($event)'\n      },\n      exportAs: 'matDatepickerInput'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc9.MatFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    dateChange: [{\n      type: Output\n    }],\n    dateInput: [{\n      type: Output\n    }],\n    value: [{\n      type: Input\n    }],\n    matDatepicker: [{\n      type: Input\n    }],\n    matDatepickerFilter: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\n\n\nvar MatDatepickerToggleIcon = function MatDatepickerToggleIcon() {\n  _classCallCheck(this, MatDatepickerToggleIcon);\n};\n\nMatDatepickerToggleIcon.ɵfac = function MatDatepickerToggleIcon_Factory(t) {\n  return new (t || MatDatepickerToggleIcon)();\n};\n\nMatDatepickerToggleIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDatepickerToggleIcon,\n  selectors: [[\"\", \"matDatepickerToggleIcon\", \"\"]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerToggleIcon, [{\n    type: Directive,\n    args: [{\n      selector: '[matDatepickerToggleIcon]'\n    }]\n  }], null, null);\n})();\n/**\n * @template D\n */\n\n\nvar MatDatepickerToggle = /*#__PURE__*/function () {\n  /**\n   * @param {?} _intl\n   * @param {?} _changeDetectorRef\n   * @param {?} defaultTabIndex\n   */\n  function MatDatepickerToggle(_intl, _changeDetectorRef, defaultTabIndex) {\n    _classCallCheck(this, MatDatepickerToggle);\n\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._stateChanges = Subscription.EMPTY;\n    /** @type {?} */\n\n    var parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n  }\n  /**\n   * Whether the toggle button is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerToggle, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    value: function ngOnChanges(changes) {\n      if (changes['datepicker']) {\n        this._watchStateChanges();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._watchStateChanges();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_open\",\n    value: function _open(event) {\n      if (this.datepicker && !this.disabled) {\n        this.datepicker.open();\n        event.stopPropagation();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_watchStateChanges\",\n    value: function _watchStateChanges() {\n      var _this12 = this;\n\n      /** @type {?} */\n      var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n      /** @type {?} */\n\n      var inputDisabled = this.datepicker && this.datepicker._datepickerInput ? this.datepicker._datepickerInput._disabledChange : of();\n      /** @type {?} */\n\n      var datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : of();\n\n      this._stateChanges.unsubscribe();\n\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(function () {\n        return _this12._changeDetectorRef.markForCheck();\n      });\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      if (this._disabled === undefined && this.datepicker) {\n        return this.datepicker.disabled;\n      }\n\n      return !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatDatepickerToggle;\n}();\n\nMatDatepickerToggle.ɵfac = function MatDatepickerToggle_Factory(t) {\n  return new (t || MatDatepickerToggle)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatDatepickerToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDatepickerToggle,\n  selectors: [[\"mat-datepicker-toggle\"]],\n  contentQueries: function MatDatepickerToggle_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatDatepickerToggleIcon, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n    }\n  },\n  viewQuery: function MatDatepickerToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c2, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._button = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-datepicker-toggle\"],\n  hostVars: 7,\n  hostBindings: function MatDatepickerToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatDatepickerToggle_focus_HostBindingHandler() {\n        return ctx._button.focus();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1);\n      ɵngcc0.ɵɵclassProp(\"mat-datepicker-toggle-active\", ctx.datepicker && ctx.datepicker.opened)(\"mat-accent\", ctx.datepicker && ctx.datepicker.color === \"accent\")(\"mat-warn\", ctx.datepicker && ctx.datepicker.color === \"warn\");\n    }\n  },\n  inputs: {\n    tabIndex: \"tabIndex\",\n    disabled: \"disabled\",\n    datepicker: [\"for\", \"datepicker\"],\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matDatepickerToggle\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c4,\n  decls: 4,\n  vars: 5,\n  consts: [[\"mat-icon-button\", \"\", \"type\", \"button\", \"aria-haspopup\", \"true\", 3, \"disabled\", \"disableRipple\", \"click\"], [\"button\", \"\"], [\"class\", \"mat-datepicker-toggle-default-icon\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", 4, \"ngIf\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", 1, \"mat-datepicker-toggle-default-icon\"], [\"d\", \"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"]],\n  template: function MatDatepickerToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c3);\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatDatepickerToggle_Template_button_click_0_listener($event) {\n        return ctx._open($event);\n      });\n      ɵngcc0.ɵɵtemplate(2, MatDatepickerToggle__svg_svg_2_Template, 2, 0, \"svg\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"disableRipple\", ctx.disableRipple);\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.openCalendarLabel)(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._customIcon);\n    }\n  },\n  directives: [ɵngcc4.MatButton, ɵngcc1.NgIf],\n  styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDatepickerToggle.ctorParameters = function () {\n  return [{\n    type: MatDatepickerIntl\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatDatepickerToggle.propDecorators = {\n  datepicker: [{\n    type: Input,\n    args: ['for']\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  disableRipple: [{\n    type: Input\n  }],\n  _customIcon: [{\n    type: ContentChild,\n    args: [MatDatepickerToggleIcon]\n  }],\n  _button: [{\n    type: ViewChild,\n    args: ['button']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker-toggle',\n      template: \"<button #button mat-icon-button type=\\\"button\\\" aria-haspopup=\\\"true\\\" [attr.aria-label]=\\\"_intl.openCalendarLabel\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" [disableRipple]=\\\"disableRipple\\\" (click)=\\\"_open($event)\\\"><svg *ngIf=\\\"!_customIcon\\\" class=\\\"mat-datepicker-toggle-default-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" fill=\\\"currentColor\\\" focusable=\\\"false\\\"><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/></svg><ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content></button>\",\n      styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\"],\n      host: {\n        'class': 'mat-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n        '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n        '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n        '(focus)': '_button.focus()'\n      },\n      exportAs: 'matDatepickerToggle',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: MatDatepickerIntl\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    datepicker: [{\n      type: Input,\n      args: ['for']\n    }],\n    disableRipple: [{\n      type: Input\n    }],\n    _customIcon: [{\n      type: ContentChild,\n      args: [MatDatepickerToggleIcon]\n    }],\n    _button: [{\n      type: ViewChild,\n      args: ['button']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatDatepickerModule = function MatDatepickerModule() {\n  _classCallCheck(this, MatDatepickerModule);\n};\n\nMatDatepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatDatepickerModule\n});\nMatDatepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatDatepickerModule_Factory(t) {\n    return new (t || MatDatepickerModule)();\n  },\n  providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[CommonModule, MatButtonModule, MatDialogModule, OverlayModule, A11yModule, PortalModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDatepickerModule, {\n    declarations: function declarations() {\n      return [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader];\n    },\n    imports: function imports() {\n      return [CommonModule, MatButtonModule, MatDialogModule, OverlayModule, A11yModule, PortalModule];\n    },\n    exports: function exports() {\n      return [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatButtonModule, MatDialogModule, OverlayModule, A11yModule, PortalModule],\n      exports: [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader],\n      declarations: [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader],\n      providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n      entryComponents: [MatDatepickerContent, MatCalendarHeader]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContentBase, _MatDatepickerContentMixinBase, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView, MatMultiYearView as ɵa34 };","map":{"version":3,"sources":["../../../src/lib/datepicker/datepicker-errors.ts","../../../src/lib/datepicker/datepicker-intl.ts","../../../src/lib/datepicker/calendar-body.ts","../../../src/lib/datepicker/month-view.ts","../../../src/lib/datepicker/multi-year-view.ts","../../../src/lib/datepicker/year-view.ts","../../../src/lib/datepicker/calendar.ts","../../../src/lib/datepicker/datepicker-animations.ts","../../../src/lib/datepicker/datepicker.ts","../../../src/lib/datepicker/datepicker-input.ts","../../../src/lib/datepicker/datepicker-toggle.ts","../../../src/lib/datepicker/datepicker-module.ts"],"names":["observableOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,SAAgB,0BAAhB,CAA2C,QAA3C,EAAA;AACE,SAAO,KAAK,CAAd,+CAAA,QAAA,qKAAc,CAAZ;AAID;AACA;;;;;AAA+I;;;;;ICDhJ,iB,GADA,6BAAA;AAAA;;AAAE;;;;AAMF,OAAA,OAAA,GAAoC,IAAI,OAAJ,EAApC;AACA;;;;AAEA,OAAA,aAAA,GAA0B,UAA1B;AACA;;;;AAEA,OAAA,iBAAA,GAA8B,eAA9B;AACA;;;;AAEA,OAAA,cAAA,GAA2B,gBAA3B;AACA;;;;AAEA,OAAA,cAAA,GAA2B,YAA3B;AACA;;;;AAEA,OAAA,aAAA,GAA0B,eAA1B;AACA;;;;AAEA,OAAA,aAAA,GAA0B,WAA1B;AACA;;;;AAEA,OAAA,kBAAA,GAA+B,mBAA/B;AACA;;;;AAEA,OAAA,kBAAA,GAA+B,eAA/B;AACA;;;;AAEA,OAAA,sBAAA,GAAmC,aAAnC;AACA;;;;AAEA,OAAA,0BAAA,GAAuC,uBAAvC;AACC,C;;kCArCD,yB,CAAA,C,EAAA;AAAY,SAAC,KAAU,CAAE,IAAzB,iBAAa,GAAD;AAAZ,C;;;;;cAAI;;AAAC;;AAAA,iBAAA,CAAA,eAAA,GAAA,gBAAA,CAAA;AAAA,EAAA,OAAA,EAAA,SAAA,yBAAA,GAAA;AAAA,WAAA,IAAA,iBAAA,EAAA;AAAA,GAAA;AAAA,EAAA,KAAA,EAAA,iBAAA;AAAA,EAAA,UAAA,EAAA;AAAA,CAAA,CAAA;;;;;;;;;;;;AAIoD,C;AAAE;;;;;AAKpD;;;;;;ICSP,e;AAAE;;;;;;;AACF,yBAAqB,KAArB,EACqB,YADrB,EAEqB,SAFrB,EAGqB,OAHrB,EAIqB,UAJrB,EAAA;AAAA;;AAAA,OAAA,KAAA,GAAqB,KAArB;AACA,OAAA,YAAA,GAAqB,YAArB;AACA,OAAA,SAAA,GAAqB,SAArB;AACA,OAAA,OAAA,GAAqB,OAArB;AACA,OAAA,UAAA,GAAqB,UAArB;AAA+D,C;AAE/D;;;;;;IAoBA,e;AAAE;;;;AAwCF,2BAAsB,WAAtB,EAAoE,OAApE,EAAA;AAAA;;AAAA,SAAA,WAAA,GAAsB,WAAtB;AAAA,SAAA,OAAA,GAAoE,OAApE;AAAoF;;;;AAvBpF,SAAA,OAAA,GAAqB,CAArB;AACA;;;;AAEA,SAAA,UAAA,GAAwB,CAAxB;AACA;;;;;AAKA,SAAA,eAAA,GAA6B,CAA7B;AACA;;;;AAEA,SAAA,mBAAA,GAAiE,IAAI,YAAJ,EAAjE;AAWwF;AACxF;;;;;;;;iCACe,I,EAAf;AACI,UAAI,IAAI,CAAC,OAAT,EAAkB;AAChB,aAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAAI,CAAC,KAAnC;AACD;AACF;AACH;;;;;;;gCACc,O,EAAd;AAAE;AACF,UAAU,aAAa,GAAG,OAAO,CAAjC,SAAiC,CAAjC;AADA,UAEW,IAFX,GAEA,IAFA,CAEW,IAFX;AAAA,UAEiB,OAFjB,GAEA,IAFA,CAEiB,OAFjB;;AAII,UAAI,OAAO,CAAC,MAAD,CAAP,IAAmB,aAAvB,EAAsC;AACpC,aAAK,eAAL,GAAuB,IAAI,IAAI,IAAI,CAAC,MAAb,IAAuB,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAA/B,GAAwC,OAAO,GAAG,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAA1D,GAAmE,CAA1F;AACD;;AAED,UAAI,OAAO,CAAC,iBAAD,CAAP,IAA8B,aAA9B,IAA+C,CAAC,KAAK,YAAzD,EAAuE;AACrE,aAAN,YAAM,aAAuB,KAAK,KAAK,eAAV,GAA7B,OAAM;AACD;;AAED,UAAI,aAAa,IAAI,CAAC,KAAK,UAA3B,EAAuC;AACrC,aAAN,UAAM,aAAqB,MAA3B,OAAM;AACD;AACF;AACH;;;;;;;;kCACgB,Q,EAAkB,Q,EAAlC;AAAE;AACF,UAAQ,UAAU,GAAG,QAAQ,GAAG,KAAK,OAAhB,GAArB,QAAA,CADA,CACC;;AAGG,UAAI,QAAJ,EAAc;AACZ,QAAA,UAAU,IAAI,KAAK,eAAnB;AACD;;AAED,aAAO,UAAU,IAAI,KAAK,UAA1B;AACD;AACH;;;;;;;uCAEA;AAAA;;AACI,WAAK,OAAL,CAAa,iBAAb,CAA+B,YAAnC;AACM,QAAA,KAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,YAAtB,GAAqC,IAArC,CAA0C,IAAI,CAAC,CAAD,CAA9C,EAAmD,SAAnD,CAA6D,YAAnE;AAAE;AACF,cAAc,UAAU,GACZ,KAAI,CAAC,WAAL,CAAiB,aAAjB,CAA+B,aAA/B,CADZ,2BACY,CADZ;;AAGQ,cAAI,UAAJ,EAAgB;AACd,YAAA,UAAU,CAAC,KAAX;AACD;AACF,SAPD;AAQD,OATD;AAUD;;;;;;gCAtGH,uB,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,eAAA,EAAA,MAAA,CAAA,iBAAA,CACU,MAAE,CAAA,UADZ,CAAA,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,MAAA,CADZ,CAAA;AACY,C;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAZ,MAAA,MAAA,CAAA,UAAA,CACA,CADA,EACA,6BADA,EACA,CADA,EACA,CADA,EACA,IADA,EACA,CADA;;;;;;;;;;;WACA,ozB;AAUA,EAAA,aAAA,EAAA,C;AAAA,EAAA,eAAA,EAAA;;AAAC;;AAAmB,eAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEb;AAAA,IAAA,IAAA,EAAA;AAAA,GAFa,EAEa;AAAA,IAAA,IAAA,EAAA;AAAA,GAFb,CAAA;AAAA,CAAA;;AAxCpB,eAAA,CAAA,cAAA,GAAA;AAAE,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAAF;AAES,EAAA,IAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAFT;AA4CA,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA5CA;AA+CA,EAAA,aAAA,EAAG,CAAH;AAAA,IAAA,IAAA,EAAA;AAAA,GAAG,CA/CH;AAkDA,EAAA,qBAAG,EAAH,CAAA;AAAQ,IAAA,IAAR,EAAA;AAAA,GAAA,CAlDA;AAqDA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CArDA;AAwDA,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAxDA;AA2DA,EAAA,eAAA,EAAA,CAAG;AAAH,IAAA,IAAA,EAAA;AAAG,GAAH,CA3DA;AA8DA,EAAA,mBAAA,EAAG,CAAH;AAAA,IAAA,IAAA,EAAA;AAAA,GAAG;AA9DH,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,C;AAAE;;;;;AAGiE;;;AChDnE,IAAM,aAAa,GAAnB,CAAA;AAAC;;;;;;IAeD,Y;AAAE;;;;;;AAiFF,wBAAsB,kBAAtB,EAC4D,YAD5D,EAEiC,YAFjC,EAGkC,IAHlC,EAAA;AAAA;;AAAA,SAAA,kBAAA,GAAsB,kBAAtB;AACA,SAAA,YAAA,GAA4D,YAA5D;AACA,SAAA,YAAA,GAAiC,YAAjC;AACA,SAAA,IAAA,GAAkC,IAAlC;AAAwD;;;;AAnCxD,SAAA,cAAA,GAA8D,IAAI,YAAJ,EAA9D;AACA;;;;AAEA,SAAA,cAAA,GAA0D,IAAI,YAAJ,EAA1D;AACA;;;;AAEA,SAAA,gBAAA,GAAyD,IAAI,YAAJ,EAAzD;;AA8BI,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,YAAM,0BAA0B,CAAC,aAAD,CAAhC;AACD;;AACD,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,YAAM,0BAA0B,CAAC,kBAAD,CAAhC;AACD;AACL;;;AACA,QAAU,cAAc,GAAG,KAAK,YAAL,CAA3B,iBAA2B,EAA3B;AAAC;;;AACD,QAAU,cAAc,GAAG,KAAK,YAAL,CAAkB,iBAAlB,CAA3B,QAA2B,CAA3B;AAAC;;;AACD,QAAU,YAAY,GAAG,KAAK,YAAL,CAAkB,iBAAlB,CAAzB,MAAyB,CAAzB,CAbA,CAaC;;AAE0B;;;AAC3B,QAAQ,QAAQ,GAAG,YAAY,CAAC,GAAb,CAAiB,UAAC,IAAD,EAAO,CAAP,EAApC;AACM,aAAO;AAAC,QAAA,IAAI,EAAJ,IAAD;AAAO,QAAA,MAAM,EAAE,cAAc,CAAC,CAAD;AAA7B,OAAP;AACN,KAFmB,CAAnB;AAGI,SAAK,SAAL,GAAiB,QAAQ,CAAC,KAAT,CAAe,cAAf,EAA+B,MAA/B,CAAsC,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAkB,cAAlB,CAAtC,CAAjB;AAEA,SAAK,WAAL,GAAmB,KAAK,YAAL,CAAkB,KAAlB,EAAnB;AACD;AACH;;;;;;;;;AAhEA;;;yCAiEA;AACI,WAAK,KAAL;AACD;AACH;;;;;;;;kCAEgB,I,EAAhB;AACI,UAAI,KAAK,aAAL,IAAsB,IAA1B,EAAgC;AACpC;AAAA,YAAY,YAAY,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAArD,UAA2B,CAA3B;AAAC;;;AACD,YAAY,aAAa,GAAG,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAvD,UAA4B,CAA5B;AAAC;;;AACD,YAAY,YAAY,GAAG,KAAK,YAAL,CAAkB,UAAlB,CAA6B,YAA7B,EAA2C,aAA3C,EAA3B,IAA2B,CAA3B;;AAEM,aAAK,cAAL,CAAoB,IAApB,CAAyB,YAAzB;AACD;;AAED,WAAK,cAAL,CAAoB,IAApB;AACD;AACH;;;;;;;;+CAE6B,K,EAA7B;AAAE;AAC2C;AACD;AACQ;AAGxC;AAIW;;AAET;AAPd,UAAU,aAAa,GAAG,KAA1B,WAAA;AAAC;;AACD,UAAU,KAAK,GAAG,KAAlB,MAAkB,EAAlB;;AAEI,cAAQ,KAAK,CAAC,OAAd;AACE,aAAK,UAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,eAAlB,CAAkC,KAAK,WAAvC,EAAoD,KAAK,GAAG,CAAH,GAAO,CAAC,CAAjE,CAAlB;AACA;;AACF,aAAK,WAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,eAAlB,CAAkC,KAAK,WAAvC,EAAoD,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAAjE,CAAlB;AACA;;AACF,aAAK,QAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,eAAlB,CAAkC,KAAK,WAAvC,EAAoD,CAAC,CAArD,CAAlB;AACA;;AACF,aAAK,UAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,eAAlB,CAAkC,KAAK,WAAvC,EAAoD,CAApD,CAAlB;AACA;;AACF,aAAK,IAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,eAAlB,CAAkC,KAAK,WAAvC,EACd,IAAI,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,CADU,CAAlB;AAEA;;AACF,aAAK,GAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,eAAlB,CAAkC,KAAK,WAAvC,EACb,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,IACC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,CAFY,CAAlB;AAGA;;AACF,aAAK,OAAL;AACE,eAAK,UAAL,GAAkB,KAAK,CAAC,MAAN,GACd,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EAAqD,CAAC,CAAtD,CADc,GAEd,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,EAAsD,CAAC,CAAvD,CAFJ;AAGA;;AACF,aAAK,SAAL;AACE,eAAK,UAAL,GAAkB,KAAK,CAAC,MAAN,GACd,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EAAqD,CAArD,CADc,GAEd,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,EAAsD,CAAtD,CAFJ;AAGA;;AACF,aAAK,KAAL;AACA,aAAK,KAAL;AACE,cAAI,CAAC,KAAK,UAAN,IAAoB,KAAK,UAAL,CAAgB,KAAK,WAArB,CAAxB,EAA2D;AACzD,iBAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,CAAnB;;AACA,iBAAK,cAAL,CAAoB,IAApB,GAFyD,CAGnE;;;AACU,YAAA,KAAK,CAAC,cAAN;AACD;;AACD;;AACF;AACN;AACQ;AA3CJ;;AA8CA,UAAI,KAAK,YAAL,CAAkB,WAAlB,CAA8B,aAA9B,EAA6C,KAAK,UAAlD,CAAJ,EAAmE;AACjE,aAAK,gBAAL,CAAsB,IAAtB,CAA2B,KAAK,UAAhC;AACD;;AAED,WAAK,gBAAL,GA1DJ,CA2DA;;;AACI,MAAA,KAAK,CAAC,cAAN;AACD;AACH;;;;;;;4BAEA;AACI,WAAK,aAAL,GAAqB,KAAK,sBAAL,CAA4B,KAAK,QAAjC,CAArB;AACA,WAAK,UAAL,GAAkB,KAAK,sBAAL,CAA4B,KAAK,YAAL,CAAkB,KAAlB,EAA5B,CAAlB;AACA,WAAK,WAAL,GACI,KAAK,YAAL,CAAkB,aAAlB,CAAgC,OAAhC,EAAyC,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAK,UAAhC,CAAzC,EACK,iBADL,EADJ;AAGJ;;AACA,UAAQ,YAAY,GAAG,KAAK,YAAL,CAAkB,UAAlB,CAA6B,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,CAA7B,EACf,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAK,UAAhC,CADe,EAAvB,CAAuB,CAAvB;;AAEI,WAAK,gBAAL,GACI,CAAC,aAAa,GAAG,KAAK,YAAL,CAAkB,YAAlB,CAA+B,YAA/B,CAAhB,GACA,KAAK,YAAL,CAAkB,iBAAlB,EADD,IAC0C,aAF9C;;AAIA,WAAK,gBAAL;;AACA,WAAK,kBAAL,CAAwB,YAAxB;AACD;AACH;;;;;;;uCAEA;AACI,WAAK,gBAAL,CAAsB,gBAAtB;AACD;AACH;;;;;;;;uCAEA;AAAE;AACF,UAAU,WAAW,GAAG,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAA5D,UAAwB,CAAxB;AAAC;;;AACD,UAAU,SAAS,GAAG,KAAK,YAAL,CAAtB,YAAsB,EAAtB;;AACI,WAAK,MAAL,GAAc,CAAC,EAAD,CAAd;;AACA,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,IAAI,GAAG,KAAK,gBAA5B,EAA8C,CAAC,GAAG,WAAlD,EAA+D,CAAC,IAAI,IAAI,EAAxE,EAA4E;AAC1E,YAAI,IAAI,IAAI,aAAZ,EAA2B;AACzB,eAAK,MAAL,CAAY,IAAZ,CAAiB,EAAjB;;AACA,UAAA,IAAI,GAAG,CAAP;AACD;AACP;;;AAAA,YAAY,IAAI,GAAG,KAAK,YAAL,CAAkB,UAAlB,CACP,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,CADO,EAEP,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAK,UAAhC,CAFO,EAEsC,CAAC,GAF1D,CAAmB,CAAnB;AAAC;;;AAGD,YAAY,OAAO,GAAG,KAAK,iBAAL,CAAtB,IAAsB,CAAtB;AAAC;;;AACD,YAAY,SAAS,GAAG,KAAK,YAAL,CAAkB,MAAlB,CAAyB,IAAzB,EAA+B,KAAK,YAAL,CAAkB,OAAlB,CAAvD,aAAwB,CAAxB;AAAC;;;AACD,YAAY,WAAW,GAAG,KAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,IAAf,CAAjB,GAA1B,SAAA;;AAEM,aAAK,MAAL,CAAY,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAAjC,EACK,IADL,CACU,IAAI,eAAJ,CAAoB,CAAC,GAAG,CAAxB,EAA2B,SAAS,CAAC,CAAD,CAApC,EAAyC,SAAzC,EAAoD,OAApD,EAA6D,WAA7D,CADV;AAED;AACF;AACH;;;;;;;;;sCAE4B,I,EAA5B;AACI,aAAO,CAAC,CAAC,IAAF,KACF,CAAC,KAAK,UAAN,IAAoB,KAAK,UAAL,CAAgB,IAAhB,CADlB,MAEF,CAAC,KAAK,OAAN,IAAiB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,IAA9B,EAAoC,KAAK,OAAzC,KAAqD,CAFpE,MAGF,CAAC,KAAK,OAAN,IAAiB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,IAA9B,EAAoC,KAAK,OAAzC,KAAqD,CAHpE,CAAP;AAID;AACH;;;;;;;;;;2CAKiC,I,EAAjC;AACI,aAAO,IAAI,IAAI,KAAK,oBAAL,CAA0B,IAA1B,EAAgC,KAAK,UAArC,CAAR,GACH,KAAK,YAAL,CAAkB,OAAlB,CAA0B,IAA1B,CADG,GAC+B,IADtC;AAED;AACH;;;;;;;;;;yCAE+B,E,EAAc,E,EAA7C;AACI,aAAO,CAAC,EAAE,EAAE,IAAI,EAAN,IAAY,KAAK,YAAL,CAAkB,QAAlB,CAA2B,EAA3B,KAAkC,KAAK,YAAL,CAAkB,QAAlB,CAA2B,EAA3B,CAA9C,IACA,KAAK,YAAL,CAAkB,OAAlB,CAA0B,EAA1B,KAAiC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,EAA1B,CADnC,CAAR;AAED;AACH;;;;;;;;wCAK8B,G,EAA9B;AACI,aAAQ,KAAK,YAAL,CAAkB,cAAlB,CAAiC,GAAjC,KAAyC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,GAA1B,CAA1C,GAA4E,GAA5E,GAAkF,IAAzF;AACD;AACH;;;;;;;;6BAEA;AACI,aAAO,KAAK,IAAL,IAAa,KAAK,IAAL,CAAU,KAAV,KAAoB,KAAxC;AACD;;;wBArQH;AACwB,aAAO,KAAK,WAAZ;AAA0B;AAClD;;;;;sBAAiB,K,EAAjB;AAAE;AACF,UAAU,aAAa,GAAG,KAA1B,WAAA;AAAC;;AACD,UAAU,SAAS,GACX,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,KAAkE,KAAK,YAAL,CAD1E,KAC0E,EAD1E;;AAEI,WAAK,WAAL,GAAmB,KAAK,YAAL,CAAkB,SAAlB,CAA4B,SAA5B,EAAuC,KAAK,OAA5C,EAAqD,KAAK,OAA1D,CAAnB;;AACA,UAAI,CAAC,KAAK,oBAAL,CAA0B,aAA1B,EAAyC,KAAK,WAA9C,CAAL,EAAiE;AAC/D,aAAK,KAAL;AACD;AACF;AACH;;;;;;;wBAGA;AAC6B,aAAO,KAAK,SAAZ;AAAwB;AACrD;;;;;sBAAe,K,EAAf;AACI,WAAK,SAAL,GAAiB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAjB;AACA,WAAK,aAAL,GAAqB,KAAK,sBAAL,CAA4B,KAAK,SAAjC,CAArB;AACD;AACH;;;;;;;wBAGA;AAC4B,aAAO,KAAK,QAAZ;AAAuB;AACnD;;;;;sBAAc,K,EAAd;AACI,WAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAhB;AACD;AACH;;;;;;;wBAGA;AAC4B,aAAO,KAAK,QAAZ;AAAuB;AACnD;;;;;sBAAc,K,EAAd;AACI,WAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAhB;AACD;;;;;;6BA/CH,oB,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,YAAA,EAAA,MAAA,CAAA,iBAAA,CACU,MAAE,CAAA,iBADZ,CAAA,EACY,MAAA,CAAA,iBAAA,CAAA,gBAAA,EAAA,CAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,cAAA,EAAA,CAAA,CADZ,CAAA;AACY,C;;;;;;;;;;;;;;;;;;;aAAZ,S;AAAA,IAAA,OAAA,EAAA,S;AACE,IAAA,UAAU,EAAZ,Y;AAAA,IAAA,SAAA,EACE;;AAAF,EAAA,OAAA,EAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AACA,IAAA,cAAA,EAAA,gBADA;AACA,IAAA,gBAAA,EAAA;AADA,G;AAGA,EAAA,QAAA,EAAA,CAAA,cAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,oBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,2BAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,SAAA,EAAA,GAAA,EAAA,aAAA,EAAA,MAAA,EAAA,CAAA,EAAA,mCAAA,CAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,YAAA,EAAA,eAAA,EAAA,uBAAA,EAAA,YAAA,EAAA,qBAAA,EAAA,SAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,qBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAAA;;AAAC;;AAAmB,YAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEf;AAAA,IAAA,IAAA,EAAA;AAAA,GAFe,EAEkB;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA,CAAA,gBAAA;AAAA,KAAA;AAAA,GAFlB,EA7BpB;AAAA,IAAA,IAAA,EAAA,WAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GA6BoB,EAoFpB;AAAA,IAAA,IAAA,EAAA,cAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GApFoB,CAAA;AAAA,CAAA;;AAlBpB,YAAQ,CAAR,cAAA,GAAA;AAAE,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAAF;AAAqC,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAArC;AAwBA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAxBA;AAsCA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAtCA;AA+CA,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA/CA;AAuDA,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAG,EAAH;AAAA,GAAA,CAvDA;AA+DA,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA/DA;AAkEA,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAlEA;AAqEA,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAG,EAAH;AAAA,GAAA,CArEA;AAwEA,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAG,EAAH,SAAA;AAAA,IAAA,IAAA,EAAA,CAAA,eAAA;AAAA,GAAA;AAxEA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA,C;AAAE;;;;;AAG0B;;;AC3E5B,IAAa,YAAY,GAAzB,EAAA;AAAC;;AAED,IAAa,WAAW,GAAxB,CAAA;AAAC;;;;;;IAeD,gB;AAAE;;;;;AAiEF,4BAAsB,kBAAtB,EACiC,YADjC,EAEkC,IAFlC,EAAA;AAAA;;AAAA,SAAA,kBAAA,GAAsB,kBAAtB;AACA,SAAA,YAAA,GAAiC,YAAjC;AACA,SAAA,IAAA,GAAkC,IAAlC;AAAwD;;;;AAtBxD,SAAA,cAAA,GAAuD,IAAI,YAAJ,EAAvD;AACA;;;;AAEA,SAAA,YAAA,GAAqD,IAAI,YAAJ,EAArD;AACA;;;;AAEA,SAAA,gBAAA,GAAyD,IAAI,YAAJ,EAAzD;;AAiBI,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,YAAM,0BAA0B,CAAC,aAAD,CAAhC;AACD;;AAED,SAAK,WAAL,GAAmB,KAAK,YAAL,CAAkB,KAAlB,EAAnB;AACD;AACH;;;;;;;;;AAnCA;;;yCAoCA;AACI,WAAK,KAAL;AACD;AACH;;;;;;;4BAEA;AAAA;;AACI,WAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,YAAL,CAAkB,KAAlB,EAA1B,CAAlB;AACJ;;AAAA,UAAQ,UAAU,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAA/C,WAAqB,CAArB;AAAC;;;AACD,UAAQ,YAAY,GAAG,UAAU,GAAjC,YAAA;AACI,WAAK,MAAL,GAAc,EAAd;;AACA,WAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAa,EAAhC,EAAoC,CAAC,GAAG,YAAxC,EAAsD,CAAC,EAAvD,EAA2D;AACzD,QAAA,GAAG,CAAC,IAAJ,CAAS,UAAU,GAAG,YAAb,GAA4B,CAArC;;AACA,YAAI,GAAG,CAAC,MAAJ,IAAc,WAAlB,EAA+B;AAC7B,eAAK,MAAL,CAAY,IAAZ,CAAiB,GAAG,CAAC,GAAJ,CAAQ,UAAA,IAAI;AAAA,mBAAI,MAAI,CAAC,kBAAL,CAAwB,IAAxB,CAAJ;AAAA,WAAZ,CAAjB;;AACA,UAAA,GAAG,GAAG,EAAN;AACD;AACF;;AACD,WAAK,kBAAL,CAAwB,YAAxB;AACD;AACH;;;;;;;;kCAEgB,I,EAAhB;AACI,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,YAAL,CAAkB,UAAlB,CAA6B,IAA7B,EAAmC,CAAnC,EAAsC,CAAtC,CAAvB;AACJ;;AAAA,UAAQ,KAAK,GAAG,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAA3C,UAAgB,CAAhB;AAAC;;;AACD,UAAQ,WAAW,GACX,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,YAAL,CAAkB,UAAlB,CAA6B,IAA7B,EAAmC,KAAnC,EAD5C,CAC4C,CAApC,CADR;;AAEI,WAAK,cAAL,CAAoB,IAApB,CAAyB,KAAK,YAAL,CAAkB,UAAlB,CAA6B,IAA7B,EAAmC,KAAnC,EACrB,IAAI,CAAC,GAAL,CAAS,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,CAAT,EAAqD,WAArD,CADqB,CAAzB;AAED;AACH;;;;;;;;+CAE6B,K,EAA7B;AAAE;AAC2C;AACD;AACQ;AAGxC;AAIW;;AAEV;AAPb,UAAU,aAAa,GAAG,KAA1B,WAAA;AAAC;;AACD,UAAU,KAAK,GAAG,KAAlB,MAAkB,EAAlB;;AAEI,cAAQ,KAAK,CAAC,OAAd;AACE,aAAK,UAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EAAqD,KAAK,GAAG,CAAH,GAAO,CAAC,CAAlE,CAAlB;AACA;;AACF,aAAK,WAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EAAqD,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAAlE,CAAlB;AACA;;AACF,aAAK,QAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EAAqD,CAAC,WAAtD,CAAlB;AACA;;AACF,aAAK,UAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EAAqD,WAArD,CAAlB;AACA;;AACF,aAAK,IAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EACd,CAAC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,CAAD,GAA+C,YADjC,CAAlB;AAEA;;AACF,aAAK,GAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EACd,YAAY,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,IAA8C,YAA7D,GAA4E,CAD9D,CAAlB;AAEA;;AACF,aAAK,OAAL;AACE,eAAK,UAAL,GACI,KAAK,YAAL,CAAkB,gBAAlB,CACI,KAAK,WADT,EACsB,KAAK,CAAC,MAAN,GAAe,CAAC,YAAD,GAAgB,EAA/B,GAAoC,CAAC,YAD3D,CADJ;AAGA;;AACF,aAAK,SAAL;AACE,eAAK,UAAL,GACI,KAAK,YAAL,CAAkB,gBAAlB,CACI,KAAK,WADT,EACsB,KAAK,CAAC,MAAN,GAAe,YAAY,GAAG,EAA9B,GAAmC,YADzD,CADJ;AAGA;;AACF,aAAK,KAAL;AACA,aAAK,KAAL;AACE,eAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,CAAnB;;AACA;;AACF;AACN;AACQ;AArCJ;;AAwCA,UAAI,KAAK,YAAL,CAAkB,WAAlB,CAA8B,aAA9B,EAA6C,KAAK,UAAlD,CAAJ,EAAmE;AACjE,aAAK,gBAAL,CAAsB,IAAtB,CAA2B,KAAK,UAAhC;AACD;;AAED,WAAK,gBAAL,GApDJ,CAqDA;;;AACI,MAAA,KAAK,CAAC,cAAN;AACD;AACH;;;;;;qCACA;AACI,aAAO,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,IAA6C,YAApD;AACD;AACH;;;;;;;uCAEA;AACI,WAAK,gBAAL,CAAsB,gBAAtB;AACD;AACH;;;;;;;;;uCAE6B,I,EAA7B;AAAE;AACF,UAAQ,QAAQ,GAAG,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAAK,YAAL,CAAkB,UAAlB,CAA6B,IAA7B,EAAmC,CAAnC,EAAjD,CAAiD,CAA9B,CAAnB;;AACI,aAAO,IAAI,eAAJ,CAAoB,IAApB,EAA0B,QAA1B,EAAoC,QAApC,EAA8C,KAAK,iBAAL,CAAuB,IAAvB,CAA9C,CAAP;AACD;AACH;;;;;;;;;sCAE4B,I,EAA5B;AAAE;AAEE,UAAI,IAAI,KAAK,SAAT,IAAsB,IAAI,KAAK,IAA/B,IACC,KAAK,OAAL,IAAgB,IAAI,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,OAA/B,CADxB,IAEC,KAAK,OAAL,IAAgB,IAAI,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,OAA/B,CAF5B,EAEsE;AACpE,eAAO,KAAP;AACD,OANL,CAOA;;;AAEI,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,eAAO,IAAP;AACD;AACL;;;AACA,UAAU,WAAW,GAAG,KAAK,YAAL,CAAkB,UAAlB,CAA6B,IAA7B,EAAmC,CAAnC,EAAxB,CAAwB,CAAxB,CAbA,CAaC;;;AAGG,WAAK,IAAI,IAAI,GAAG,WAAhB,EAA6B,KAAK,YAAL,CAAkB,OAAlB,CAA0B,IAA1B,KAAmC,IAAhE,EACE,IAAI,GAAG,KAAK,YAAL,CAAkB,eAAlB,CAAkC,IAAlC,EAAwC,CAAxC,CADT,EACqD;AACnD,YAAI,KAAK,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACzB,iBAAO,IAAP;AACD;AACF;;AAED,aAAO,KAAP;AACD;AACH;;;;;;;;wCAK8B,G,EAA9B;AACI,aAAQ,KAAK,YAAL,CAAkB,cAAlB,CAAiC,GAAjC,KAAyC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,GAA1B,CAA1C,GAA4E,GAA5E,GAAkF,IAAzF;AACD;AACH;;;;;;;;6BAEA;AACI,aAAO,KAAK,IAAL,IAAa,KAAK,IAAL,CAAU,KAAV,KAAoB,KAAxC;AACD;;;wBAtNH;AACwB,aAAO,KAAK,WAAZ;AAA0B;AAClD;;;;;sBAAiB,K,EAAjB;AAAE;AACF,UAAQ,aAAa,GAAG,KAAxB,WAAA;AAAC;;AACD,UAAU,SAAS,GACX,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,KAAkE,KAAK,YAAL,CAD1E,KAC0E,EAD1E;;AAEI,WAAK,WAAL,GAAmB,KAAK,YAAL,CAAkB,SAAlB,CAA4B,SAA5B,EAAuC,KAAK,OAA5C,EAAqD,KAAK,OAA1D,CAAnB;;AACA,UAAI,IAAI,CAAC,KAAL,CAAW,KAAK,YAAL,CAAkB,OAAlB,CAA0B,aAA1B,IAA2C,YAAtD,KACA,IAAI,CAAC,KAAL,CAAW,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,IAA8C,YAAzD,CADJ,EAC4E;AAC1E,aAAK,KAAL;AACD;AACF;AACH;;;;;;;wBAGA;AAC6B,aAAO,KAAK,SAAZ;AAAwB;AACrD;;;;;sBAAe,K,EAAf;AACI,WAAK,SAAL,GAAiB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAjB;AACA,WAAK,aAAL,GAAqB,KAAK,SAAL,IAAkB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,SAA/B,CAAvC;AACD;AACH;;;;;;;wBAGA;AAC4B,aAAO,KAAK,QAAZ;AAAuB;AACnD;;;;;sBAAc,K,EAAd;AACI,WAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAhB;AACD;AACH;;;;;;;wBAGA;AAC4B,aAAO,KAAK,QAAZ;AAAuB;AACnD;;;;;sBAAc,K,EAAd;AACI,WAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAhB;AACD;;;;;;iCA9CH,wB,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,gBAAA,EAAA,MAAA,CAAA,iBAAA,CACY,MAAA,CAAA,iBADZ,CAAA,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,cAAA,EAAA,CAAA,CADZ,CAAA;AACY,C;;;;;;;;;;;;;wCAAZ,W,QAAA,GAAA,CAAA,gBAAA,GACE,EAAQ,CAAA,K;;;AAAV,EAAA,MAAA,EAAA;AAAA,IAAA,UACE,EAAF,YADA;AACA,IAAA,QAAA,EAAA,UADA;AACA,IAAA,OAAA,EAAA,SADA;AAEE,IAAA,OAAA,EAAF,SAFA;AAEA,IAAA,UAAA,EAAA;AAFA,G;AAEA,EAAA,OAAA,EAAA;AACA,IAAA,cACA,EAAA,gBAFA;AAEA,IAAA,YAAA,EAAA,cAFA;AAEA,IAAA,gBAAA,EAAA;AAFA,G;AAEA,EAAA,QAAA,EAAA,CAAA,kBAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,oBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,2BAAA,CAAA,EAAA,CAAA,SAAA,EAAA,GAAA,EAAA,CAAA,EAAA,mCAAA,CAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,MAAA,EAAA,YAAA,EAAA,eAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,qBAAA,EAAA,SAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,yBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;mBAAA;;AAAC;;AAAmB,gBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEX;AAAA,IAAA,IAAA,EAAA;AAAA,GAFW,EAEsB;AAAA,IAAA,IAAA,EAAA,WAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GAFtB,EA7BpB;AAAA,IAAA,IAAA,EAAA,cAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GA6BoB,CAAA;AAAA,CAAA;;AAnBpB,gBAAA,CAAA,cAAA,GAAA;AAAE,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAAF;AAAqC,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAArC;AAuBA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAvBA;AAsCA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAtCA;AA+CA,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA/CA;AAuDA,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAQ,EAAR;AAAA,GAAA,CAvDA;AA+DA,EAAA,YAAA,EAAA,CAAA;AAAA,IAAA,IAAG,EAAH;AAAA,GAAA,CA/DA;AAkEA,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAG,EAAH;AAAA,GAAA,CAlEA;AAqEA,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,IAAA,EAAA,CAAA,eAAA;AAAA,GAAA;AArEA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA,C;AAAE;;;;;AAG0B;;;;;;;IC1D5B,W;AAAE;;;;;;AAsEF,uBAAsB,kBAAtB,EAC4D,YAD5D,EAEiC,YAFjC,EAGkC,IAHlC,EAAA;AAAA;;AAAA,SAAA,kBAAA,GAAsB,kBAAtB;AACA,SAAA,YAAA,GAA4D,YAA5D;AACA,SAAA,YAAA,GAAiC,YAAjC;AACA,SAAA,IAAA,GAAkC,IAAlC;AAAwD;;;;AA7BxD,SAAA,cAAA,GAAuD,IAAI,YAAJ,EAAvD;AACA;;;;AAEA,SAAA,aAAA,GAAsD,IAAI,YAAJ,EAAtD;AACA;;;;AAEA,SAAA,gBAAA,GAAyD,IAAI,YAAJ,EAAzD;;AAwBI,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,YAAM,0BAA0B,CAAC,aAAD,CAAhC;AACD;;AACD,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,YAAM,0BAA0B,CAAC,kBAAD,CAAhC;AACD;;AAED,SAAK,WAAL,GAAmB,KAAK,YAAL,CAAkB,KAAlB,EAAnB;AACD;AACH;;;;;;;;;AA7CA;;;yCA8CA;AACI,WAAK,KAAL;AACD;AACH;;;;;;;;mCAEiB,K,EAAjB;AAAE;AACF,UAAU,cAAc,GACd,KAAK,YAAL,CAAkB,UAAlB,CAA6B,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,CAA7B,EAAyE,KAAzE,EADV,CACU,CADV;;AAGI,WAAK,aAAL,CAAmB,IAAnB,CAAwB,cAAxB;AACJ;;AACA,UAAU,WAAW,GAAG,KAAK,YAAL,CAAkB,iBAAlB,CAAxB,cAAwB,CAAxB;;AAEI,WAAK,cAAL,CAAoB,IAApB,CAAyB,KAAK,YAAL,CAAkB,UAAlB,CACrB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,CADqB,EACuB,KADvB,EAErB,IAAI,CAAC,GAAL,CAAS,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,CAAT,EAAqD,WAArD,CAFqB,CAAzB;AAGD;AACH;;;;;;;;+CAE6B,K,EAA7B;AAAE;AAC2C;AACD;AACQ;AAGxC;AAIW;;AAEX;AAPZ,UAAU,aAAa,GAAG,KAA1B,WAAA;AAAC;;AACD,UAAU,KAAK,GAAG,KAAlB,MAAkB,EAAlB;;AAEI,cAAQ,KAAK,CAAC,OAAd;AACE,aAAK,UAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,EAAsD,KAAK,GAAG,CAAH,GAAO,CAAC,CAAnE,CAAlB;AACA;;AACF,aAAK,WAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,EAAsD,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAAnE,CAAlB;AACA;;AACF,aAAK,QAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,EAAsD,CAAC,CAAvD,CAAlB;AACA;;AACF,aAAK,UAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,EAAsD,CAAtD,CAAlB;AACA;;AACF,aAAK,IAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,EACd,CAAC,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAK,WAAhC,CADa,CAAlB;AAEA;;AACF,aAAK,GAAL;AACE,eAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,WAAzC,EACd,KAAK,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAK,WAAhC,CADS,CAAlB;AAEA;;AACF,aAAK,OAAL;AACE,eAAK,UAAL,GACI,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EAAqD,KAAK,CAAC,MAAN,GAAe,CAAC,EAAhB,GAAqB,CAAC,CAA3E,CADJ;AAEA;;AACF,aAAK,SAAL;AACE,eAAK,UAAL,GACI,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAK,WAAxC,EAAqD,KAAK,CAAC,MAAN,GAAe,EAAf,GAAoB,CAAzE,CADJ;AAEA;;AACF,aAAK,KAAL;AACA,aAAK,KAAL;AACE,eAAK,cAAL,CAAoB,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAK,WAAhC,CAApB;;AACA;;AACF;AACN;AACQ;AAnCJ;;AAsCA,UAAI,KAAK,YAAL,CAAkB,WAAlB,CAA8B,aAA9B,EAA6C,KAAK,UAAlD,CAAJ,EAAmE;AACjE,aAAK,gBAAL,CAAsB,IAAtB,CAA2B,KAAK,UAAhC;AACD;;AAED,WAAK,gBAAL,GAlDJ,CAmDA;;;AACI,MAAA,KAAK,CAAC,cAAN;AACD;AACH;;;;;;;4BAEA;AAAA;;AACI,WAAK,cAAL,GAAsB,KAAK,sBAAL,CAA4B,KAAK,QAAjC,CAAtB;AACA,WAAK,WAAL,GAAmB,KAAK,sBAAL,CAA4B,KAAK,YAAL,CAAkB,KAAlB,EAA5B,CAAnB;AACA,WAAK,UAAL,GAAkB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAAK,UAAnC,CAAlB;AACJ;;AACA,UAAQ,UAAU,GAAG,KAAK,YAAL,CAAkB,aAAlB,CAArB,OAAqB,CAArB,CALA,CAKC;;;AAEG,WAAK,OAAL,GAAe,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAD,EAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf,EAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,CAA7B,EAA6C,GAA7C,CAAiD,UAAA,GAAG;AAAA,eAAI,GAAG,CAAC,GAAJ,CACnE,UAAA,KAAK;AAAA,iBAAI,MAAI,CAAC,mBAAL,CAAyB,KAAzB,EAAgC,UAAU,CAAC,KAAD,CAA1C,CAAJ;AAAA,SAD8D,CAAJ;AAAA,OAApD,CAAf;;AAEA,WAAK,kBAAL,CAAwB,YAAxB;AACD;AACH;;;;;;;uCAEA;AACI,WAAK,gBAAL,CAAsB,gBAAtB;AACD;AACH;;;;;;;;;;2CAKiC,I,EAAjC;AACI,aAAO,IAAI,IAAI,KAAK,YAAL,CAAkB,OAAlB,CAA0B,IAA1B,KAAmC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,CAA3C,GACH,KAAK,YAAL,CAAkB,QAAlB,CAA2B,IAA3B,CADG,GACgC,IADvC;AAED;AACH;;;;;;;;;;wCAE8B,K,EAAe,S,EAA7C;AAAE;AACF,UAAQ,SAAS,GAAG,KAAK,YAAL,CAAkB,MAAlB,CACZ,KAAK,YAAL,CAAkB,UAAlB,CAA6B,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,UAA/B,CAA7B,EAAyE,KAAzE,EAAgF,CAAhF,CADY,EAEZ,KAAK,YAAL,CAAkB,OAAlB,CAFR,kBAAoB,CAApB;;AAGI,aAAO,IAAI,eAAJ,CACH,KADG,EACI,SAAS,CAAC,iBAAV,EADJ,EACmC,SADnC,EAC8C,KAAK,kBAAL,CAAwB,KAAxB,CAD9C,CAAP;AAED;AACH;;;;;;;;;uCAE6B,K,EAA7B;AAAE;AAEF,UAAU,UAAU,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAjD,UAAuB,CAAvB;;AAEI,UAAI,KAAK,KAAK,SAAV,IAAuB,KAAK,KAAK,IAAjC,IACA,KAAK,2BAAL,CAAiC,UAAjC,EAA6C,KAA7C,CADA,IAEA,KAAK,4BAAL,CAAkC,UAAlC,EAA8C,KAA9C,CAFJ,EAE0D;AACxD,eAAO,KAAP;AACD;;AAED,UAAI,CAAC,KAAK,UAAV,EAAsB;AACpB,eAAO,IAAP;AACD;AACL;;;AACA,UAAU,YAAY,GAAG,KAAK,YAAL,CAAkB,UAAlB,CAA6B,UAA7B,EAAyC,KAAzC,EAAzB,CAAyB,CAAzB,CAdA,CAcC;;;AAGG,WAAK,IAAI,IAAI,GAAG,YAAhB,EAA8B,KAAK,YAAL,CAAkB,QAAlB,CAA2B,IAA3B,KAAoC,KAAlE,EACK,IAAI,GAAG,KAAK,YAAL,CAAkB,eAAlB,CAAkC,IAAlC,EAAwC,CAAxC,CADZ,EACwD;AACtD,YAAI,KAAK,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACzB,iBAAO,IAAP;AACD;AACF;;AAED,aAAO,KAAP;AACD;AACH;;;;;;;;;;;gDAKsC,I,EAAc,K,EAApD;AACI,UAAI,KAAK,OAAT,EAAkB;AACtB;AAAA,YAAY,OAAO,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAhD,OAAsB,CAAtB;AAAC;;;AACD,YAAY,QAAQ,GAAG,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAlD,OAAuB,CAAvB;;AAEM,eAAO,IAAI,GAAG,OAAP,IAAmB,IAAI,KAAK,OAAT,IAAoB,KAAK,GAAG,QAAtD;AACD;;AAED,aAAO,KAAP;AACD;AACH;;;;;;;;;;;iDAKuC,I,EAAc,K,EAArD;AACI,UAAI,KAAK,OAAT,EAAkB;AACtB;AAAA,YAAY,OAAO,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAhD,OAAsB,CAAtB;AAAC;;;AACD,YAAY,QAAQ,GAAG,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAlD,OAAuB,CAAvB;;AAEM,eAAO,IAAI,GAAG,OAAP,IAAmB,IAAI,KAAK,OAAT,IAAoB,KAAK,GAAG,QAAtD;AACD;;AAED,aAAO,KAAP;AACD;AACH;;;;;;;;wCAK8B,G,EAA9B;AACI,aAAQ,KAAK,YAAL,CAAkB,cAAlB,CAAiC,GAAjC,KAAyC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,GAA1B,CAA1C,GAA4E,GAA5E,GAAkF,IAAzF;AACD;AACH;;;;;;;;6BAEA;AACI,aAAO,KAAK,IAAL,IAAa,KAAK,IAAL,CAAU,KAAV,KAAoB,KAAxC;AACD;;;wBArQH;AACwB,aAAO,KAAK,WAAZ;AAA0B;AAClD;;;;;sBAAiB,K,EAAjB;AAAE;AACF,UAAQ,aAAa,GAAG,KAAxB,WAAA;AAAC;;AACD,UAAU,SAAS,GACX,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,KAAkE,KAAK,YAAL,CAD1E,KAC0E,EAD1E;;AAEI,WAAK,WAAL,GAAmB,KAAK,YAAL,CAAkB,SAAlB,CAA4B,SAA5B,EAAuC,KAAK,OAA5C,EAAqD,KAAK,OAA1D,CAAnB;;AACA,UAAI,KAAK,YAAL,CAAkB,OAAlB,CAA0B,aAA1B,MAA6C,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,WAA/B,CAAjD,EAA8F;AAC5F,aAAK,KAAL;AACD;AACF;AACH;;;;;;;wBAGA;AAC6B,aAAO,KAAK,SAAZ;AAAwB;AACrD;;;;;sBAAe,K,EAAf;AACI,WAAK,SAAL,GAAiB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAjB;AACA,WAAK,cAAL,GAAsB,KAAK,sBAAL,CAA4B,KAAK,SAAjC,CAAtB;AACD;AACH;;;;;;;wBAGA;AAC4B,aAAO,KAAK,QAAZ;AAAuB;AACnD;;;;;sBAAc,K,EAAd;AACI,WAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAhB;AACD;AACH;;;;;;;wBAGA;AAC4B,aAAO,KAAK,QAAZ;AAAuB;AACnD;;;;;sBAAc,K,EAAd;AACI,WAAK,QAAL,GAAgB,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAhB;AACD;;;;;;4BA7CH,mB,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,WAAA,EAAA,MAAA,CAAA,iBAAA,CACE,MAAU,CAAA,iBADZ,CAAA,EACY,MAAA,CAAA,iBAAA,CAAA,gBAAA,EAAA,CAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,cAAA,EAAA,CAAA,CADZ,CAAA;AACY,C;;;;;;;;;;;;;;;;UAAZ;AAAA,IAAA,UAAA,EAAA,YAAA;AACY,IAAA,QAAA,EAAZ,UADA;AACA,IAAA,OAAA,EACE,SAFF;AAEA,IAAA,OAAA,EAAA,SAFA;AAEA,IAAA,UAAA,EAAA;AAFA,G;AAGE,EAAA,OAAA,EAAA;AAAF,IAAA,cAAA,EAAA,gBAAE;AAAF,IAAA,aACA,EAAA,eADE;AAEF,IAAA,gBAAA,EAAA;AAFE,G;AAEF,EAAA,QAAA,EAAA,CAAA,aAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,oBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,2BAAA,CAAA,EAAA,CAAA,SAAA,EAAA,GAAA,EAAA,CAAA,EAAA,mCAAA,CAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,EAAA,MAAA,EAAA,YAAA,EAAA,eAAA,EAAA,uBAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,qBAAA,EAAA,SAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,oBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;mBAAA;;AAAC;;AAAmB,WAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEhB;AAAA,IAAA,IAAA,EAAA;AAAA,GAFgB,EAEiB;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA,CAAA,gBAAA;AAAA,KAAA;AAAA,GAFjB,EAzBpB;AAAA,IAAA,IAAA,EAAA,WAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GAyBoB,EAyEpB;AAAA,IAAA,IAAA,EAAA,cAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GAzEoB,CAAA;AAAA,CAAA;;AAdpB,WAAA,CAAQ,cAAR,GAAA;AAAE,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAAF;AAAqC,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAArC;AAkBA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAlBA;AAgCA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAhCA;AAyCA,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAzCA;AAiDA,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAQ,EAAR;AAAA,GAAA,CAjDA;AAyDA,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAzDA;AA4DA,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAG,EAAH;AAAA,GAAA,CA5DA;AA+DA,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,IAAA,EAAA,CAAA,eAAA;AAAA,GAAA;AA/DA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA,C;AAAE;;;;;AAG0B;;;;;;ICpD5B,iB;AAAE;;;;;;;AACF,6BAAsB,KAAtB,EAC4D,QAD5D,EAEkC,YAFlC,EAG4D,YAH5D,EAIc,iBAJd,EAAA;AAAA;;AAAA,SAAA,KAAA,GAAsB,KAAtB;AACA,SAAA,QAAA,GAA4D,QAA5D;AACA,SAAA,YAAA,GAAkC,YAAlC;AACA,SAAA,YAAA,GAA4D,YAA5D;AAGI,SAAK,QAAL,CAAc,YAAd,CAA2B,SAA3B,CAAqC;AAAA,aAAM,iBAAiB,CAAC,YAAlB,EAAN;AAAA,KAArC;AACD;AACH;;;;;;;;;AAyCA;;;;2CAEA;AACI,WAAK,QAAL,CAAc,WAAd,GAA4B,KAAK,QAAL,CAAc,WAAd,IAA6B,OAA7B,GAAuC,YAAvC,GAAsD,OAAlF;AACD;AACH;;;;;;;sCAEA;AACI,WAAK,QAAL,CAAc,UAAd,GAA2B,KAAK,QAAL,CAAc,WAAd,IAA6B,OAA7B,GACvB,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,QAAL,CAAc,UAAlD,EAA8D,CAAC,CAA/D,CADuB,GAEnB,KAAK,YAAL,CAAkB,gBAAlB,CACI,KAAK,QAAL,CAAc,UADlB,EAC8B,KAAK,QAAL,CAAc,WAAd,IAA6B,MAA7B,GAAsC,CAAC,CAAvC,GAA2C,CAAC,YAD1E,CAFR;AAKD;AACH;;;;;;;kCAEA;AACI,WAAK,QAAL,CAAc,UAAd,GAA2B,KAAK,QAAL,CAAc,WAAd,IAA6B,OAA7B,GACvB,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,KAAK,QAAL,CAAc,UAAlD,EAA8D,CAA9D,CADuB,GAEnB,KAAK,YAAL,CAAkB,gBAAlB,CACI,KAAK,QAAL,CAAc,UADlB,EAEQ,KAAK,QAAL,CAAc,WAAd,IAA6B,MAA7B,GAAsC,CAAtC,GAA0C,YAFlD,CAFR;AAMD;AACH;;;;;;;sCAEA;AACI,UAAI,CAAC,KAAK,QAAL,CAAc,OAAnB,EAA4B;AAC1B,eAAO,IAAP;AACD;;AACD,aAAO,CAAC,KAAK,QAAL,CAAc,OAAf,IACH,CAAC,KAAK,WAAL,CAAiB,KAAK,QAAL,CAAc,UAA/B,EAA2C,KAAK,QAAL,CAAc,OAAzD,CADL;AAED;AACH;;;;;;;kCAEA;AACI,aAAO,CAAC,KAAK,QAAL,CAAc,OAAf,IACH,CAAC,KAAK,WAAL,CAAiB,KAAK,QAAL,CAAc,UAA/B,EAA2C,KAAK,QAAL,CAAc,OAAzD,CADL;AAED;AACH;;;;;;;;;;gCAEsB,K,EAAU,K,EAAhC;AACI,UAAI,KAAK,QAAL,CAAc,WAAd,IAA6B,OAAjC,EAA0C;AACxC,eAAO,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAA1B,KAAoC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAA1B,CAApC,IACH,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAA3B,KAAqC,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAA3B,CADzC;AAED;;AACD,UAAI,KAAK,QAAL,CAAc,WAAd,IAA6B,MAAjC,EAAyC;AACvC,eAAO,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAA1B,KAAoC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAA1B,CAA3C;AACD,OAPL,CAQA;;;AACI,aAAO,IAAI,CAAC,KAAL,CAAW,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAA1B,IAAmC,YAA9C,KACH,IAAI,CAAC,KAAL,CAAW,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAA1B,IAAmC,YAA9C,CADJ;AAED;;;wBA3FH;AACI,UAAI,KAAK,QAAL,CAAc,WAAd,IAA6B,OAAjC,EAA0C;AACxC,eAAO,KAAK,YAAL,CACF,MADE,CACK,KAAK,QAAL,CAAc,UADnB,EAC+B,KAAK,YAAL,CAAkB,OAAlB,CAA0B,cADzD,EAEE,iBAFF,EAAP;AAGD;;AACD,UAAI,KAAK,QAAL,CAAc,WAAd,IAA6B,MAAjC,EAAyC;AACvC,eAAO,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAAK,QAAL,CAAc,UAA5C,CAAP;AACD;AACL;;;AAAA,UAAU,UAAU,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAAK,QAAL,CAAjD,UAAuB,CAAvB;AAAC;;;AACD,UAAU,eAAe,GAAG,KAAK,YAAL,CAAkB,WAAlB,CACpB,KAAK,YAAL,CAAkB,UAAlB,CAA6B,UAAU,GAAG,UAAU,GAAG,EAAvD,EAA2D,CAA3D,EADR,CACQ,CADoB,CAA5B;AAAC;;;AAED,UAAU,cAAc,GAAG,KAAK,YAAL,CAAkB,WAAlB,CACnB,KAAK,YAAL,CAAkB,UAAlB,CAA6B,UAAU,GAAG,YAAb,GAA4B,CAA5B,GAAgC,UAAU,GAAG,EAA1E,EAA8E,CAA9E,EADR,CACQ,CADmB,CAA3B;;AAEA,uBAAA,eAAA,qBAAA,cAAA;AACG;AACH;;;;;;wBACA;AACI,aAAO,KAAK,QAAL,CAAc,WAAd,IAA6B,OAA7B,GACH,KAAK,KAAL,CAAW,0BADR,GACqC,KAAK,KAAL,CAAW,sBADvD;AAED;AACH;;;;;;;wBAEA;AACI,aAAO;AACL,iBAAS,KAAK,KAAL,CAAW,cADf;AAEL,gBAAQ,KAAK,KAAL,CAAW,aAFd;AAGL,sBAAc,KAAK,KAAL,CAAW;AAHpB,QAIL,KAAK,QAAL,CAAc,WAJT,CAAP;AAKD;AACH;;;;;;;wBAEA;AACI,aAAO;AACL,iBAAS,KAAK,KAAL,CAAW,cADf;AAEL,gBAAQ,KAAK,KAAL,CAAW,aAFd;AAGL,sBAAc,KAAK,KAAL,CAAW;AAHpB,QAIL,KAAK,QAAL,CAAc,WAJT,CAAP;AAKD;;;;;;kCAzDH,yB,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,iBAAA,EAAA,MAAA,CAAA,iBAAA,CACY,iBADZ,CAAA,EACY,MAAA,CAAA,iBAAA,CAAA,UAAA,CAAA;AAAA,WAAA,WAAA;AAAA,GAAA,CAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,gBAAA,EAAA,CAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,iBAAA,CADZ,CAAA;AACY,C;;;;;;;;;2XAAZ,0B,EAAA,C,EAAA,U,EACE,O;AAAU,EAAA,QAAA,EAAZ,SAAA,0BAAA,CACA,EADA,EACA,GADA,EACA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AAAA,MAAA,MAAA,CAAA,eAAA;AACA,MAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACA,MAAA,MACA,CAAA,cADA,CACA,CADA,EACA,KADA,EACA,CADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBACA;;AAAC;;AAAmB,iBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEX;AAAA,IAAA,IAAA,EAAA;AAAA,GAFW,EAGd;AAAA,IAAA,IAAA,EAAA,WAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA,CAAA,UAAA,CAAA;AAAA,eAAA,WAAA;AAAA,OAAA,CAAA;AAAA,KAAA;AAAA,GAHc,EAnBpB;AAAA,IAAA,IAAA,EAAA,WAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GAmBoB,EAIpB;AAAA,IAAA,IAAA,EAAA,SAAA;AAAiF,IAAA,UAAjF,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAiC,MAAA,IAAjC,EAAuC,CAAvC,gBAAuC;AAAvC,KAAA;AAAA,GAJoB,EAtBpB;AAAA,IAAA,IAAA,EAAA;AAAA,GAsBoB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMpB,C;AAAA;;;;;;;IACK,W;AAAoB;;;;;;AAKH,uBAAA,KAAA,EAAA,YAAA,EAAA,YAAA,EAAA,kBAAA,EAAA;AAAA;;AAAA;;AAEZ,SAAA,YAAA,GAAA,YAAA;AA2NV,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,kBAAA,GAAA,kBAAA;AAAC;;;;;;AAKkB,SAAA,oBAAA,GAAA,KAAA;AAGnB;;;;AAIA,SAAA,SAAA,GAAA,OAAA;AAAkC;;;;AAEd,SAAA,cAAA,GAAA,IAAA,YAAA,EAAA;AAKpB;;;;;AACwC,SAAA,YAAA,GAAA,IAAA,YAAA,EAAA;AAElB;;;;;AAKlB,SAAA,aAAA,GAAA,IAAA,YAAA,EAAA;AACY;;;;AAKd,SAAA,cAAA,GAAA,IAAA,YAAA,EAAA;AACgC;;;;AAMrB,SAAA,YAAA,GAAA,IAAA,OAAA,EAAA;;AAA2C,QAAA,CAAA,KAAA,YAAA,EAAA;AA3CxD,YAAA,0BAAA,CAAA,aAAA,CAAA;AAOA;;AACA,QAAM,CAAN,KAAA,YAAA,EAAA;AACA,YAAA,0BAAA,CAAA,kBAAA,CAAA;AAEA;;AACA,SAAA,YAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,YAAA;AACA,MAAA,kBAAA,CAAA,YAAA;;AAEQ,MAAA,MAAR,CAAA,YAAQ,CAAR,IAAQ;AACR,KAJA,CAAA;AAKA;AAAC;;;;;;;;;AAzBA;;;yCAAmC;AACX,WAAA,qBAAA,GAAA,IAAA,eAAA,CAAA,KAAA,eAAA,IAAA,iBAAA,CAAA;AA4BzB,WAAA,UAAA,GAAA,KAAA,OAAA,IAAA,KAAA,YAAA,CAAA,KAAA,EAAA,CA7BoC,CA6BnC;;AAEG,WAAJ,YAAI,GAAJ,KAAA,SAAI;AAEJ;AAAC;;;;;;yCAAmC;AAA2B,UAAA,KAAA,oBAAA,EAAA;AAI/D,aAAA,oBAAA,GAAA,KAAA;AACQ,aAAR,eAAQ;AACR;AACA;AAAC;;;;;;kCAED;AAEe,WAAA,YAAA,CAAA,WAAA;;AAAf,WAAA,YAAA,CAAA,QAAA;AACA;AAAC;;;;;;;gCACwB,O,EAAA;AAGZ;AAAb,UAAA,MAAA,GAAoC,OAApC,CAAA,SAAA,CAAoC,IAApC,OAAA,CAAA,SAAA,CAAoC,IAApC,OAAA,CAAA,YAAA,CAAA;;AAAC,UAAA,MAAA,IAAA,CAAA,MAAA,CAAA,WAAA,EAAA;AACK;AAGE,YAAM,IAAI,GAAlB,KAAA,wBAAA,EAAQ;;AAAP,YAAA,IAAA,EAAA;AAAwB;AAIT;AAAhB,eAAA,kBAAA,CAAA,aAAA;;AACQ,UAAA,IAAR,CAAA,KAAQ;AACR;AACA;;AACA,WAAA,YAAA,CAAA,IAAA;AACA;AAAC;;;;;;sCAE4B;AAGX,WAAA,wBAAA,GAAA,gBAAA;AAAlB;AAAC;;;;;;;uCAIe;AAAyB;AACzC,UAAA,IAAA,GAAA,KAAA,WAAA,IAAA,OAAA,GAAA,KAAA,SAAA,GAAG,KAAA,WAAA,IAAA,MAAA,GAAA,KAAA,QAAA,GAAA,KAAA,aAAH;AACA,MAAA,IAAQ,CAAR,kBAAA;AACA;AAAC;;;;;;;;kCAE2B,I,EAAA;AAGV,UAAA,CAAA,KAAA,YAAA,CAAA,QAAA,CAAA,IAAA,EAAA,KAAA,QAAA,CAAA,EAAA;AAClB,aAAA,cAAA,CAAA,IAAA,CAAA,IAAA;AACA;AACA;AAAC;;;;;;;;iDAKiB,c,EAAA;AACD,WAAA,YAAA,CAAA,IAAA,CAAA,cAAA;AADjB;AAAC;;;;;;;;6CAIiB,e,EAAA;AACH,WAAA,aAAA,CAAA,IAAA,CAAA,eAAA;AAAf;AAAC;;;;;;oCAAmC;AAC3B,WAAA,cAAA,CAAA,IAAA;AAGT;AAAC;;;;;;;;;oCAKgB,I,EAAA,I,EAAA;AAAkC,WAAA,UAAA,GAAA,IAAA;AAAnD,WAAA,WAAA,GAAA,IAAA;AACA;AAAC;;;;;;;;wCAM+D,G,EAAA;AAE/D,aAAA,KAAA,YAAA,CAAA,cAAA,CAAA,GAAA,KAAA,KAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,GAAA,GAAA,GAAA,IAAA;AAAD;AAAC;;;;;;;;+CACoF;AAGvE,aAAA,KAAA,SAAA,IAAA,KAAA,QAAA,IAAA,KAAA,aAAA;AACd;;;wBArF8C;AAAA,aAAA,KAAA,QAAA;AAAA;AAA4C;;;;;sBACtC,K,EAAA;AAEzC,WAAA,QAAA,GAAA,KAAA,mBAAA,CAAA,KAAA,YAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA;AAlHX;AAAC;;;;;;;wBACsC;AAAA,aAAA,KAAA,SAAA;AAAA;AACtC;;;;;sBAGwB,K,EAAA;AAA0B,WAAA,SAAA,GAAA,KAAA,mBAAA,CAAA,KAAA,YAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA;AAMnD;AAAC;;;;;;;wBACqC;AAAA,aAAA,KAAA,QAAA;AAAA;AAA4C;;;;;sBAI9D,K,EAAA;AACb,WAAA,QAAA,GAAA,KAAA,mBAAA,CAAA,KAAA,YAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA;AAEP;AAAC;;;;;;;wBACsC;AAAA,aAAA,KAAA,QAAA;AAAA;AAA4C;;;;;sBAI5D,K,EAAA;AACb,WAAA,QAAA,GAAA,KAAA,mBAAA,CAAA,KAAA,YAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA;AAEV;AAAC;;;;;;;;wBAK2B;AAAA,aAAA,KAAA,kBAAA;AAAA;AACJ;;;;;sBAEa,K,EAAA;AAA4B,WAAA,kBAAA,GAAA,KAAA,YAAA,CAAA,SAAA,CAAA,KAAA,EAAA,KAAA,OAAA,EAAA,KAAA,OAAA,CAAA;AAmCjE,WAAA,YAAA,CAAA,IAAA;;AACI,WAAK,kBAAL,CAAJ,YAAI;AACJ;AAAC;;;;;;;wBAGG;AAAA,aAAA,KAAA,YAAA;AAAA;AAEkB;;;;;sBACW,K,EAAA;AAA6B,WAAA,YAAA,GAAA,KAAA;AAC9D,WAAA,oBAAA,GAAA,IAAA;;AACI,WAAJ,kBAAI,CAAJ,YAAI;AACJ;;;;;;AAqHA,WAAA,CAAA,IAAA,GAAA,SAAA,mBAAA,CAAA,CAAA,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,WAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,iBAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,gBAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBArOA,c;AAAA,IAAA,aAAA,EAAA,e;AAAA,IAAA,cAAA,EAAA;;AAAA,EAAA,QAAA,EAAA,CAAA,aAAA,C;AAAA,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,oBAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,wBAAA,EAAA,EAAA,EAAA,UAAA,EAAA,IAAA,EAAA,CAAA,EAAA,sBAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,CAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,SAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,cAAA,CAAA,EAAA,CAAA,CAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,cAAA,CAAA,EAAA,CAAA,CAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,CAAA,EAAA,cAAA,CAAA,EAAA,CAAA,CAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,SAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,gBAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,gBAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,oBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;uEAAA,e,EAAA,C;AACA,MAAA,MAAA,CAAA,UAAA,CAAA,CAAA,EACA,0CADA,EAEA,CAFA,EAEA,CAFA,EAEA,qBAFA,EAGA,CAHA;AAGA,MAAA,MAAA,CAAA,YAAA;AACA;;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AAAA,MAAA,MAAA,CAAA,UAAA,CACA,iBADA,EACA,GAAA,CAAA,qBADA;AACA,MAAA,MAAA,CACA,SADA,CAEA,CAFA;;;;;;;;;;;;;mBAEA;;AAAC;;AAED,WAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CACA;AAAA,IAAA,IAAA,EAAA;AAAA,GADA,EACE;AAAA,IAAA,IAAA,EAAA,WAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GADF,EAE4D;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA,CAAA,gBAAA;AAAA,KAAA;AAAA,GAF5D,EAGkE;AAAA,IAAA,IAAA,EAAA;AAAA,GAHlE,CAAA;AAAA,CAAA;;AA/IA,WAAA,CAAA,cAAA,GAAA;AAiQA,EAAA,eAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAjQA;AAdA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAcA;AAdE,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAcF;AAZE,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAYF;AAmJA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAnJA;AAkKA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAlKA;AA0KA,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA1KA;AA6KA,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA7KA;AAqLA,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAQ,EAAR;AAAA,GAAA,CArLA;AA6LA,EAAA,YAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA7LA;AAqMA,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CArMA;AAwMA,EAAA,cAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAxMA;AA2MA,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAS,IAAA,IAAT,EAAA,CAAA,YAAA;AAAA,GAAA,CA3MA;AAiNA,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,IAAA,EAAA,CAAA,WAAA;AAAA,GAAA,CAjNA;AAuNA,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,IAAA,EAAA,CAAA,gBAAA;AAAA,GAAA;AAvNA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0NA,C;AAAE;;;;;AAGE;;;;;;;ACpOJ,IAAa,uBAAuB,GAGhC;AACJ;;;AACE,EAAA,cAAc,EAAE,OAAO,CAAC,gBAAD,EAAmB,CACxC,KAAK,CAAC,MAAD,EAAS,KAAK,CAAC;AAClB,IAAA,OAAO,EAAE,CADS;AAElB,IAAA,SAAS,EAAE;AAFO,GAAD,CAAd,CADmC,EAKxC,UAAU,CAAC,eAAD,EAAmB,OAAO,CAAC,kCAAD,EAAqC,KAAK,CAAC;AAC7E,IAAA,OAAO,EAAE,CADoE;AAE7E,IAAA,SAAS,EAAE;AAFkE,GAAD,CAA1C,CAA1B,CAL8B,EASxC,UAAU,CAAC,WAAD,EAAc,OAAO,CAAC,cAAD,EAAiB,KAAK,CAAC;AAAC,IAAA,OAAO,EAAE;AAAV,GAAD,CAAtB,CAArB,CAT8B,CAAnB,CAFrB;;AAaJ;;;AAEE,EAAA,cAAc,EAAE,OAAO,CAAC,gBAAD,EAAmB,CACxC,KAAK,CAAC,MAAD,EAAS,KAAK,CAAC;AAAC,IAAA,OAAO,EAAE;AAAV,GAAD,CAAd,CADmC,EAExC,KAAK,CAAC,OAAD,EAAU,KAAK,CAAC;AAAC,IAAA,OAAO,EAAE;AAAV,GAAD,CAAf,CAFmC,EAG5C;AAEG;AACC,EAAA,UAAU,CAAC,WAAD,EAAc,OAAO,CAAC,8CAAD,CAArB,CAN8B,CAAnB;AAfrB,CAHJ;AA2BC;;;;;AAA+I;;;;;ACQhJ,IAAI,aAAa,GAAjB,CAAA;AAAC;;;;;AAGD,IAAa,8BAA8B,GACvC,IAAI,cAAJ,CADJ,gCACI,CADJ;AAAC;;;;;;AAID,SAAgB,sCAAhB,CAAuD,OAAvD,EAAA;AACE,SAAO;AAAA,WAAM,OAAO,CAAC,gBAAR,CAAyB,UAAzB,EAAN;AAAA,GAAP;AACD;AACD;;;;;;AAEA,IAAa,+CAA+C,GAAG;AAC7D,EAAA,OAAO,EAAE,8BADoD;AAE7D,EAAA,IAAI,EAAE,CAAC,OAAD,CAFuD;AAG7D,EAAA,UAAU,EAAE;AAHiD,CAA/D,C,CAIC;;AAEwD;;;;IAEzD,wB;AAAE;;;AACF,kCAAqB,WAArB,EAAA;AAAA;;AAAA,OAAA,WAAA,GAAqB,WAArB;AAAiD,C;AAEjD;;;AAAA,IAAa,8BAA8B,GACvC,UAAU,CADd,wBACc,CADd;AAAC;;;;;;;;;;IA6BY,oB;;;;;AAAX;;;AAYF,gCAAc,UAAd,EAAA;AAAA;;AAAA,6BACU,UADV;AAEG;AACH;;;;;;;sCACA;AACI,WAAK,SAAL,CAAe,eAAf;AACD;;;;EAlBH,8B;;qCAnBA,4B,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,oBAAA,EAAA,MAAA,CAAA,iBAAA,CACY,MAAA,CAAA,UADZ,CAAA,CAAA;AACY,C;;;;;;;;;;;;;;;;;;;;;aAAZ,W,CAAA,8B,EACA,GAAA,CAAA,UAAA,CAAA,O;;;;;;;;;;;;;;AAAA,MAAA,MAAA,CAAA,UAAA,CACA,gBADA,EACA,SACA,oEADA,CAEA,MAFA,EAEA;AAAA,eAAA,GAAA,CAAA,UAAA,CAAA,MAAA,CACI,MADJ,CAAA;AACI,OAJJ,EAII,cAJJ,EAIA,SAAA,kEAAA,CAEA,MAFA,EAEA;AAAA,eAAA,GAAA,CAAA,UAAA,CACA,WADA,CACA,MADA,CAAA;AACA,OAPA,EAOA,eAPA,EAOA,SACA,mEADA,CAEA,MAFA,EAGA;AAAA,eAAA,GAAA,CAAA,UAAA,CAAA,YAAA,CAAA,MAAA,CAAA;AAAA,OAVA,EAWA,gBAXA,EAWA,SAAA,oEAAA,GACA;AAAA,eAAA,GAAA,CAAA,UAAA,CACA,KADA,EAAA;AACA,OAbA;AAaA,MAAA,MAAA,CAAA,YAAA;;;;;;;;;;;;;mBAEA;;AAAC;;AAAmB,oBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEsB;AAAA,IAAA,IAAA,EAAA;AAAA,GAFtB,CAAA;AAAA,CAAA;;AAhFpB,oBAAA,CAAA,cAAA,GAAA;AAAE,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,IAAA,EAAA,CAAA,WAAA;AAAA,GAAA;AAAF,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIK,C,KAwFL;AAMK;AAM+B;;AACzB;;;;;;IACT,a;AAAsB;;;;;;;;;;AAON,yBAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,YAAA,EAAA,IAAA,EAAA,SAAA,EAAA;AAAA;;AAGiB,SAAA,OAAA,GAAA,OAAA;AA2InC,SAAA,QAAA,GAAA,QAAA;AAAA,SAAA,OAAA,GAAsB,OAAtB;AACA,SAAA,iBAAA,GAAA,iBAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,IAAA,GAAA,IAAA;AAEA,SAAA,SAAA,GAAA,SAAA;AAAC;;;;AACe,SAAA,SAAA,GAAA,OAAA;AAAkC,SAAA,QAAA,GAAA,KAAA;AACzB;;;;;AAGpB,SAAA,YAAA,GAAA,IAAA,YAAA,EAAA;AAGF;;;;;AAOS,SAAA,aAAA,GAAA,IAAA,YAAA,EAAA;AAET;;;;AAKH,SAAA,YAAA,GAAA,IAAA,YAAA,EAAA;AACsB;;;;AAEgB,SAAA,YAAA,GAAA,IAAA,YAAA,EAAA;AACjB,SAAA,OAAA,GAAA,KAAA;AAIrB;;;;AACoB,SAAA,EAAA,4BAAA,aAAA,EAAA;AACc,SAAA,cAAA,GAAA,IAAA;AAGb;;;;AAEY,SAAA,yBAAA,GAAA,IAAA;AAIV;;;;AAEpB,SAAA,kBAAA,GAAA,YAAA,CAAA,KAAA;AACgD;;;;AAEd,SAAA,eAAA,GAAA,IAAA,OAAA,EAAA;AACpC;;;;AAGgB,SAAA,gBAAA,GAAA,IAAA,OAAA,EAAA;;AAA+C,QAAA,CAAA,KAAA,YAAA,EAAA;AAzDhE,YAAA,0BAAA,CAAA,aAAA,CAAA;AAUA;;AACA,SAAA,eAAA,GAAA,cAAA;AACA;AAAC;;;;;;;;;AAzCA;;;kCAAmC;AAC/B,WAAA,KAAA;;AA6CL,WAAA,kBAAA,CAAA,WAAA;;AACI,WAAJ,eAAI,CAAJ,QAAI;;AACA,UAAJ,KAAA,SAAI,EAAJ;AACA,aAAA,SAAA,CAAA,OAAA;;AAEQ,aAAR,kBAAQ,GAAR,IAAQ;AACR;AACA;AAAC;;;;;;;;2BAKO,I,EAAA;AACP;AADD,UAAA,QAAA,GAAA,KAAA,SAAA;AAAC,WAAA,SAAA,GAAA,IAAA;;AACD,UAAQ,CAAR,KAAA,YAAA,CAAA,QAAA,CAAA,QAAA,EAAA,KAAA,SAAA,CAAA,EAAA;AACA,aAAA,gBAAA,CAAA,IAAA,CAAA,IAAA;AACA;AACA;AAAC;;;;;;;;gCAKe,c,EAAA;AACP,WAAA,YAAA,CAAA,IAAA,CAAA,cAAA;AADT;AAAC;;;;;;;;iCAIoB,e,EAAA;AACP,WAAA,aAAA,CAAA,IAAA,CAAA,eAAA;AAAd;AAAC;;;;;;;;mCAMgB,K,EAAA;AAAA;;AAA4B,UAAA,KAAA,gBAAA,EAAA;AAE7C,cAAgB,KAAhB,CAAA,6DAAA,CAAA;AACA;;AACA,WAAA,gBAAA,GAAA,KAAA;AACA,WAAA,kBAAA,GACA,KAAA,gBAAA,CAAA,YAAA,CAAA,SAAA,CAAA,UAAA,KAAA;AAAA,eAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AAAA,OAAA,CADA;AAEA;AAAC;;;;;;;2BAC+B;AAAa,UAAA,KAAA,OAAA,IAAA,KAAA,QAAA,EAAA;AAI7C;AACA;;AACA,UAAM,CAAN,KAAA,gBAAA,EAAA;AACA,cAAA,KAAA,CAAA,8DAAA,CAAA;AACA;;AACA,UAAA,KAAA,SAAA,EAAA;AACA,aAAA,yBAAA,GAAA,KAAA,SAAA,CAAA,aAAA;AACA;;AACA,WAAA,OAAA,GAAA,KAAA,aAAA,EAAA,GAAA,KAAA,YAAA,EAAA;AACA,WAAA,OAAA,GAAA,IAAA;AAEI,WAAJ,YAAI,CAAJ,IAAI;AACJ;AAAC;;;;;;;4BAIE;AAAA;;AAAc,UAAA,CAAA,KAAA,OAAA,EAAA;AACjB;AACA;;AACA,UAAA,KAAA,SAAA,IAAA,KAAA,SAAA,CAAA,WAAA,EAAA,EAAA;AACA,aAAA,SAAA,CAAA,MAAA;AACA;;AACA,UAAM,KAAK,UAAX,EAAA;AACA,aAAA,UAAA,CAAA,KAAA;;AACQ,aAAK,UAAL,GAAR,IAAQ;AACR;;AACA,UAAM,KAAN,eAAM,IAAN,KAAA,eAAA,CAAA,UAAA,EAAA;AACA,aAAA,eAAA,CAAA,MAAA;AACA;AAAC;;;AAED,UAAA,aAAA,GAAA,SAAA,aAAA,GAAA;AAAE;AAGmB;AAAf,YAAN,MAAA,CAAA,OAAM,EAAN;AACA,UAAA,MAAA,CAAA,OAAA,GAAA,KAAA;;AACU,UAAA,MAAI,CAAd,YAAU,CAAV,IAAU;;AACF,UAAA,MAAI,CAAZ,yBAAQ,GAAR,IAAQ;AACR;AACA,OARA;;AASA,UAAA,KAAA,yBAAA,IACA,OAAA,KAAA,yBAAA,CAAA,KAAA,KAAA,UADA,EACA;AAAE;AAGqD;AACoC;AACK;AAE9F;AAAF,aAAA,yBAAA,CAAA,KAAA;;AACM,QAAA,UAAN,CAAA,aAAA,CAAM;AACN,OAVA,MAWA;AACA,QAAA,aAAA;AAAA;AACA;AAAC;;;;;;;;oCAKe;AAAA;;AACZ;AACI;AACI;AACI;AADZ,UAAJ,KAAA,UAAI,EAAJ;AACA,aAAA,UAAA,CAAA,KAAA;AACA;;AACA,WAAA,UAAA,GAAA,KAAA,OAAA,CAAA,IAAA,CAAA,oBAAA,EAAA;AACA,QAAA,SAAA,EAAA,KAAA,IAAA,GAAA,KAAA,IAAA,CAAA,KAAA,GAAA,KADA;AAGQ,QAAA,gBAAR,EAAA,KAAA,iBAHA;AAIM,QAAA,UAAN,EAAA;AAJA,OAAA,CAAA;;AAMA,WAAA,UAAA,CAAA,WAAA,GAAA,SAAA,CAAA;AAAA,eAAA,MAAA,CAAA,KAAA,EAAA;AAAA,OAAA;;AACA,WAAA,UAAA,CAAA,iBAAA,CAAA,UAAA,GAAA,IAAA;;AAEI,WAAJ,SAAI;AACJ;AAAC;;;;;;;;mCAII;AAAA;;AAAqB,UAAA,CAAA,KAAA,eAAA,EAAA;AAC1B,aAAA,eAAA,GAAA,IAAA,eAAA,CAAA,oBAAA,EAAA,KAAA,iBAAA,CAAA;AACA;;AACA,UAAM,CAAN,KAAA,SAAA,EAAA;AAEA,aAAA,YAAA;AAEA;;AACA,UAAM,CAAN,KAAA,SAAA,CAAA,WAAA,EAAA,EAAA;AACA,aAAA,kBAAA,GAAA,KAAA,SAAA,CAAA,MAAA,CAAA,KAAA,eAAA,CAAA;AAEA,aAAA,kBAAA,CAAA,QAAA,CAAA,UAAA,GAAA,IAAA;;AACM,aAAN,SAAM,GAJN,CAIC;;;AAEK,aAAN,OAAM,CAAN,QAAM,CAAN,YAAM,GAAN,IAAM,CAAN,IAAA,CAAA,CAAA,CAAM,EAAN,SAAM,CAAN,YAAA;AAEA,UAAA,MAAA,CAAA,SAAA,CAAA,cAAA;AACA,SAHM;AAIN;AACA;AAAC;;;;;;;;mCAK4B;AAAA;;AACZ;AADjB,UAAA,aAAA,GAAA,IAAA,aAAA,CAAA;AAAE,QAAA,gBAAA,EAAA,KAAA,4BAAA,EAAF;AACA,QAAA,WAAA,EAAA,IADA;AAEM,QAAA,aAAN,EAAA,kCAFA;AAGM,QAAA,SAAN,EAAA,KAAA,IAHA;AAIM,QAAA,cAAN,EAAA,KAAA,eAAA,EAJA;AAKM,QAAA,UAAN,EAAA;AALA,OAAA,CAAA;AAOA,WAAA,SAAA,GAAA,KAAA,QAAA,CAAA,MAAA,CAAA,aAAA,CAAA;;AACA,WAAA,SAAA,CAAA,cAAA,CAAA,YAAA,CAAA,MAAA,EAAA,QAAA;;AAEI,MAAA,KAAK,CAAT,KAAA,SAAA,CAAA,aAAA,EAAS,EAAT,KAAA,SAAA,CAAA,WAAA,EAAS,EAAT,KAAA,SAAA,CAAA,aAAA,GAAA,IAAA,CAAA,MAAA,CAAA,UAAA,KAAA,EAAA;AAAE;AAGF,eACW,KADX,CAAA,OACW,KADX,MACW,IAGX,MAAA,CAAA,gBAAA,IAAA,KAAA,CAAA,MAAA,IAAA,KAAA,CAAA,OAAA,KAAA,QAJA;AAKA,OARA,CAAA,CAAS,CAAL,CAQJ,SARI,CAQJ;AAAA,eAAA,MAAA,CAAA,KAAA,EAAA;AAAA,OARI;AASJ;AAAC;;;;;;;;mDACO;AAC2B,aAAA,KAAA,QAAA,CAAA,QAAA,GAInC,mBAJmC,CAInC,KAAA,gBAAA,CAAA,yBAAA,EAJmC,EAKnC,qBALmC,CAKnC,yBALmC,EAMnC,sBANmC,CAMnC,KANmC,EAOnC,kBAPmC,CAOnC,CAPmC,EAQnC,kBARmC,GASnC,aATmC,CASnC,CACA;AACA,QAAA,OAAA,EAAA,OADA;AAEA,QAAA,OAAA,EAAA,QAFA;AAGU,QAAA,QAAV,EAAA,OAHA;AAIU,QAAA,QAAV,EAAA;AAJA,OADA,EAOA;AACA,QAAA,OAAA,EAAA,OADA;AAEA,QAAA,OAAA,EAAA,KAFA;AAGU,QAAA,QAAV,EAAA,OAHA;AAIU,QAAA,QAAV,EAAA;AAJA,OAPA,EAaA;AACA,QAAA,OAAA,EAAA,KADA;AAEA,QAAA,OAAA,EAAA,QAFA;AAGU,QAAA,QAAV,EAAA,KAHA;AAIU,QAAA,QAAV,EAAA;AAJA,OAbA,EAmBA;AACA,QAAA,OAAA,EAAA,KADA;AAEA,QAAA,OAAA,EAAA,KAFA;AAGU,QAAA,QAAV,EAAA,KAHA;AAIU,QAAA,QAAV,EAAA;AAJA,OAnBA,CATmC,CAAA;AAmCnC;AAAC;;;;;;;;wCAQM,G,EAAA;AAA+B,aAAA,KAAA,YAAA,CAAA,cAAA,CAAA,GAAA,KAAA,KAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,GAAA,GAAA,GAAA,IAAA;AAAtC;AAAC;;;;;;;;gCACoE;AAAkB;AAIvF,UAAA,KAAA,GAAA,KAAA,KAAA;;AAAC,UAAA,KAAA,kBAAA,EAAA;AACD,aAAA,kBAAA,CAAA,QAAA,CAAA,KAAA,GAAA,KAAA;AACA;;AACA,UAAM,KAAN,UAAA,EAAA;AACA,aAAA,UAAA,CAAA,iBAAA,CAAA,KAAA,GAAA,KAAA;AACA;AACA;;;wBA3Nc;AACE;AAIL;AAvJP,aAAJ,KAAA,QAAA,KAAA,KAAA,gBAAA,GAAA,KAAA,gBAAA,CAAA,KAAA,GAAA,IAAA,CAAI;AACJ;AAAC;;;;;sBACiC,K,EAAA;AAAyB,WAAA,QAAA,GAAA,KAAA,mBAAA,CAAA,KAAA,YAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA;AAE3D;AAAC;;;;;;;wBAC4D;AAAkB,aAAA,KAAA,MAAA,KAQ/E,KAAA,gBAAA,GAAA,KAAA,gBAAA,CAAA,gBAAA,EAAA,GAAA,SAR+E,CAAA;AAU/E;AAAC;;;;;sBACiC,K,EAAA;AAAuB,WAAA,MAAA,GAAA,KAAA;AAEzD;AAAC;;;;;;;;wBAO4B;AAAA,aAAA,KAAA,QAAA;AAAA;AAA4C;;;;;sBAG1C,K,EAAA;AAC1B,WAAA,QAAA,GAAA,qBAAA,CAAA,KAAA,CAAA;AAAL;AAAC;;;;;;;wBAGM;AACP,aAAA,KAAA,SAAA,KAAA,SAAA,IAAA,KAAA,gBAAA,GAEA,KAAA,gBAAA,CAAA,QAFA,GAEA,CAAA,CAAA,KAAA,SAFA;AAIA;AAAC;;;;;sBAA2D,K,EAAA;AACzC;AAEb,UAAN,QAA6B,GAA7B,qBAAA,CAAA,KAAA,CAAM;;AAAL,UAAA,QAAA,KAAA,KAAA,SAAA,EAAA;AACD,aAAA,SAAA,GAAA,QAAA;;AAEA,aAAA,eAAA,CAAA,IAAA,CAAA,QAAA;AACA;AACA;AAAC;;;;;;;wBAGmB;AAAA,aAAA,KAAA,OAAA;AAAA;AAGK;;;;;sBACe,K,EAAA;AAAA,MAAA,KAAA,GAAA,KAAA,IAAA,EAAA,GAAA,KAAA,KAAA,EAAA;AAAA;AAEC;;;;;;;wBAGZ;AAAA,aAAA,KAAA,cAAA;AAAA;AACY;;;;;sBAEF,K,EAAA;AAAA,WAAA,cAAA,GAAA,KAAA;AAAA;AAEpB;;;;;;;wBAAuE;AAC1E,aAAA,KAAA,gBAAA,IAAA,KAAA,gBAAA,CAAA,GAAA;AA2BhB;AAAC;;;;;;;wBAC0C;AAC1C,aAAA,KAAA,gBAAA,IAAA,KAAA,gBAAA,CAAA,GAAA;AAGD;AAAC;;;;;;wBACM;AAAwB,aAAA,KAAA,gBAAA,IAAA,KAAA,gBAAA,CAAA,WAAA;AAG/B;;;;;;AA4QA,aAAA,CAAA,IAAA,GAAA,SAAA,qBAAA,CAAA,CAAA,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,aAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,SAAA,CAAA,EAhYA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,OAAA,CAgYA,EAhYA,MACE,CAAF,iBADA,CACmB,MAAA,CAAA,MADnB,CAgYA,EA/XA,MAAA,CAAA,iBAAA,CAAA,MACE,CAAF,gBADA,CA+XA,EA9XA,MAAA,CAAA,iBAAA,CAAA,8BAAA,CA8XA,EA5XA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,CA4XA,EA5XA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,cAAA,EAAA,CAAA,CA4XA,EA5XA,MAAA,CAAA,iBAAA,CAAA,QAAA,EAAA,CAAA,CA4XA,CAAA;AA5XA,CA4XA;;;;;;;;;;;;;;;;;;;;;;;;;;;mBA5XA;;AAAC;;AAED,aAAA,CAAA,cAAA,GAAiB;AAAA,SAAjB,CACA;AAAA,IAAA,IAAA,EAAA;AAAA,GADA,EACE;AAAA,IAAA,IAAA,EAAA;AAAA,GADF,EAEsB;AAAA,IAAA,IAAA,EAAA;AAAA,GAFtB,EAE4C;AAAA,IAAA,IAAA,EAAA;AAAA,GAF5C,EA9FA;AAAA,IAAA,IAAA,EAAQ,SAAR;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA,CAAA,8BAAA;AAAA,KAAA;AAAA,GA8FA,EA/HA;AAAA,IAAA,IAAA,EAAA,WAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GA+HA,EA7GA;AAAA,IAAA,IAAA,EAAA,cAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GA6GA,EAxGA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA,CAAA,QAAA;AAAA,KAAA;AAAA,GAwGA,CAAiB;AAAA,CAAjB;;AAlGA,aAAA,CAAA,cAAA,GAAA;AAjCA,EAAA,uBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAiCA;AAsPA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAtPA;AAsPE,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAtPF;AAsPoC,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAtPpC;AAwGA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAxGA;AA2GA,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA3GA;AAuHA,EAAA,YAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAvHA;AA0HA,EAAA,aAAA,EAAA,CAAG;AAAH,IAAA,IAAA,EAAA;AAAG,GAAH,CA1HA;AAwIA,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAxIA;AAgJA,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAhJA;AAmKA,EAAA,YAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAG,MAAH;AAAA,IAAA,IAAA,EAAA,CAAA,QAAA;AAAA,GAAA,CAnKA;AAyKA,EAAA,YAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,IAAA,EAAA,CAAA,QAAA;AAAA,GAAA,CAzKA;AA4KA,EAAA,MAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA;AA5KA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA,C;AAAE;;;;;AAG4B;;;;;;ACpL9B,IAAa,6BAA6B,GAAQ;AAChD,EAAA,OAAO,EAAE,iBADuC;AAEhD,EAAA,WAAW,EAAE,UAAU,CAAC;AAAA,WAAM,kBAAN;AAAA,GAAD,CAFyB;AAGhD,EAAA,KAAK,EAAE;AAHyC,CAAlD;AAIC;;;;;AAGD,IAAa,yBAAyB,GAAQ;AAC5C,EAAA,OAAO,EAAE,aADmC;AAE5C,EAAA,WAAW,EAAE,UAAU,CAAC;AAAA,WAAM,kBAAN;AAAA,GAAD,CAFqB;AAG5C,EAAA,KAAK,EAAE;AAHqC,CAA9C;AAIC;;;;;;;IAQD,uB;AAAE;;;;AAIF,iCAEW,MAFX,EAIW,aAJX,EAAA;AAAA;;AAEA,OAAA,MAAA,GAAW,MAAX;AAEA,OAAA,aAAA,GAAW,aAAX;AACI,OAAK,KAAL,GAAa,KAAK,MAAL,CAAY,KAAzB;AACD,C;AAEH;;;;;;IAuBA,kB;AAAE;;;;;;AAoJF,8BACc,WADd,EAEyB,YAFzB,EAGoD,YAHpD,EAI0B,UAJ1B,EAAA;AAAA;;AAAA;;AACA,SAAA,WAAA,GAAc,WAAd;AACA,SAAA,YAAA,GAAyB,YAAzB;AACA,SAAA,YAAA,GAAoD,YAApD;AACA,SAAA,UAAA,GAA0B,UAA1B;AAAmD;;;;AAhEnD,SAAA,UAAA,GACM,IAAI,YAAJ,EADN;AAEA;;;;AAEA,SAAA,SAAA,GACM,IAAI,YAAJ,EADN;AAEA;;;;AAEA,SAAA,YAAA,GAAiB,IAAI,YAAJ,EAAjB;AACA;;;;AAEA,SAAA,eAAA,GAAoB,IAAI,YAAJ,EAApB;;AAEA,SAAA,UAAA,GAAe,YAAf,CAAuB,CAAvB;;AAEA,SAAA,YAAA,GAA+C,YAA/C,CAAuD,CAAvD;;AAEA,SAAA,kBAAA,GAA+B,YAA/B,CAAuC,CAAvC;;AAEA,SAAA,uBAAA,GAAoC,YAAY,CAAC,KAAjD;AAEA,SAAA,mBAAA,GAAgC,YAAY,CAAC,KAA7C;AACA;;;;AAEA,SAAA,eAAA,GAAyC,YAAzC;AACI,aAAO,OAAI,CAAC,eAAL,GACH,IADG,GACI;AAAC,8BAAsB;AAAC,kBAAQ,OAAI,CAAC,WAAL,CAAiB,aAAjB,CAA+B;AAAxC;AAAvB,OADX;AAED,KAHH;AAIA;;;;;AAEA,SAAA,aAAA,GAAuC,UAAC,OAAD,EAAvC;AAAE;AACF,UAAU,YAAY,GAAG,OAAI,CAAC,mBAAL,CAAyB,OAAI,CAAC,YAAL,CAAkB,WAAlB,CAA8B,OAAO,CAAvF,KAAkD,CAAzB,CAAzB;;AACI,aAAQ,CAAC,OAAI,CAAC,GAAN,IAAa,CAAC,YAAd,IACJ,OAAI,CAAC,YAAL,CAAkB,WAAlB,CAA8B,OAAI,CAAC,GAAnC,EAAwC,YAAxC,KAAyD,CADtD,GAEH,IAFG,GAEI;AAAC,4BAAoB;AAAC,iBAAO,OAAI,CAAC,GAAb;AAAkB,oBAAU;AAA5B;AAArB,OAFX;AAGD,KALH;AAMA;;;;;AAEA,SAAA,aAAA,GAAuC,UAAC,OAAD,EAAvC;AAAE;AACF,UAAU,YAAY,GAAG,OAAI,CAAC,mBAAL,CAAyB,OAAI,CAAC,YAAL,CAAkB,WAAlB,CAA8B,OAAO,CAAvF,KAAkD,CAAzB,CAAzB;;AACI,aAAQ,CAAC,OAAI,CAAC,GAAN,IAAa,CAAC,YAAd,IACJ,OAAI,CAAC,YAAL,CAAkB,WAAlB,CAA8B,OAAI,CAAC,GAAnC,EAAwC,YAAxC,KAAyD,CADtD,GAEH,IAFG,GAEI;AAAC,4BAAoB;AAAC,iBAAO,OAAI,CAAC,GAAb;AAAkB,oBAAU;AAA5B;AAArB,OAFX;AAGD,KALH;AAMA;;;;;AAEA,SAAA,gBAAA,GAA0C,UAAC,OAAD,EAA1C;AAAE;AACF,UAAU,YAAY,GAAG,OAAI,CAAC,mBAAL,CAAyB,OAAI,CAAC,YAAL,CAAkB,WAAlB,CAA8B,OAAO,CAAvF,KAAkD,CAAzB,CAAzB;;AACI,aAAO,CAAC,OAAI,CAAC,WAAN,IAAqB,CAAC,YAAtB,IAAsC,OAAI,CAAC,WAAL,CAAiB,YAAjB,CAAtC,GACH,IADG,GACI;AAAC,+BAAuB;AAAxB,OADX;AAED,KAJH;AAKA;;;;;AAEA,SAAA,UAAA,GACM,UAAU,CAAC,OAAX,CACI,CAAC,KAAK,eAAN,EAAuB,KAAK,aAA5B,EAA2C,KAAK,aAAhD,EAA+D,KAAK,gBAApE,CADJ,CADN;AAGA;;;;AAEA,SAAA,eAAA,GAA4B,KAA5B;;AAOI,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,YAAM,0BAA0B,CAAC,aAAD,CAAhC;AACD;;AACD,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,YAAM,0BAA0B,CAAC,kBAAD,CAAhC;AACD,KAVL,CAWA;;;AAEI,SAAK,mBAAL,GAA2B,YAAY,CAAC,aAAb,CAA2B,SAA3B,CAAqC,YAApE;AACM,MAAA,OAAI,CAAC,KAAL,GAAa,OAAI,CAAC,KAAlB;AACD,KAF0B,CAA3B;AAGD;AACH;;;;;;;;;;AAhFA;;;kCAiFA;AACI,WAAK,uBAAL,CAA6B,WAA7B;;AACA,WAAK,mBAAL,CAAyB,WAAzB;;AACA,WAAK,YAAL,CAAkB,QAAlB;;AACA,WAAK,eAAL,CAAqB,QAArB;AACD;AACH;;;;;;;;8CAE4B,E,EAA5B;AACI,WAAK,kBAAL,GAA0B,EAA1B;AACD;AACH;;;;;;;;6BAEW,C,EAAX;AACI,aAAO,KAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,CAAhB,CAAlB,GAAuC,IAA9C;AACD;AACH;;;;;;;;mDAKA;AACI,aAAO,KAAK,yBAAL,EAAP;AACD;AACH;;;;;;;gDAKA;AACI,aAAO,KAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,yBAAhB,EAAlB,GAAgE,KAAK,WAA5E;AACD,K,CACH;;AAEC;;;;;;;+BAAY,K,EAAb;AACI,WAAK,KAAL,GAAa,KAAb;AACD,K,CACH;;AAEC;;;;;;;qCAAkB,E,EAAnB;AACI,WAAK,YAAL,GAAoB,EAApB;AACD,K,CACH;;AAEC;;;;;;;sCAAmB,E,EAApB;AACI,WAAK,UAAL,GAAkB,EAAlB;AACD,K,CACH;;AAEC;;;;;;;qCAAkB,U,EAAnB;AACI,WAAK,QAAL,GAAgB,UAAhB;AACD;AACH;;;;;;;+BACa,K,EAAb;AAAE;AACF,UAAU,cAAc,GAAG,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,OAAN,KAA3C,UAAA;;AAEI,UAAI,KAAK,WAAL,IAAoB,cAApB,IAAsC,CAAC,KAAK,WAAL,CAAiB,aAAjB,CAA+B,QAA1E,EAAoF;AAClF,aAAK,WAAL,CAAiB,IAAjB;;AACA,QAAA,KAAK,CAAC,cAAN;AACD;AACF;AACH;;;;;;;6BACW,K,EAAX;AAAE;AACF,UAAQ,IAAI,GAAG,KAAK,YAAL,CAAkB,KAAlB,CAAwB,KAAxB,EAA+B,KAAK,YAAL,CAAkB,KAAlB,CAA9C,SAAe,CAAf;;AACI,WAAK,eAAL,GAAuB,CAAC,IAAD,IAAS,KAAK,YAAL,CAAkB,OAAlB,CAA0B,IAA1B,CAAhC;AACA,MAAA,IAAI,GAAG,KAAK,mBAAL,CAAyB,IAAzB,CAAP;;AAEA,UAAI,CAAC,KAAK,YAAL,CAAkB,QAAlB,CAA2B,IAA3B,EAAiC,KAAK,MAAtC,CAAL,EAAoD;AAClD,aAAK,MAAL,GAAc,IAAd;;AACA,aAAK,YAAL,CAAkB,IAAlB;;AACA,aAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB;;AACA,aAAK,SAAL,CAAe,IAAf,CAAoB,IAAI,uBAAJ,CAA4B,IAA5B,EAAkC,KAAK,WAAL,CAAiB,aAAnD,CAApB;AACD,OALD,MAKO;AACL,aAAK,kBAAL;AACD;AACF;AACH;;;;;;gCACA;AACI,WAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,uBAAJ,CAA4B,IAA5B,EAAkC,KAAK,WAAL,CAAiB,aAAnD,CAArB;AACD;AACH;;;;;;;uCAEA;AACI,aAAO,KAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,KAAlC,GAA0C,SAAjD;AACD;AACH;;;;;;;8BAEA;AAAE;AAEE,UAAI,KAAK,KAAT,EAAgB;AACd,aAAK,YAAL,CAAkB,KAAK,KAAvB;AACD;;AAED,WAAK,UAAL;AACD;AACH;;;;;;;;;iCAEuB,K,EAAvB;AACI,WAAK,WAAL,CAAiB,aAAjB,CAA+B,KAA/B,GACI,KAAK,GAAG,KAAK,YAAL,CAAkB,MAAlB,CAAyB,KAAzB,EAAgC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,SAA1D,CAAH,GAA0E,EADnF;AAED;AACH;;;;;;;;wCAK8B,G,EAA9B;AACI,aAAQ,KAAK,YAAL,CAAkB,cAAlB,CAAiC,GAAjC,KAAyC,KAAK,YAAL,CAAkB,OAAlB,CAA0B,GAA1B,CAA1C,GAA4E,GAA5E,GAAkF,IAAzF;AACD;;;sBA/QiB,K,EADpB;AAAA;;AAEI,UAAI,CAAC,KAAL,EAAY;AACV;AACD;;AAED,WAAK,WAAL,GAAmB,KAAnB;;AACA,WAAK,WAAL,CAAiB,cAAjB,CAAgC,IAAhC;;AACA,WAAK,uBAAL,CAA6B,WAA7B;;AAEA,WAAK,uBAAL,GAA+B,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,SAAlC,CAA4C,UAAC,QAAD,EAA/E;AACM,QAAA,OAAI,CAAC,KAAL,GAAa,QAAb;;AACA,QAAA,OAAI,CAAC,YAAL,CAAkB,QAAlB;;AACA,QAAA,OAAI,CAAC,UAAL;;AACA,QAAA,OAAI,CAAC,SAAL,CAAe,IAAf,CAAoB,IAAI,uBAAJ,CAA4B,OAA5B,EAAkC,OAAI,CAAC,WAAL,CAAiB,aAAnD,CAApB;;AACA,QAAA,OAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,IAAI,uBAAJ,CAA4B,OAA5B,EAAkC,OAAI,CAAC,WAAL,CAAiB,aAAnD,CAArB;AACD,OAN8B,CAA/B;AAOD;AACH;;;;;;;;sBAI0B,K,EAD1B;AAEI,WAAK,WAAL,GAAmB,KAAnB;;AACA,WAAK,kBAAL;AACD;AACH;;;;;;;wBAGA;AAC0B,aAAO,KAAK,MAAZ;AAAqB;AAC/C;;;;;sBAAY,K,EAAZ;AACI,MAAA,KAAK,GAAG,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAR;AACA,WAAK,eAAL,GAAuB,CAAC,KAAD,IAAU,KAAK,YAAL,CAAkB,OAAlB,CAA0B,KAA1B,CAAjC;AACA,MAAA,KAAK,GAAG,KAAK,mBAAL,CAAyB,KAAzB,CAAR;AACJ;;AAAA,UAAU,OAAO,GAAG,KAApB,KAAA;AACI,WAAK,MAAL,GAAc,KAAd;;AACA,WAAK,YAAL,CAAkB,KAAlB;;AAEA,UAAI,CAAC,KAAK,YAAL,CAAkB,QAAlB,CAA2B,OAA3B,EAAoC,KAApC,CAAL,EAAiD;AAC/C,aAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAvB;AACD;AACF;AACH;;;;;;;wBAGA;AACwB,aAAO,KAAK,IAAZ;AAAmB;AAC3C;;;;;sBAAU,K,EAAV;AACI,WAAK,IAAL,GAAY,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAZ;;AACA,WAAK,kBAAL;AACD;AACH;;;;;;;wBAGA;AACwB,aAAO,KAAK,IAAZ;AAAmB;AAC3C;;;;;sBAAU,K,EAAV;AACI,WAAK,IAAL,GAAY,KAAK,mBAAL,CAAyB,KAAK,YAAL,CAAkB,WAAlB,CAA8B,KAA9B,CAAzB,CAAZ;;AACA,WAAK,kBAAL;AACD;AACH;;;;;;;wBAGA;AAC4B,aAAO,CAAC,CAAC,KAAK,SAAd;AAA0B;AACtD;;;;;sBAAe,K,EAAf;AAAE;AACF,UAAU,QAAQ,GAAG,qBAAqB,CAA1C,KAA0C,CAA1C;AAAC;;AACD,UAAU,OAAO,GAAG,KAAK,WAAL,CAApB,aAAA;;AAEI,UAAI,KAAK,SAAL,KAAmB,QAAvB,EAAiC;AAC/B,aAAK,SAAL,GAAiB,QAAjB;;AACA,aAAK,eAAL,CAAqB,IAArB,CAA0B,QAA1B;AACD,OAPL,CAQA;;;AAEI,UAAI,QAAQ,IAAI,OAAO,CAAC,IAAxB,EAA8B;AAClC;AACM;AACM;AACN,QAAA,OAAO,CAAC,IAAR;AACD;AACF;;;;;;mCAxGH,0B,CAAA,C,EAAW;AAAA,SAAA,KAAA,CAAA,IACT,kBADS,EACC,MAAA,CAAA,iBAAA,CAAsB,MAChC,CAAA,UADU,CADD,EAEE,MAAA,CAAA,iBAAA,CACT,MAAA,CAAA,WADS,EACoB,CADpB,CAFF,EAGsB,MAAA,CAAA,iBAAA,CAC7B,gBAD6B,EACJ,CADI,CAHtB,EAIkB,MAAA,CAAA,iBAAA,CACxB,MAAS,CAAA,YADe,EACf,CADe,CAJlB,CAAA;AAKG,C;;AAA0B,kBAAa,CAAA,IAAb,GAAa,MAAkB,CAAA,iBAAlB,CAAmB;AACrE,EAAA,IAAA,EAAA,kBADqE;AAEhE,EAAA,SAAA,EAAA,CAAA,CAAA,OAAA,EACJ,eADI,EACJ,EADI,CAAA,CAFgE;AAG5C,EAAA,QAAM,EAAA,CAHsC;AAGtC,EAAA,YAAA,EAC9B,SAAA,+BAAA,CAAoB,EAApB,EAAoB,GAApB,EAAoB;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AAAiD,MAAA,MAAA,CAAA,UAAA,CACrE,OADqE,EACrE,SAAc,2CAAd,CAAwD,MAAxD,EAAwD;AAAA,eACxD,GAAA,CAAA,QAAA,CAAc,MAAA,CAAA,MAAA,CAAA,KAAd,CADwD;AAC1C,OAFuD,EAEvD,QAFuD,EAEvD,SAA0C,4CAA1C,GACU;AAAA,eAAA,GAAA,CAAA,SAAA,EAAA;AACf,OAJ4D,EAI1D,MAJ0D,EAI1D,SAAA,0CAAA,GACX;AAAU,eAAE,GAAA,CAAA,OAAA,EAAF;AAAe,OAL4C,EAK5C,SAL4C,EAMrE,SAAQ,6CAAR,CACW,MADX,EACa;AAAA,eAAA,GAAA,CAAoB,UAApB,CAAoB,MAApB,CAAA;AACd,OARsE;;;UASvE,GAAA,C,EAAA;AAAU,MAAA,MAAA,CAAA,cAAA,CAAoB,UAApB,EACZ,GAAA,CAAA,QADY;;;GAb4D;;;;;;;;GAAA;;;;GAAA;kCAAA;;;;;AAAA,CAAnB,CAAb;AAetC;;AAAmB,kBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAjFrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAiFqB,EA9DrB;AAAA,IAAA,IAAA,EAAQ,WAAR;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GA8DqB,EAuJrB;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAmB,MAAnB;AAAA,MAAA,IAAA,EAAA,CAAA,gBAAA;AAAA,KAAA;AAAA,GAvJqB,EA7DrB;AAAA,IAAA,IAAA,EAAQ,YAAR;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GA6DqB,CAAA;AAAA,CAAA;;AA7DjB,kBAAA,CAAA,cAAA,GAAA;AA+DJ,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA/DI;AAoFJ,EAAA,mBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CApFI;AA4FJ,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA5FI;AA6GJ,EAAA,GAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA7GI;AAsHJ,EAAA,GAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAtHI;AA+HJ,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA/HI;AAqJJ,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CArJI;AAyJJ,EAAA,SAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA;AAzJI,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJD,C;AAAE;;;;;AAGa;;;;;IC1JlB,uB;;;;wCAHA,+B,CAAW,C,EAAA;AAAA,SAAA,KACT,CAAA,IAAA,uBADS,GAAA;AACC,C;;AACZ,uBAAA,CAAA,IAAA,GAAA,MAAA,CAAA,iBAAA,CAAA;AAAA,EAAA,IAAA,EAAA,uBAAA;AAAA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,EAAA,yBAAA,EAAA,EAAA,CAAA;AAAA,CAAA,CAAA;;;;;;;;;;AACC,C;AAAC;;;;;IAsBF,mB;AAAE;;;;;AAgCF,+BACW,KADX,EAEY,kBAFZ,EAG2B,eAH3B,EAAA;AAAA;;AACA,SAAA,KAAA,GAAW,KAAX;AACA,SAAA,kBAAA,GAAY,kBAAZ;AAjCA,SAAA,aAAA,GAA0B,YAAY,CAAC,KAAvC;AACA;;AAmCA,QAAU,cAAc,GAAG,MAAM,CAAjC,eAAiC,CAAjC;AACI,SAAK,QAAL,GAAiB,cAAc,IAAI,cAAc,KAAK,CAAtC,GAA2C,cAA3C,GAA4D,IAA5E;AACD;AACH;;;;;;;;;AAnBA;;;;gCAoBc,O,EAAd;AACI,UAAI,OAAO,CAAC,YAAD,CAAX,EAA2B;AACzB,aAAK,kBAAL;AACD;AACF;AACH;;;;;;kCACA;AACI,WAAK,aAAL,CAAmB,WAAnB;AACD;AACH;;;;;;yCACA;AACI,WAAK,kBAAL;AACD;AACH;;;;;;;0BACQ,K,EAAR;AACI,UAAI,KAAK,UAAL,IAAmB,CAAC,KAAK,QAA7B,EAAuC;AACrC,aAAK,UAAL,CAAgB,IAAhB;AACA,QAAA,KAAK,CAAC,eAAN;AACD;AACF;AACH;;;;;;;yCACA;AAAA;;AAAE;AACF,UAAU,kBAAkB,GAAG,KAAK,UAAL,GAAkB,KAAK,UAAL,CAAgB,eAAlC,GAAoDA,EAAnF,EAAA;AAAC;;AACD,UAAU,aAAa,GAAG,KAAK,UAAL,IAAmB,KAAK,UAAL,CAAgB,gBAAnC,GAClB,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,eADf,GACiCA,EAA3D,EADA;AACC;;AACD,UAAU,iBAAiB,GAAG,KAAK,UAAL,GACtB,KAAK,CAAC,KAAK,UAAL,CAAgB,YAAjB,EAA+B,KAAK,UAAL,CAAgB,YAA/C,CADiB,GAEtBA,EAAR,EAFA;;AAII,WAAK,aAAL,CAAmB,WAAnB;;AACA,WAAK,aAAL,GAAqB,KAAK,CACxB,KAAK,KAAL,CAAW,OADa,EAExB,kBAFwB,EAGxB,aAHwB,EAIxB,iBAJwB,CAAL,CAKnB,SALmB,CAKT;AAAA,eAAM,OAAI,CAAC,kBAAL,CAAwB,YAAxB,EAAN;AAAA,OALS,CAArB;AAMD;;;wBAnEH;AAEI,UAAI,KAAK,SAAL,KAAmB,SAAnB,IAAgC,KAAK,UAAzC,EAAqD;AACnD,eAAO,KAAK,UAAL,CAAgB,QAAvB;AACD;;AAED,aAAO,CAAC,CAAC,KAAK,SAAd;AACD;AACH;;;;;sBAAe,K,EAAf;AACI,WAAK,SAAL,GAAiB,qBAAqB,CAAC,KAAD,CAAtC;AACD;;;;;;oCAvCH,2B,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,mBAAA,EAAA,MAAA,CAAA,iBAAA,CACY,iBADZ,CAAA,EACY,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,iBAAA,CADZ,EACY,MAAA,CAAA,iBAAA,CAAA,UAAA,CADZ,CAAA;AACY,C;;;;;;;;;;;;;;;;;;aAAZ,W,CAAA,G,EAAA,I;AACE;;AAAA,QAAF,EAAA,GAAA,CAAE,EAAF;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,EAAA,CAAA,KAAA,EACA,YADA,C;AACA,IAAA,aACA,EAAA;;AAAA,EAAA,QAAA,EAAsC,CAAA,qBAAA,C;AAAA,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,oBAAA,C;AAAA,EAAA,kBAAA,EAAA,G;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,iBAAA,EAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,eAAA,EAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAAA,eAAA,EAAA,OAAA,CAAA,EAAA,CAAA,QAAA,EAAA,EAAA,CAAA,EAAA,CAAA,OAAA,EAAA,oCAAA,EAAA,SAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA,MAAA,EAAA,cAAA,EAKtC,WALsC,EAKtC,OALsC,EAKtC,CALsC,EAKtC,MALsC,CAAA,EAKtC,CAAA,SAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EACI,MADJ,EACA,MADA,EACA,cADA,EACA,WADA,EACA,OADA,EACA,CADA,EACA,oCADA,CALsC,EAOtC,CAAA,GAAA,EAAA,qIAAA,CAPsC,C;AAUtC,EAAA,QACE,EAAA,SAAF,4BAAE,CAAF,EAAE,EAAF,GAAE,EAAF;AAAA,QAAA,EAAA,GACA,CADA,EACA;AACA,MAAA,MAAA,CAAA,eAAA,CAAA,GAAA;;;;;;;;;;;;;;;;;;;;mBAAA;;AAAC;;AAAmB,mBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAET;AAAA,IAAA,IAAA,EAAA;AAAA,GAFS,EAEwB;AAAA,IAAA,IAAA,EAAA;AAAA,GAFxB,EA3BpB;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA,SAAA;AAAA,MAAA,IAAA,EAAA,CAAA,UAAA;AAAA,KAAA;AAAA,GA2BoB,CAAA;AAAA,CAAA;;AAqCpB,mBAAA,CAAA,cAAA,GAAA;AAAE,EAAA,UAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,KAAA;AAAA,IAAA,IAAA,EAAA,CAAA,KAAA;AAAA,GAAA,CAAF;AAAqD,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAArD;AA/BA,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA+BA;AA5BA,EAAA,aAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA4BA;AAzBA,EAAA,WAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,YAAA;AAAA,IAAA,IAAA,EAAA,CAAA,uBAAA;AAAA,GAAA,CAyBA;AAXA,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAQ,IAAA,IAAR,EAAA,CAAA,QAAA;AAAA,GAAA;AAWA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARA,C;AAAE;;;;;;ICTF,mB;;;;kCA5CA,gB,CAAC;AAAA,EAAA,IAAD,EAAA;AAAC,C;AACQ,mBAAE,CAAA,IAAF,GAAE,MACP,CAAA,gBADO,CACK;AAAA,EAAA,OAAA,EAAA,SACZ,2BADY,CACG,CADH,EAEZ;AAAA,WAAA,KAAe,CAAA,IAAA,mBAAf,GAAA;AACA,GAHY;AAGZ,EAAA,SAAa,EAAA,CACb,iBADa,EAEb,+CAFa,CAHD;AAOd,EAAA,OAAA,EAAO,CAAA,CACL,YADK,EACM,eADN,EAEU,eAFV,EAGL,aAHK,EAIL,UAJK,EAIe,YAJf,CAAA;AAPO,CADL,CAAF;;CAaa,YAAA;AAAA,GAAA,OAAA,SAAA,KAClB,WADkB,IACC,SADD,KACC,MAAA,CACnB,kBADmB,CACnB,mBADmB,EACI;AAAA,IAAA,YACvB,EAAA,wBAAY;AAAA,aAAA,CAAA,WAAA,EACD,eADC,EACD,aADC,EAEZ,oBAFY,EAEI,kBAFJ,EAGZ,mBAHY,EAIb,uBAJa,EAKd,YALc,EAKA,WALA,EAKA,gBALA,EAMD,iBANC,CAAA;AAOZ,KARuB;AAQvB,IAAA,OAAA,EAAe,mBAAA;AAAA,aAAA,CACf,YADe,EAEf,eAFe,EAEK,eAFL,EAGf,aAHe,EAGG,UAHH,EAIf,YAJe,CAAA;AAIf,KAZuB;AAYvB,IAAA,OAAmB,EAAA,mBAAA;AAAA,aACnB,CAAA,WAAA,EAAA,eAAA,EAAuB,aAAvB,EACA,oBADA,EACY,kBADZ,EAEW,mBAFX,EAGA,uBAHA,EAGgB,YAHhB,EAIA,WAJA,EAIA,gBAJA,EAIiB,iBAJjB,CADmB;AAOrB;AAnByB,GADJ,CADD;AAqBpB,C;;;;CACE,YAAA;AAAA,EAAA,MAAA,CAAA,iBAAA,CAAiB,mBAAjB,EACA,CAAA;kBAAA;AAA+C,IAAA,IAAA,EAAA,CAAA;AAChD,MAAA,OAAA,EACD,CAAiB,YAAjB,EACE,eADF,EAEE,eAFF,EAGC,aAHD,E,UAAA,E,YAAA,CAFiD;oNAAA;yNAAA;qFAAA;;AAAA,KAAA;AAA/C,GAAA,CADA,E,IAAA,E,IAAA;AAQH,C;AAAE;;;;;AAC4G;;;;;;AAAgJ,SAAA,mBAAA,EAAA,iBAAA,EAAA,WAAA,EAAA,eAAA,EAAA,eAAA,EAAA,sCAAA,EAAA,8BAAA,EAAA,+CAAA,EAAA,wBAAA,EAAA,8BAAA,EAAA,oBAAA,EAAA,aAAA,EAAA,uBAAA,EAAA,6BAAA,EAAA,yBAAA,EAAA,uBAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,uBAAA,EAAA,mBAAA,EAAA,YAAA,EAAA,WAAA,EAAA,gBAAA,IAAA,IAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n"]},"metadata":{},"sourceType":"module"}