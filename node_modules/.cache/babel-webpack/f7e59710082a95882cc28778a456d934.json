{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, ElementRef, Input, Inject, Optional, Output, SkipSelf, ViewContainerRef, ViewEncapsulation, ViewChild, Host, ContentChildren, NgModule } from '@angular/core';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge, Subscription, EMPTY } from 'rxjs';\nimport { filter, startWith, take, distinctUntilChanged } from 'rxjs/operators';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, hasModifierKey, HOME, END } from '@angular/cdk/keycodes';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\nvar _c0 = [\"body\"];\n\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) {}\n\nvar _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nvar _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\n\nvar _c3 = function _c3(a0, a1) {\n  return {\n    collapsedHeight: a0,\n    expandedHeight: a1\n  };\n};\n\nvar _c4 = function _c4(a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\n\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n  }\n}\n\nvar _c5 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nvar _c6 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nvar MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Time and timing curve for expansion panel animations.\n * @type {?}\n */\n\nvar EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n * @type {?}\n */\n\nvar matExpansionAnimations = {\n  /**\n   * Animation that rotates the indicator arrow.\n   */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed, void', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n\n  /**\n   * Animation that expands and collapses the panel header height.\n   */\n  expansionHeaderHeight: trigger('expansionHeight', [state('collapsed, void', style({\n    height: '{{collapsedHeight}}'\n  }), {\n    params: {\n      collapsedHeight: '48px'\n    }\n  }), state('expanded', style({\n    height: '{{expandedHeight}}'\n  }), {\n    params: {\n      expandedHeight: '64px'\n    }\n  }), transition('expanded <=> collapsed, void => collapsed', group([query('@indicatorRotate', animateChild(), {\n    optional: true\n  }), animate(EXPANSION_PANEL_ANIMATION_TIMING)]))]),\n\n  /**\n   * Animation that expands and collapses the panel content.\n   */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed, void', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n\nvar MatExpansionPanelContent =\n/**\n * @param {?} _template\n */\nfunction MatExpansionPanelContent(_template) {\n  _classCallCheck(this, MatExpansionPanelContent);\n\n  this._template = _template;\n};\n\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) {\n  return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nMatExpansionPanelContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatExpansionPanelContent,\n  selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]]\n});\n/** @nocollapse */\n\nMatExpansionPanelContent.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matExpansionPanelContent]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Counter for generating unique element ids.\n * @type {?}\n */\n\n\nvar uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n * @type {?}\n */\n\nvar MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nvar ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n\nvar MatExpansionPanel = /*#__PURE__*/function (_CdkAccordionItem) {\n  _inherits(MatExpansionPanel, _CdkAccordionItem);\n\n  var _super = _createSuper(MatExpansionPanel);\n\n  /**\n   * @param {?} accordion\n   * @param {?} _changeDetectorRef\n   * @param {?} _uniqueSelectionDispatcher\n   * @param {?} _viewContainerRef\n   * @param {?=} _document\n   * @param {?=} _animationMode\n   * @param {?=} defaultOptions\n   */\n  function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, // @breaking-change 8.0.0 _document and _animationMode to be made required\n  _document, _animationMode, defaultOptions) {\n    var _this;\n\n    _classCallCheck(this, MatExpansionPanel);\n\n    _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    _this._viewContainerRef = _viewContainerRef;\n    _this._animationMode = _animationMode;\n    _this._hideToggle = false;\n    /**\n     * An event emitted after the body's expansion animation happens.\n     */\n\n    _this.afterExpand = new EventEmitter();\n    /**\n     * An event emitted after the body's collapse animation happens.\n     */\n\n    _this.afterCollapse = new EventEmitter();\n    /**\n     * Stream that emits for changes in `\\@Input` properties.\n     */\n\n    _this._inputChanges = new Subject();\n    /**\n     * ID for the associated header element. Used for a11y labelling.\n     */\n\n    _this._headerId = \"mat-expansion-panel-header-\".concat(uniqueId++);\n    /**\n     * Stream of body animation done events.\n     */\n\n    _this._bodyAnimationDone = new Subject();\n    _this.accordion = accordion;\n    _this._document = _document; // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n    _this._bodyAnimationDone.pipe(distinctUntilChanged(function (x, y) {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(function (event) {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          _this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          _this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      _this.hideToggle = defaultOptions.hideToggle;\n    }\n\n    return _this;\n  }\n  /**\n   * Whether the toggle indicator should be hidden.\n   * @return {?}\n   */\n\n\n  _createClass(MatExpansionPanel, [{\n    key: \"_hasSpacing\",\n\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    value: function _hasSpacing() {\n      if (this.accordion) {\n        // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n        // the [displayMode] input changes, the change detection will also cover the host bindings\n        // of this expansion panel.\n        return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n      }\n\n      return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExpandedState\",\n    value: function _getExpandedState() {\n      return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      if (this._lazyContent) {\n        // Render the content as soon as the panel becomes open.\n        this.opened.pipe(startWith(\n        /** @type {?} */\n        null), filter(function () {\n          return _this2.expanded && !_this2._portal;\n        }), take(1)).subscribe(function () {\n          _this2._portal = new TemplatePortal(_this2._lazyContent._template, _this2._viewContainerRef);\n        });\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatExpansionPanel.prototype), \"ngOnDestroy\", this).call(this);\n\n      this._bodyAnimationDone.complete();\n\n      this._inputChanges.complete();\n    }\n    /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      if (this._body && this._document) {\n        /** @type {?} */\n        var focusedElement = this._document.activeElement;\n        /** @type {?} */\n\n        var bodyElement = this._body.nativeElement;\n        return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"hideToggle\",\n    get: function get() {\n      return this._hideToggle || this.accordion && this.accordion.hideToggle;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hideToggle = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatExpansionPanel;\n}(CdkAccordionItem);\n\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) {\n  return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8));\n};\n\nMatExpansionPanel.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatExpansionPanel,\n  selectors: [[\"mat-expansion-panel\"]],\n  contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    }\n  },\n  viewQuery: function MatExpansionPanel_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-expansion-panel\"],\n  hostVars: 6,\n  hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    expanded: \"expanded\",\n    hideToggle: \"hideToggle\"\n  },\n  outputs: {\n    opened: \"opened\",\n    closed: \"closed\",\n    expandedChange: \"expandedChange\",\n    afterExpand: \"afterExpand\",\n    afterCollapse: \"afterCollapse\"\n  },\n  exportAs: [\"matExpansionPanel\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n  // to the same accordion.\n  {\n    provide: MAT_ACCORDION,\n    useValue: ɵ0\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]],\n  template: function MatExpansionPanel_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) {\n        return ctx._bodyAnimationDone.next($event);\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵprojection(4, 1);\n      ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(6, 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    }\n  },\n  directives: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.bodyExpansion]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatExpansionPanel.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }, {\n      type: Inject,\n      args: [MAT_ACCORDION]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: UniqueSelectionDispatcher\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatExpansionPanel.propDecorators = {\n  hideToggle: [{\n    type: Input\n  }],\n  afterExpand: [{\n    type: Output\n  }],\n  afterCollapse: [{\n    type: Output\n  }],\n  _lazyContent: [{\n    type: ContentChild,\n    args: [MatExpansionPanelContent]\n  }],\n  _body: [{\n    type: ViewChild,\n    args: ['body']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\n    type: Component,\n    args: [{\n      styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n      selector: 'mat-expansion-panel',\n      exportAs: 'matExpansionPanel',\n      template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div class=\\\"mat-expansion-panel-content\\\" role=\\\"region\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\" [attr.aria-labelledby]=\\\"_headerId\\\" [id]=\\\"id\\\" #body><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled', 'expanded'],\n      outputs: ['opened', 'closed', 'expandedChange'],\n      animations: [matExpansionAnimations.bodyExpansion],\n      providers: [// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n      // to the same accordion.\n      {\n        provide: MAT_ACCORDION,\n        useValue: ɵ0\n      }],\n      host: {\n        'class': 'mat-expansion-panel',\n        '[class.mat-expanded]': 'expanded',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [MAT_ACCORDION]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.UniqueSelectionDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    afterExpand: [{\n      type: Output\n    }],\n    afterCollapse: [{\n      type: Output\n    }],\n    hideToggle: [{\n      type: Input\n    }],\n    _lazyContent: [{\n      type: ContentChild,\n      args: [MatExpansionPanelContent]\n    }],\n    _body: [{\n      type: ViewChild,\n      args: ['body']\n    }]\n  });\n})();\n\nvar MatExpansionPanelActionRow = function MatExpansionPanelActionRow() {\n  _classCallCheck(this, MatExpansionPanelActionRow);\n};\n\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) {\n  return new (t || MatExpansionPanelActionRow)();\n};\n\nMatExpansionPanelActionRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatExpansionPanelActionRow,\n  selectors: [[\"mat-action-row\"]],\n  hostAttrs: [1, \"mat-action-row\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-action-row',\n      host: {\n        class: 'mat-action-row'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n\n\nvar MatExpansionPanelHeader = /*#__PURE__*/function () {\n  /**\n   * @param {?} panel\n   * @param {?} _element\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?=} defaultOptions\n   */\n  function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatExpansionPanelHeader);\n\n    this.panel = panel;\n    this._element = _element;\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._parentChangeSubscription = Subscription.EMPTY;\n    /** @type {?} */\n\n    var accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(function (changes) {\n      return !!changes['hideToggle'];\n    })) : EMPTY; // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n\n    this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(function (changes) {\n      return !!(changes['hideToggle'] || changes['disabled']);\n    }))).subscribe(function () {\n      return _this3._changeDetectorRef.markForCheck();\n    }); // Avoids focus being lost if the panel contained the focused element and was closed.\n\n    panel.closed.pipe(filter(function () {\n      return panel._containsFocus();\n    })).subscribe(function () {\n      return _focusMonitor.focusVia(_element, 'program');\n    });\n\n    _focusMonitor.monitor(_element).subscribe(function (origin) {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(_this3);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  _createClass(MatExpansionPanelHeader, [{\n    key: \"_toggle\",\n\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    value: function _toggle() {\n      this.panel.toggle();\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isExpanded\",\n    value: function _isExpanded() {\n      return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExpandedState\",\n    value: function _getExpandedState() {\n      return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPanelId\",\n    value: function _getPanelId() {\n      return this.panel.id;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_showToggle\",\n    value: function _showToggle() {\n      return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      switch (event.keyCode) {\n        // Toggle for space and enter keys.\n        case SPACE:\n        case ENTER:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n\n            this._toggle();\n          }\n\n          break;\n\n        default:\n          if (this.panel.accordion) {\n            this.panel.accordion._handleHeaderKeydown(event);\n          }\n\n          return;\n      }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n\n      this._focusMonitor.focusVia(this._element, origin);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._parentChangeSubscription.unsubscribe();\n\n      this._focusMonitor.stopMonitoring(this._element);\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.panel.disabled;\n    }\n  }]);\n\n  return MatExpansionPanelHeader;\n}();\n\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) {\n  return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8));\n};\n\nMatExpansionPanelHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatExpansionPanelHeader,\n  selectors: [[\"mat-expansion-panel-header\"]],\n  hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\"],\n  hostVars: 14,\n  hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() {\n        return ctx._toggle();\n      })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? 0 - 1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@expansionHeight\", ɵngcc0.ɵɵpureFunction2(11, _c4, ctx._getExpandedState(), ɵngcc0.ɵɵpureFunction2(8, _c3, ctx.collapsedHeight, ctx.expandedHeight)));\n      ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded());\n    }\n  },\n  inputs: {\n    expandedHeight: \"expandedHeight\",\n    collapsedHeight: \"collapsedHeight\"\n  },\n  ngContentSelectors: _c6,\n  decls: 5,\n  vars: 1,\n  consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]],\n  template: function MatExpansionPanelHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c5);\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵprojection(3, 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    }\n  },\n  directives: [ɵngcc4.NgIf],\n  styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.indicatorRotate, matExpansionAnimations.expansionHeaderHeight]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatExpansionPanelHeader.ctorParameters = function () {\n  return [{\n    type: MatExpansionPanel,\n    decorators: [{\n      type: Host\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatExpansionPanelHeader.propDecorators = {\n  expandedHeight: [{\n    type: Input\n  }],\n  collapsedHeight: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel-header',\n      styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n      template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matExpansionAnimations.indicatorRotate, matExpansionAnimations.expansionHeaderHeight],\n      host: {\n        'class': 'mat-expansion-panel-header',\n        'role': 'button',\n        '[attr.id]': 'panel._headerId',\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.aria-controls]': '_getPanelId()',\n        '[attr.aria-expanded]': '_isExpanded()',\n        '[attr.aria-disabled]': 'panel.disabled',\n        '[class.mat-expanded]': '_isExpanded()',\n        '(click)': '_toggle()',\n        '(keydown)': '_keydown($event)',\n        '[@expansionHeight]': \"{\\n        value: _getExpandedState(),\\n        params: {\\n          collapsedHeight: collapsedHeight,\\n          expandedHeight: expandedHeight\\n        }\\n    }\"\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatExpansionPanel,\n      decorators: [{\n        type: Host\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    expandedHeight: [{\n      type: Input\n    }],\n    collapsedHeight: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n\n\nvar MatExpansionPanelDescription = function MatExpansionPanelDescription() {\n  _classCallCheck(this, MatExpansionPanelDescription);\n};\n\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) {\n  return new (t || MatExpansionPanelDescription)();\n};\n\nMatExpansionPanelDescription.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatExpansionPanelDescription,\n  selectors: [[\"mat-panel-description\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-description\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-description',\n      host: {\n        class: 'mat-expansion-panel-header-description'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n\n\nvar MatExpansionPanelTitle = function MatExpansionPanelTitle() {\n  _classCallCheck(this, MatExpansionPanelTitle);\n};\n\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) {\n  return new (t || MatExpansionPanelTitle)();\n};\n\nMatExpansionPanelTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatExpansionPanelTitle,\n  selectors: [[\"mat-panel-title\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-title\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-title',\n      host: {\n        class: 'mat-expansion-panel-header-title'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Directive for a Material Design Accordion.\n */\n\n\nvar MatAccordion = /*#__PURE__*/function (_CdkAccordion) {\n  _inherits(MatAccordion, _CdkAccordion);\n\n  var _super2 = _createSuper(MatAccordion);\n\n  function MatAccordion() {\n    var _this4;\n\n    _classCallCheck(this, MatAccordion);\n\n    _this4 = _super2.apply(this, arguments);\n    _this4._hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n\n    _this4.displayMode = 'default';\n    return _this4;\n  }\n  /**\n   * Whether the expansion indicator should be hidden.\n   * @return {?}\n   */\n\n\n  _createClass(MatAccordion, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      this._keyManager = new FocusKeyManager(this._headers).withWrap();\n    }\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleHeaderKeydown\",\n    value: function _handleHeaderKeydown(event) {\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var manager = this._keyManager;\n\n      if (keyCode === HOME) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      } else if (keyCode === END) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleHeaderFocus\",\n    value: function _handleHeaderFocus(header) {\n      this._keyManager.updateActiveItem(header);\n    }\n  }, {\n    key: \"hideToggle\",\n    get: function get() {\n      return this._hideToggle;\n    }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    ,\n    set: function set(show) {\n      this._hideToggle = coerceBooleanProperty(show);\n    }\n  }]);\n\n  return MatAccordion;\n}(CdkAccordion);\n\nMatAccordion.ɵfac = function MatAccordion_Factory(t) {\n  return ɵMatAccordion_BaseFactory(t || MatAccordion);\n};\n\nMatAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatAccordion,\n  selectors: [[\"mat-accordion\"]],\n  contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-accordion\"],\n  inputs: {\n    multi: \"multi\",\n    displayMode: \"displayMode\",\n    hideToggle: \"hideToggle\"\n  },\n  exportAs: [\"matAccordion\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatAccordion.propDecorators = {\n  _headers: [{\n    type: ContentChildren,\n    args: [MatExpansionPanelHeader, {\n      descendants: true\n    }]\n  }],\n  hideToggle: [{\n    type: Input\n  }],\n  displayMode: [{\n    type: Input\n  }]\n};\nvar ɵMatAccordion_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatAccordion);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-accordion',\n      exportAs: 'matAccordion',\n      inputs: ['multi'],\n      providers: [{\n        provide: MAT_ACCORDION,\n        useExisting: MatAccordion\n      }],\n      host: {\n        class: 'mat-accordion'\n      }\n    }]\n  }], null, {\n    displayMode: [{\n      type: Input\n    }],\n    hideToggle: [{\n      type: Input\n    }],\n    _headers: [{\n      type: ContentChildren,\n      args: [MatExpansionPanelHeader, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatExpansionModule = function MatExpansionModule() {\n  _classCallCheck(this, MatExpansionModule);\n};\n\nMatExpansionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatExpansionModule\n});\nMatExpansionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatExpansionModule_Factory(t) {\n    return new (t || MatExpansionModule)();\n  },\n  imports: [[CommonModule, CdkAccordionModule, PortalModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, {\n    declarations: function declarations() {\n      return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent];\n    },\n    imports: function imports() {\n      return [CommonModule, CdkAccordionModule, PortalModule];\n    },\n    exports: function exports() {\n      return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, CdkAccordionModule, PortalModule],\n      exports: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent],\n      declarations: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatExpansionModule, MatAccordion, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };","map":{"version":3,"sources":["../../../src/lib/expansion/accordion-base.ts","../../../src/lib/expansion/expansion-animations.ts","../../../src/lib/expansion/expansion-panel-content.ts","../../../src/lib/expansion/expansion-panel.ts","../../../src/lib/expansion/expansion-panel-header.ts","../../../src/lib/expansion/accordion.ts","../../../src/lib/expansion/expansion-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!changes['hideToggle'])) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => !!(changes['hideToggle'] || changes['disabled']))))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n"]},"metadata":{},"sourceType":"module"}