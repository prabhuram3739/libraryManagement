{"ast":null,"code":"import _toConsumableArray from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE, END, HOME, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Platform } from '@angular/cdk/platform';\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, InjectionToken, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { take, startWith, takeUntil } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nvar _c0 = [\"*\"];\n\nvar MatChipSelectionChange =\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nfunction MatChipSelectionChange(source, selected) {\n  var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, MatChipSelectionChange);\n\n  this.source = source;\n  this.selected = selected;\n  this.isUserInput = isUserInput;\n}; // Boilerplate for applying mixins to MatChip.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatChipBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatChipBase(_elementRef) {\n  _classCallCheck(this, MatChipBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n/** @type {?} */\n\n\nvar CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\n\nvar MatChipAvatar = function MatChipAvatar() {\n  _classCallCheck(this, MatChipAvatar);\n};\n\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\n\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\n\n\nvar MatChipTrailingIcon = function MatChipTrailingIcon() {\n  _classCallCheck(this, MatChipTrailingIcon);\n};\n\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\n\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nvar MatChip = /*#__PURE__*/function (_MatChipMixinBase2) {\n  _inherits(MatChip, _MatChipMixinBase2);\n\n  var _super = _createSuper(MatChip);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} platform\n   * @param {?} globalRippleOptions\n   */\n  function MatChip(_elementRef, _ngZone, platform, globalRippleOptions) {\n    var _this;\n\n    _classCallCheck(this, MatChip);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._ngZone = _ngZone;\n    /**\n     * Whether the chip has focus.\n     */\n\n    _this._hasFocus = false;\n    /**\n     * Whether the chip list is selectable\n     */\n\n    _this.chipListSelectable = true;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     */\n\n    _this._chipListMultiple = false;\n    _this._selected = false;\n    _this._selectable = true;\n    _this._removable = true;\n    /**\n     * Emits when the chip is focused.\n     */\n\n    _this._onFocus = new Subject();\n    /**\n     * Emits when the chip is blured.\n     */\n\n    _this._onBlur = new Subject();\n    /**\n     * Emitted when the chip is selected or deselected.\n     */\n\n    _this.selectionChange = new EventEmitter();\n    /**\n     * Emitted when the chip is destroyed.\n     */\n\n    _this.destroyed = new EventEmitter();\n    /**\n     * Emitted when a chip is to be removed.\n     */\n\n    _this.removed = new EventEmitter();\n\n    _this._addHostClassName();\n\n    _this._chipRipple = new RippleRenderer(_assertThisInitialized(_this), _ngZone, _elementRef, platform);\n\n    _this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    _this.rippleConfig = globalRippleOptions || {};\n    return _this;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  _createClass(MatChip, [{\n    key: \"_addHostClassName\",\n\n    /**\n     * @return {?}\n     */\n    value: function _addHostClassName() {\n      // Add class for the different chips\n      var _iterator = _createForOfIteratorHelper(CHIP_ATTRIBUTE_NAMES),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var attr = _step.value;\n\n          if (this._elementRef.nativeElement.hasAttribute(attr) || this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n            /** @type {?} */\n            this._elementRef.nativeElement.classList.add(attr);\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      /** @type {?} */\n      this._elementRef.nativeElement.classList.add('mat-standard-chip');\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyed.emit({\n        chip: this\n      });\n\n      this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange();\n      }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      if (this._selected) {\n        this._selected = false;\n\n        this._dispatchSelectionChange();\n      }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectViaInteraction\",\n    value: function selectViaInteraction() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange(true);\n      }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleSelected\",\n    value: function toggleSelected() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this._selected = !this.selected;\n\n      this._dispatchSelectionChange(isUserInput);\n\n      return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this._hasFocus) {\n        this._elementRef.nativeElement.focus();\n\n        this._onFocus.next({\n          chip: this\n        });\n      }\n\n      this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.removable) {\n        this.removed.emit({\n          chip: this\n        });\n      }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      if (this.disabled) {\n        event.preventDefault();\n      } else {\n        event.stopPropagation();\n      }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case DELETE:\n        case BACKSPACE:\n          // If we are removable, remove the focused chip\n          this.remove(); // Always prevent so page navigation does not occur\n\n          event.preventDefault();\n          break;\n\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this.toggleSelected(true);\n          } // Always prevent space from scrolling the page since the list has focus\n\n\n          event.preventDefault();\n          break;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this2 = this;\n\n      // When animations are enabled, Angular may end up removing the chip from the DOM a little\n      // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n      // that moves focus not the next item. To work around the issue, we defer marking the chip\n      // as not focused until the next time the zone stabilizes.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n        _this2._ngZone.run(function () {\n          _this2._hasFocus = false;\n\n          _this2._onBlur.next({\n            chip: _this2\n          });\n        });\n      });\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dispatchSelectionChange\",\n    value: function _dispatchSelectionChange() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: isUserInput,\n        selected: this._selected\n      });\n    }\n  }, {\n    key: \"rippleDisabled\",\n    get: function get() {\n      return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var coercedValue = coerceBooleanProperty(value);\n\n      if (coercedValue !== this._selected) {\n        this._selected = coercedValue;\n\n        this._dispatchSelectionChange();\n      }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value != undefined ? this._value : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable && this.chipListSelectable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"removable\",\n    get: function get() {\n      return this._removable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ariaSelected\",\n    get: function get() {\n      // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n      // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n      return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n    }\n  }]);\n\n  return MatChip;\n}(_MatChipMixinBase);\n\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8));\n};\n\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\"],\n  hostVars: 12,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatChip.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n    }]\n  }];\n};\n\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MatChipAvatar]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MatChipTrailingIcon]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [forwardRef(function () {\n      return MatChipRemove;\n    })]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n      inputs: ['color', 'disabled', 'disableRipple'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MatChipAvatar]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MatChipTrailingIcon]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [forwardRef(function () {\n        return MatChipRemove;\n      })]\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nvar MatChipRemove = /*#__PURE__*/function () {\n  /**\n   * @param {?} _parentChip\n   */\n  function MatChipRemove(_parentChip) {\n    _classCallCheck(this, MatChipRemove);\n\n    this._parentChip = _parentChip;\n  }\n  /**\n   * Calls the parent chip's public `remove()` method if applicable.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _createClass(MatChipRemove, [{\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      if (this._parentChip.removable) {\n        this._parentChip.remove();\n      } // We need to stop event propagation because otherwise the event will bubble up to the\n      // form field and cause the `onContainerClick` method to be invoked. This method would then\n      // reset the focused chip that has been focused after chip removal. Usually the parent\n      // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n      // that the chip is being removed before the event bubbles up.\n\n\n      event.stopPropagation();\n    }\n  }]);\n\n  return MatChipRemove;\n}();\n\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip));\n};\n\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  }\n});\n/** @nocollapse */\n\nMatChipRemove.ctorParameters = function () {\n  return [{\n    type: MatChip\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\n\n\nvar MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/**\n * \\@docs-private\n */\n\nvar MatChipListBase =\n/**\n * @param {?} _defaultErrorStateMatcher\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nfunction MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatChipListBase);\n\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n/** @type {?} */\n\n\nvar _MatChipListMixinBase = mixinErrorState(MatChipListBase); // Increasing integer for generating unique ids for chip-list components.\n\n/** @type {?} */\n\n\nvar nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\n\nvar MatChipListChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatChipListChange(source, value) {\n  _classCallCheck(this, MatChipListChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nvar MatChipList = /*#__PURE__*/function (_MatChipListMixinBase2) {\n  _inherits(MatChipList, _MatChipListMixinBase2);\n\n  var _super2 = _createSuper(MatChipList);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} ngControl\n   */\n  function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    var _this3;\n\n    _classCallCheck(this, MatChipList);\n\n    _this3 = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this3._elementRef = _elementRef;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._dir = _dir;\n    _this3.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    _this3.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n\n    _this3._lastDestroyedChipIndex = null;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    _this3._destroyed = new Subject();\n    /**\n     * Uid of the chip list\n     */\n\n    _this3._uid = \"mat-chip-list-\".concat(nextUniqueId++);\n    /**\n     * Tab index for the chip list.\n     */\n\n    _this3._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n\n    _this3._userTabIndex = null;\n    /**\n     * Function when touched\n     */\n\n    _this3._onTouched = function () {};\n    /**\n     * Function when changed\n     */\n\n\n    _this3._onChange = function () {};\n\n    _this3._multiple = false;\n\n    _this3._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n\n    _this3._required = false;\n    _this3._disabled = false;\n    /**\n     * Orientation of the chip list.\n     */\n\n    _this3.ariaOrientation = 'horizontal';\n    _this3._selectable = true;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     */\n\n    _this3.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    _this3.valueChange = new EventEmitter();\n\n    if (_this3.ngControl) {\n      _this3.ngControl.valueAccessor = _assertThisInitialized(_this3);\n    }\n\n    return _this3;\n  }\n  /**\n   * The array of selected chips inside chip list.\n   * @return {?}\n   */\n\n\n  _createClass(MatChipList, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this4 = this;\n\n      this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n      if (this._dir) {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(function (dir) {\n          return _this4._keyManager.withHorizontalOrientation(dir);\n        });\n      } // Prevents the chip list from capturing focus and redirecting\n      // it back to the first chip when the user tabs out.\n\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        _this4._tabIndex = -1;\n        setTimeout(function () {\n          _this4._tabIndex = _this4._userTabIndex || 0;\n\n          _this4._changeDetectorRef.markForCheck();\n        });\n      }); // When the list changes, re-subscribe\n\n\n      this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(function () {\n        if (_this4.disabled) {\n          // Since this happens after the content has been\n          // checked, we need to defer it to the next tick.\n          Promise.resolve().then(function () {\n            _this4._syncChipsState();\n          });\n        }\n\n        _this4._resetChips(); // Reset chips selected/deselected status\n\n\n        _this4._initializeSelection(); // Check to see if we need to update our tab index\n\n\n        _this4._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n        _this4._updateFocusForDestroyedChips();\n\n        _this4.stateChanges.next();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this.stateChanges.complete();\n\n      this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerInput\",\n    value: function registerInput(inputElement) {\n      this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.chips) {\n        this._setSelectionByValue(value, false);\n      }\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick(event) {\n      if (!this._originatesFromChip(event)) {\n        this.focus();\n      }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.disabled) {\n        return;\n      } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n      // Focus on first element if there's no chipInput inside chip-list\n\n\n      if (this._chipInput && this._chipInput.focused) {// do nothing\n      } else if (this.chips.length > 0) {\n        this._keyManager.setFirstItemActive();\n\n        this.stateChanges.next();\n      } else {\n        this._focusInput();\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusInput\",\n    value: function _focusInput() {\n      if (this._chipInput) {\n        this._chipInput.focus();\n      }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      /** @type {?} */\n      var target =\n      /** @type {?} */\n      event.target; // If they are on an empty input and hit backspace, focus the last chip\n\n      if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n        this._keyManager.setLastItemActive();\n\n        event.preventDefault();\n      } else if (target && target.classList.contains('mat-chip')) {\n        if (event.keyCode === HOME) {\n          this._keyManager.setFirstItemActive();\n\n          event.preventDefault();\n        } else if (event.keyCode === END) {\n          this._keyManager.setLastItemActive();\n\n          event.preventDefault();\n        } else {\n          this._keyManager.onKeydown(event);\n        }\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTabIndex\",\n    value: function _updateTabIndex() {\n      // If we have 0 chips, we should not allow keyboard focus\n      this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateFocusForDestroyedChips\",\n    value: function _updateFocusForDestroyedChips() {\n      if (this._lastDestroyedChipIndex != null && this.chips.length) {\n        /** @type {?} */\n        var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n        this._keyManager.setActiveItem(newChipIndex);\n      }\n\n      this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n\n  }, {\n    key: \"_isValidIndex\",\n    value: function _isValidIndex(index) {\n      return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isInputEmpty\",\n    value: function _isInputEmpty(element) {\n      if (element && element.nodeName.toLowerCase() === 'input') {\n        /** @type {?} */\n        var input =\n        /** @type {?} */\n        element;\n        return !input.value;\n      }\n\n      return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this5 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      this._clearSelection();\n\n      this.chips.forEach(function (chip) {\n        return chip.deselect();\n      });\n\n      if (Array.isArray(value)) {\n        value.forEach(function (currentValue) {\n          return _this5._selectValue(currentValue, isUserInput);\n        });\n\n        this._sortValues();\n      } else {\n        /** @type {?} */\n        var correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what chip the user interacted with last.\n\n\n        if (correspondingChip) {\n          if (isUserInput) {\n            this._keyManager.setActiveItem(correspondingChip);\n          }\n        }\n      }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this6 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      /** @type {?} */\n      var correspondingChip = this.chips.find(function (chip) {\n        return chip.value != null && _this6._compareWith(chip.value, value);\n      });\n\n      if (correspondingChip) {\n        isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n        this._selectionModel.select(correspondingChip);\n      }\n\n      return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this7 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        if (_this7.ngControl || _this7._value) {\n          _this7._setSelectionByValue(_this7.ngControl ? _this7.ngControl.value : _this7._value, false);\n\n          _this7.stateChanges.next();\n        }\n      });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection(skip) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(function (chip) {\n        if (chip !== skip) {\n          chip.deselect();\n        }\n      });\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this8 = this;\n\n      if (this._multiple) {\n        this._selectionModel.clear();\n\n        this.chips.forEach(function (chip) {\n          if (chip.selected) {\n            _this8._selectionModel.select(chip);\n          }\n        });\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      /** @type {?} */\n      var valueToEmit = null;\n\n      if (Array.isArray(this.selected)) {\n        valueToEmit = this.selected.map(function (chip) {\n          return chip.value;\n        });\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.change.emit(new MatChipListChange(this, valueToEmit));\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this9 = this;\n\n      if (!this._hasFocusedChip()) {\n        this._keyManager.setActiveItem(-1);\n      }\n\n      if (!this.disabled) {\n        if (this._chipInput) {\n          // If there's a chip input, we should check whether the focus moved to chip input.\n          // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n          // to chip input, do nothing.\n          // Timeout is needed to wait for the focus() event trigger on chip input.\n          setTimeout(function () {\n            if (!_this9.focused) {\n              _this9._markAsTouched();\n            }\n          });\n        } else {\n          // If there's no chip input, then mark the field as touched.\n          this._markAsTouched();\n        }\n      }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markAsTouched\",\n    value: function _markAsTouched() {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetChips\",\n    value: function _resetChips() {\n      this._dropSubscriptions();\n\n      this._listenToChipsFocus();\n\n      this._listenToChipsSelection();\n\n      this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dropSubscriptions\",\n    value: function _dropSubscriptions() {\n      if (this._chipFocusSubscription) {\n        this._chipFocusSubscription.unsubscribe();\n\n        this._chipFocusSubscription = null;\n      }\n\n      if (this._chipBlurSubscription) {\n        this._chipBlurSubscription.unsubscribe();\n\n        this._chipBlurSubscription = null;\n      }\n\n      if (this._chipSelectionSubscription) {\n        this._chipSelectionSubscription.unsubscribe();\n\n        this._chipSelectionSubscription = null;\n      }\n\n      if (this._chipRemoveSubscription) {\n        this._chipRemoveSubscription.unsubscribe();\n\n        this._chipRemoveSubscription = null;\n      }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsSelection\",\n    value: function _listenToChipsSelection() {\n      var _this10 = this;\n\n      this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {\n        event.source.selected ? _this10._selectionModel.select(event.source) : _this10._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n        if (!_this10.multiple) {\n          _this10.chips.forEach(function (chip) {\n            if (!_this10._selectionModel.isSelected(chip) && chip.selected) {\n              chip.deselect();\n            }\n          });\n        }\n\n        if (event.isUserInput) {\n          _this10._propagateChanges();\n        }\n      });\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsFocus\",\n    value: function _listenToChipsFocus() {\n      var _this11 = this;\n\n      this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n        /** @type {?} */\n        var chipIndex = _this11.chips.toArray().indexOf(event.chip);\n\n        if (_this11._isValidIndex(chipIndex)) {\n          _this11._keyManager.updateActiveItemIndex(chipIndex);\n        }\n\n        _this11.stateChanges.next();\n      });\n      this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n        _this11._blur();\n\n        _this11.stateChanges.next();\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsRemoved\",\n    value: function _listenToChipsRemoved() {\n      var _this12 = this;\n\n      this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n        /** @type {?} */\n        var chip = event.chip;\n        /** @type {?} */\n\n        var chipIndex = _this12.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n        // the index in order to be able to determine an appropriate sibling chip that will\n        // receive focus.\n\n\n        if (_this12._isValidIndex(chipIndex) && chip._hasFocus) {\n          _this12._lastDestroyedChipIndex = chipIndex;\n        }\n      });\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_originatesFromChip\",\n    value: function _originatesFromChip(event) {\n      /** @type {?} */\n      var currentElement =\n      /** @type {?} */\n      event.target;\n\n      while (currentElement && currentElement !== this._elementRef.nativeElement) {\n        if (currentElement.classList.contains('mat-chip')) {\n          return true;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n\n      return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasFocusedChip\",\n    value: function _hasFocusedChip() {\n      return this.chips.some(function (chip) {\n        return chip._hasFocus;\n      });\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncChipsState\",\n    value: function _syncChipsState() {\n      var _this13 = this;\n\n      if (this.chips) {\n        this.chips.forEach(function (chip) {\n          chip.disabled = _this13._disabled;\n          chip._chipListMultiple = _this13.multiple;\n        });\n      }\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"role\",\n    get: function get() {\n      return this.empty ? null : 'listbox';\n    }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.writeValue(value);\n      this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var _this14 = this;\n\n      this._selectable = coerceBooleanProperty(value);\n\n      if (this.chips) {\n        this.chips.forEach(function (chip) {\n          return chip.chipListSelectable = _this14._selectable;\n        });\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"tabIndex\",\n    set: function set(value) {\n      this._userTabIndex = value;\n      this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipSelectionChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip.selectionChange;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipFocusChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip._onFocus;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipBlurChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip._onBlur;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipRemoveChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(function (chip) {\n        return chip.destroyed;\n      })));\n    }\n  }]);\n\n  return MatChipList;\n}(_MatChipListMixinBase);\n\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\n\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatChipList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }];\n};\n\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids.\n\n/** @type {?} */\n\n\nvar nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nvar MatChipInput = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _defaultOptions\n   */\n  function MatChipInput(_elementRef, _defaultOptions) {\n    _classCallCheck(this, MatChipInput);\n\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /**\n     * Whether the control is focused.\n     */\n\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     */\n\n    this.chipEnd = new EventEmitter();\n    /**\n     * The input's placeholder text.\n     */\n\n    this.placeholder = '';\n    /**\n     * Unique id for the input.\n     */\n\n    this.id = \"mat-chip-list-input-\".concat(nextUniqueId$1++);\n    this._disabled = false;\n    this._inputElement =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n  }\n  /**\n   * Register input for chip list\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _createClass(MatChipInput, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnChanges() {\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      if (this.addOnBlur) {\n        this._emitChipEnd();\n      }\n\n      this.focused = false; // Blur the chip list if it is not focused\n\n      if (!this._chipList.focused) {\n        this._chipList._blur();\n      }\n\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focus\",\n    value: function _focus() {\n      this.focused = true;\n\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChipEnd\",\n    value: function _emitChipEnd(event) {\n      if (!this._inputElement.value && !!event) {\n        this._chipList._keydown(event);\n      }\n\n      if (!event || this._isSeparatorKey(event)) {\n        this.chipEnd.emit({\n          input: this._inputElement,\n          value: this._inputElement.value\n        });\n\n        if (event) {\n          event.preventDefault();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {\n      // Let chip list know whenever the value changes.\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._inputElement.focus();\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSeparatorKey\",\n    value: function _isSeparatorKey(event) {\n      if (hasModifierKey(event)) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var separators = this.separatorKeyCodes;\n      /** @type {?} */\n\n      var keyCode = event.keyCode;\n      return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n  }, {\n    key: \"chipList\",\n    set: function set(value) {\n      if (value) {\n        this._chipList = value;\n\n        this._chipList.registerInput(this);\n      }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n\n  }, {\n    key: \"addOnBlur\",\n    get: function get() {\n      return this._addOnBlur;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this._chipList && this._chipList.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._inputElement.value;\n    }\n  }]);\n\n  return MatChipInput;\n}();\n\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\n\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 4,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatChipInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_CHIPS_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nvar ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\n\nvar MatChipsModule = function MatChipsModule() {\n  _classCallCheck(this, MatChipsModule);\n};\n\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatChipsModule_Factory(t) {\n    return new (t || MatChipsModule)();\n  },\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue:\n    /** @type {?} */\n    ɵ0\n  }]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon],\n    exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue:\n        /** @type {?} */\n        ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatChipsModule, MatChipListBase, _MatChipListMixinBase, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipBase, _MatChipMixinBase, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };","map":{"version":3,"sources":["../../../src/lib/chips/chip.ts","../../../src/lib/chips/chip-default-options.ts","../../../src/lib/chips/chip-list.ts","../../../src/lib/chips/chip-input.ts","../../../src/lib/chips/chips-module.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n"]},"metadata":{},"sourceType":"module"}