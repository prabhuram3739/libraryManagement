{"ast":null,"code":"import _slicedToArray from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, Input, ViewEncapsulation, InjectionToken, inject, defineInjectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(\"Unable to find icon with the name \\\"\".concat(iconName, \"\\\"\"));\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(\"The URL provided to MatIconRegistry was not trusted as a resource URL \" + \"via Angular's DomSanitizer. Attempted URL was \\\"\".concat(url, \"\\\".\"));\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(\"The literal provided to MatIconRegistry was not trusted as safe HTML by \" + \"Angular's DomSanitizer. Attempted literal was \\\"\".concat(literal, \"\\\".\"));\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\n\n\nvar SvgIconConfig =\n/**\n * @param {?} data\n */\nfunction SvgIconConfig(data) {\n  _classCallCheck(this, SvgIconConfig);\n\n  // Note that we can't use `instanceof SVGElement` here,\n  // because it'll break during server-side rendering.\n  if (!!\n  /** @type {?} */\n  data.nodeName) {\n    this.svgElement =\n    /** @type {?} */\n    data;\n  } else {\n    this.url =\n    /** @type {?} */\n    data;\n  }\n};\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nvar MatIconRegistry = /*#__PURE__*/function () {\n  /**\n   * @param {?} _httpClient\n   * @param {?} _sanitizer\n   * @param {?} document\n   */\n  function MatIconRegistry(_httpClient, _sanitizer, document) {\n    _classCallCheck(this, MatIconRegistry);\n\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n\n    this._iconSetConfigs = new Map();\n    /**\n     * Cache for icons loaded by direct URLs.\n     */\n\n    this._cachedIconsByUrl = new Map();\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     */\n\n    this._inProgressUrlFetches = new Map();\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     */\n\n    this._fontCssClassesByAlias = new Map();\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n\n    this._defaultFontSetClass = 'material-icons';\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @template THIS\n   * @this {THIS}\n   * @param {?} iconName Name under which the icon should be registered.\n   * @param {?} url\n   * @return {THIS}\n   */\n\n\n  _createClass(MatIconRegistry, [{\n    key: \"addSvgIcon\",\n    value: function addSvgIcon(iconName, url) {\n      return (\n        /** @type {?} */\n        this.addSvgIconInNamespace('', iconName, url)\n      );\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"addSvgIconLiteral\",\n    value: function addSvgIconLiteral(iconName, literal) {\n      return (\n        /** @type {?} */\n        this.addSvgIconLiteralInNamespace('', iconName, literal)\n      );\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"addSvgIconInNamespace\",\n    value: function addSvgIconInNamespace(namespace, iconName, url) {\n      return (\n        /** @type {?} */\n        this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url))\n      );\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"addSvgIconLiteralInNamespace\",\n    value: function addSvgIconLiteralInNamespace(namespace, iconName, literal) {\n      /** @type {?} */\n      var sanitizedLiteral =\n      /** @type {?} */\n      this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!sanitizedLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n      /** @type {?} */\n\n\n      var svgElement =\n      /** @type {?} */\n      this._createSvgElementForSingleIcon(sanitizedLiteral);\n\n      return (\n        /** @type {?} */\n        this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement))\n      );\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"addSvgIconSet\",\n    value: function addSvgIconSet(url) {\n      return (\n        /** @type {?} */\n        this.addSvgIconSetInNamespace('', url)\n      );\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"addSvgIconSetLiteral\",\n    value: function addSvgIconSetLiteral(literal) {\n      return (\n        /** @type {?} */\n        this.addSvgIconSetLiteralInNamespace('', literal)\n      );\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"addSvgIconSetInNamespace\",\n    value: function addSvgIconSetInNamespace(namespace, url) {\n      return (\n        /** @type {?} */\n        this._addSvgIconSetConfig(namespace, new SvgIconConfig(url))\n      );\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"addSvgIconSetLiteralInNamespace\",\n    value: function addSvgIconSetLiteralInNamespace(namespace, literal) {\n      /** @type {?} */\n      var sanitizedLiteral =\n      /** @type {?} */\n      this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!sanitizedLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n      /** @type {?} */\n\n\n      var svgElement =\n      /** @type {?} */\n      this._svgElementFromString(sanitizedLiteral);\n\n      return (\n        /** @type {?} */\n        this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement))\n      );\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"registerFontClassAlias\",\n    value: function registerFontClassAlias(alias) {\n      var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alias;\n\n      /** @type {?} */\n      this._fontCssClassesByAlias.set(alias, className);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n\n  }, {\n    key: \"classNameForFontAlias\",\n    value: function classNameForFontAlias(alias) {\n      return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"setDefaultFontSetClass\",\n    value: function setDefaultFontSetClass(className) {\n      /** @type {?} */\n      this._defaultFontSetClass = className;\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDefaultFontSetClass\",\n    value: function getDefaultFontSetClass() {\n      return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getSvgIconFromUrl\",\n    value: function getSvgIconFromUrl(safeUrl) {\n      var _this = this;\n\n      /** @type {?} */\n      var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n      /** @type {?} */\n\n\n      var cachedIcon = this._cachedIconsByUrl.get(url);\n\n      if (cachedIcon) {\n        return of(cloneSvg(cachedIcon));\n      }\n\n      return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(function (svg) {\n        return _this._cachedIconsByUrl.set(\n        /** @type {?} */\n        url, svg);\n      }), map(function (svg) {\n        return cloneSvg(svg);\n      }));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getNamedSvgIcon\",\n    value: function getNamedSvgIcon(name) {\n      var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      // Return (copy of) cached icon if possible.\n\n      /** @type {?} */\n      var key = iconKey(namespace, name);\n      /** @type {?} */\n\n      var config = this._svgIconConfigs.get(key);\n\n      if (config) {\n        return this._getSvgFromConfig(config);\n      } // See if we have any icon sets registered for the namespace.\n\n      /** @type {?} */\n\n\n      var iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n      if (iconSetConfigs) {\n        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n      }\n\n      return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._svgIconConfigs.clear();\n\n      this._iconSetConfigs.clear();\n\n      this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSvgFromConfig\",\n    value: function _getSvgFromConfig(config) {\n      if (config.svgElement) {\n        // We already have the SVG element for this icon, return a copy.\n        return of(cloneSvg(config.svgElement));\n      } else {\n        // Fetch the icon from the config's URL, cache it, and return a copy.\n        return this._loadSvgIconFromConfig(config).pipe(tap(function (svg) {\n          return config.svgElement = svg;\n        }), map(function (svg) {\n          return cloneSvg(svg);\n        }));\n      }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSvgFromIconSetConfigs\",\n    value: function _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n      var _this2 = this;\n\n      // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n      // requested name.\n\n      /** @type {?} */\n      var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (namedIcon) {\n        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n        // time anyway, there's probably not much advantage compared to just always extracting\n        // it from the icon set.\n        return of(namedIcon);\n      } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n      // fetched, fetch them now and look for iconName in the results.\n\n      /** @type {?} */\n\n\n      var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {\n        return !iconSetConfig.svgElement;\n      }).map(function (iconSetConfig) {\n        return _this2._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(function (err) {\n          /** @type {?} */\n          var url = _this2._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n          // combined Observable won't necessarily fail.\n\n\n          console.error(\"Loading icon set URL: \".concat(url, \" failed: \").concat(err.message));\n          return of(null);\n        }));\n      }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n      // cached SVG element (unless the request failed), and we can check again for the icon.\n\n      return forkJoin(iconSetFetchRequests).pipe(map(function () {\n        /** @type {?} */\n        var foundIcon = _this2._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n        if (!foundIcon) {\n          throw getMatIconNameNotFoundError(name);\n        }\n\n        return foundIcon;\n      }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_extractIconWithNameFromAnySet\",\n    value: function _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n      // Iterate backwards, so icon sets added later have precedence.\n      for (var i = iconSetConfigs.length - 1; i >= 0; i--) {\n        /** @type {?} */\n        var config = iconSetConfigs[i];\n\n        if (config.svgElement) {\n          /** @type {?} */\n          var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n\n          if (foundIcon) {\n            return foundIcon;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_loadSvgIconFromConfig\",\n    value: function _loadSvgIconFromConfig(config) {\n      var _this3 = this;\n\n      return this._fetchUrl(config.url).pipe(map(function (svgText) {\n        return _this3._createSvgElementForSingleIcon(svgText);\n      }));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_loadSvgIconSetFromConfig\",\n    value: function _loadSvgIconSetFromConfig(config) {\n      var _this4 = this;\n\n      // If the SVG for this icon set has already been parsed, do nothing.\n      if (config.svgElement) {\n        return of(config.svgElement);\n      }\n\n      return this._fetchUrl(config.url).pipe(map(function (svgText) {\n        // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n        // only needs to occur if the cache is yet unset.\n        if (!config.svgElement) {\n          config.svgElement = _this4._svgElementFromString(svgText);\n        }\n\n        return config.svgElement;\n      }));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createSvgElementForSingleIcon\",\n    value: function _createSvgElementForSingleIcon(responseText) {\n      /** @type {?} */\n      var svg = this._svgElementFromString(responseText);\n\n      this._setSvgAttributes(svg);\n\n      return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @return {?}\n     */\n\n  }, {\n    key: \"_extractSvgIconFromSet\",\n    value: function _extractSvgIconFromSet(iconSet, iconName) {\n      /** @type {?} */\n      var iconSource = iconSet.querySelector('#' + iconName);\n\n      if (!iconSource) {\n        return null;\n      } // Clone the element and remove the ID to prevent multiple elements from being added\n      // to the page with the same ID.\n\n      /** @type {?} */\n\n\n      var iconElement =\n      /** @type {?} */\n      iconSource.cloneNode(true);\n      iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n      // the content of a new <svg> node.\n\n      if (iconElement.nodeName.toLowerCase() === 'svg') {\n        return this._setSvgAttributes(\n        /** @type {?} */\n        iconElement);\n      } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n      // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n      // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n      if (iconElement.nodeName.toLowerCase() === 'symbol') {\n        return this._setSvgAttributes(this._toSvgElement(iconElement));\n      } // createElement('SVG') doesn't work as expected; the DOM ends up with\n      // the correct nodes, but the SVG content doesn't render. Instead we\n      // have to create an empty SVG node using innerHTML and append its content.\n      // Elements created using DOMParser.parseFromString have the same problem.\n      // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n      /** @type {?} */\n\n\n      var svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n      svg.appendChild(iconElement);\n      return this._setSvgAttributes(svg);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n\n  }, {\n    key: \"_svgElementFromString\",\n    value: function _svgElementFromString(str) {\n      /** @type {?} */\n      var div = this._document.createElement('DIV');\n\n      div.innerHTML = str;\n      /** @type {?} */\n\n      var svg =\n      /** @type {?} */\n      div.querySelector('svg');\n\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n\n      return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toSvgElement\",\n    value: function _toSvgElement(element) {\n      /** @type {?} */\n      var svg = this._svgElementFromString('<svg></svg>');\n\n      for (var i = 0; i < element.childNodes.length; i++) {\n        if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n          svg.appendChild(element.childNodes[i].cloneNode(true));\n        }\n      }\n\n      return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSvgAttributes\",\n    value: function _setSvgAttributes(svg) {\n      svg.setAttribute('fit', '');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n      return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n\n  }, {\n    key: \"_fetchUrl\",\n    value: function _fetchUrl(safeUrl) {\n      var _this5 = this;\n\n      if (!this._httpClient) {\n        throw getMatIconNoHttpProviderError();\n      }\n\n      if (safeUrl == null) {\n        throw Error(\"Cannot fetch icon from URL \\\"\".concat(safeUrl, \"\\\".\"));\n      }\n      /** @type {?} */\n\n\n      var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n      // already a request in progress for that URL. It's necessary to call share() on the\n      // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n      /** @type {?} */\n\n\n      var inProgressFetch = this._inProgressUrlFetches.get(url);\n\n      if (inProgressFetch) {\n        return inProgressFetch;\n      } // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n      // Observable. Figure out why and fix it.\n\n      /** @type {?} */\n\n\n      var req = this._httpClient.get(url, {\n        responseType: 'text'\n      }).pipe(finalize(function () {\n        return _this5._inProgressUrlFetches.delete(url);\n      }), share());\n\n      this._inProgressUrlFetches.set(url, req);\n\n      return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"_addSvgIconConfig\",\n    value: function _addSvgIconConfig(namespace, iconName, config) {\n      /** @type {?} */\n      this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"_addSvgIconSetConfig\",\n    value: function _addSvgIconSetConfig(namespace, config) {\n      /** @type {?} */\n      var configNamespace =\n      /** @type {?} */\n      this._iconSetConfigs.get(namespace);\n\n      if (configNamespace) {\n        configNamespace.push(config);\n      } else {\n        /** @type {?} */\n        this._iconSetConfigs.set(namespace, [config]);\n      }\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n  }]);\n\n  return MatIconRegistry;\n}();\n\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n  return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n\nMatIconRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MatIconRegistry,\n  factory: MatIconRegistry.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMatIconRegistry.ctorParameters = function () {\n  return [{\n    type: HttpClient,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: DomSanitizer\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nMatIconRegistry.ngInjectableDef = defineInjectable({\n  factory: function MatIconRegistry_Factory() {\n    return new MatIconRegistry(inject(HttpClient, 8), inject(DomSanitizer), inject(DOCUMENT, 8));\n  },\n  token: MatIconRegistry,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @return {?}\n */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, [new Optional(),\n  /** @type {?} */\n  DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\n\nfunction cloneSvg(svg) {\n  return (\n    /** @type {?} */\n    svg.cloneNode(true)\n  );\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatIconBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatIconBase(_elementRef) {\n  _classCallCheck(this, MatIconBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  /** @type {?} */\n  var _document = inject(DOCUMENT);\n  /** @type {?} */\n\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\n\n\nvar funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nvar ɵ0 = function ɵ0(attr) {\n  return \"[\".concat(attr, \"]\");\n};\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\n\n\nvar funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\n\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nvar MatIcon = /*#__PURE__*/function (_MatIconMixinBase2) {\n  _inherits(MatIcon, _MatIconMixinBase2);\n\n  var _super = _createSuper(MatIcon);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _iconRegistry\n   * @param {?} ariaHidden\n   * @param {?=} _location\n   */\n  function MatIcon(elementRef, _iconRegistry, ariaHidden, _location) {\n    var _this6;\n\n    _classCallCheck(this, MatIcon);\n\n    _this6 = _super.call(this, elementRef);\n    _this6._iconRegistry = _iconRegistry;\n    _this6._location = _location;\n    _this6._inline = false; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n\n    return _this6;\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   * @return {?}\n   */\n\n\n  _createClass(MatIcon, [{\n    key: \"_splitIconName\",\n\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n    value: function _splitIconName(iconName) {\n      if (!iconName) {\n        return ['', ''];\n      }\n      /** @type {?} */\n\n\n      var parts = iconName.split(':');\n\n      switch (parts.length) {\n        case 1:\n          return ['', parts[0]];\n        // Use default namespace.\n\n        case 2:\n          return (\n            /** @type {?} */\n            parts\n          );\n\n        default:\n          throw Error(\"Invalid icon name: \\\"\".concat(iconName, \"\\\"\"));\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this7 = this;\n\n      // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n\n      /** @type {?} */\n      var svgIconChanges = changes['svgIcon'];\n\n      if (svgIconChanges) {\n        if (this.svgIcon) {\n          var _this$_splitIconName = this._splitIconName(this.svgIcon),\n              _this$_splitIconName2 = _slicedToArray(_this$_splitIconName, 2),\n              namespace = _this$_splitIconName2[0],\n              iconName = _this$_splitIconName2[1];\n\n          this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(function (svg) {\n            return _this7._setSvgElement(svg);\n          }, function (err) {\n            return console.log(\"Error retrieving icon: \".concat(err.message));\n          });\n        } else if (svgIconChanges.previousValue) {\n          this._clearSvgElement();\n        }\n      }\n\n      if (this._usingFontIcon()) {\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n      // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n      if (this._usingFontIcon()) {\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      /** @type {?} */\n      var cachedElements = this._elementsWithExternalReferences;\n\n      if (cachedElements && this._location && cachedElements.size) {\n        /** @type {?} */\n        var newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n        // the browser doesn't have an API that will let us react on link clicks and\n        // we can't depend on the Angular router. The references need to be updated,\n        // because while most browsers don't care whether the URL is correct after\n        // the first render, Safari will break if the user navigates to a different\n        // page and the SVG isn't re-rendered.\n\n\n        if (newPath !== this._previousPath) {\n          this._previousPath = newPath;\n\n          this._prependPathToReferences(newPath);\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_usingFontIcon\",\n    value: function _usingFontIcon() {\n      return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSvgElement\",\n    value: function _setSvgElement(svg) {\n      this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n      // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n      // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n\n      /** @type {?} */\n\n\n      var styleTags =\n      /** @type {?} */\n      svg.querySelectorAll('style');\n\n      for (var i = 0; i < styleTags.length; i++) {\n        styleTags[i].textContent += ' ';\n      } // Note: we do this fix here, rather than the icon registry, because the\n      // references have to point to the URL at the time that the icon was created.\n\n\n      if (this._location) {\n        /** @type {?} */\n        var path = this._location.getPathname();\n\n        this._previousPath = path;\n\n        this._cacheChildrenWithExternalReferences(svg);\n\n        this._prependPathToReferences(path);\n      }\n\n      this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearSvgElement\",\n    value: function _clearSvgElement() {\n      /** @type {?} */\n      var layoutElement = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var childCount = layoutElement.childNodes.length;\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n      // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n      while (childCount--) {\n        /** @type {?} */\n        var child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n          layoutElement.removeChild(child);\n        }\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateFontIconClasses\",\n    value: function _updateFontIconClasses() {\n      if (!this._usingFontIcon()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var elem = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n      if (fontSetClass != this._previousFontSetClass) {\n        if (this._previousFontSetClass) {\n          elem.classList.remove(this._previousFontSetClass);\n        }\n\n        if (fontSetClass) {\n          elem.classList.add(fontSetClass);\n        }\n\n        this._previousFontSetClass = fontSetClass;\n      }\n\n      if (this.fontIcon != this._previousFontIconClass) {\n        if (this._previousFontIconClass) {\n          elem.classList.remove(this._previousFontIconClass);\n        }\n\n        if (this.fontIcon) {\n          elem.classList.add(this.fontIcon);\n        }\n\n        this._previousFontIconClass = this.fontIcon;\n      }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cleanupFontValue\",\n    value: function _cleanupFontValue(value) {\n      return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n\n  }, {\n    key: \"_prependPathToReferences\",\n    value: function _prependPathToReferences(path) {\n      /** @type {?} */\n      var elements = this._elementsWithExternalReferences;\n\n      if (elements) {\n        elements.forEach(function (attrs, element) {\n          attrs.forEach(function (attr) {\n            element.setAttribute(attr.name, \"url('\".concat(path, \"#\").concat(attr.value, \"')\"));\n          });\n        });\n      }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheChildrenWithExternalReferences\",\n    value: function _cacheChildrenWithExternalReferences(element) {\n      /** @type {?} */\n      var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n      /** @type {?} */\n\n      var elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n      var _loop = function _loop(i) {\n        funcIriAttributes.forEach(function (attr) {\n          /** @type {?} */\n          var elementWithReference = elementsWithFuncIri[i];\n          /** @type {?} */\n\n          var value = elementWithReference.getAttribute(attr);\n          /** @type {?} */\n\n          var match = value ? value.match(funcIriPattern) : null;\n\n          if (match) {\n            /** @type {?} */\n            var attributes = elements.get(elementWithReference);\n\n            if (!attributes) {\n              attributes = [];\n              elements.set(elementWithReference, attributes);\n            }\n\n            /** @type {?} */\n            attributes.push({\n              name: attr,\n              value: match[1]\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < elementsWithFuncIri.length; i++) {\n        _loop(i);\n      }\n    }\n  }, {\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    ,\n    set: function set(inline) {\n      this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n\n  }, {\n    key: \"fontSet\",\n    get: function get() {\n      return this._fontSet;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n\n  }, {\n    key: \"fontIcon\",\n    get: function get() {\n      return this._fontIcon;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._fontIcon = this._cleanupFontValue(value);\n    }\n  }]);\n\n  return MatIcon;\n}(_MatIconMixinBase);\n\nMatIcon.ɵfac = function MatIcon_Factory(t) {\n  return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8));\n};\n\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatIcon,\n  selectors: [[\"mat-icon\"]],\n  hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n  hostVars: 4,\n  hostBindings: function MatIcon_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    }\n  },\n  inputs: {\n    color: \"color\",\n    inline: \"inline\",\n    fontSet: \"fontSet\",\n    fontIcon: \"fontIcon\",\n    svgIcon: \"svgIcon\"\n  },\n  exportAs: [\"matIcon\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatIcon.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: MatIconRegistry\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['aria-hidden']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_ICON_LOCATION]\n    }]\n  }];\n};\n\nMatIcon.propDecorators = {\n  inline: [{\n    type: Input\n  }],\n  svgIcon: [{\n    type: Input\n  }],\n  fontSet: [{\n    type: Input\n  }],\n  fontIcon: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon notranslate',\n        '[class.mat-icon-inline]': 'inline',\n        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatIconModule = function MatIconModule() {\n  _classCallCheck(this, MatIconModule);\n};\n\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatIconModule\n});\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatIconModule_Factory(t) {\n    return new (t || MatIconModule)();\n  },\n  imports: [[MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function declarations() {\n      return [MatIcon];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MatIconBase, _MatIconMixinBase, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };","map":{"version":3,"sources":["../../../src/lib/icon/icon-registry.ts","../../../src/lib/icon/icon.ts","../../../src/lib/icon/icon-module.ts"],"names":["observableOf","observableThrow"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry implements OnDestroy {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  ngOnDestroy() {\n   this._svgIconConfigs.clear();\n   this._iconSetConfigs.clear();\n   this._cachedIconsByUrl.clear();\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon notranslate',\n    '[class.mat-icon-inline]': 'inline',\n    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    const svgIconChanges = changes['svgIcon'];\n\n    if (svgIconChanges) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else if (svgIconChanges.previousValue) {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n"]},"metadata":{},"sourceType":"module"}