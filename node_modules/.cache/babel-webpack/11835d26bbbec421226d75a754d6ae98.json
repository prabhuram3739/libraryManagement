{"ast":null,"code":"import _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for radio components.\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\nvar nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatRadioGroup;\n  }),\n  multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\n\nvar MatRadioChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatRadioChange(source, value) {\n  _classCallCheck(this, MatRadioChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n\n\nvar MatRadioGroup = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetector\n   */\n  function MatRadioGroup(_changeDetector) {\n    _classCallCheck(this, MatRadioGroup);\n\n    this._changeDetector = _changeDetector;\n    /**\n     * Selected value for the radio group.\n     */\n\n    this._value = null;\n    /**\n     * The HTML name attribute applied to radio buttons in this group.\n     */\n\n    this._name = \"mat-radio-group-\".concat(nextUniqueId++);\n    /**\n     * The currently selected radio button. Should match value.\n     */\n\n    this._selected = null;\n    /**\n     * Whether the `value` has been set to its initial value.\n     */\n\n    this._isInitialized = false;\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     */\n\n    this._labelPosition = 'after';\n    /**\n     * Whether the radio group is disabled.\n     */\n\n    this._disabled = false;\n    /**\n     * Whether the radio group is required.\n     */\n\n    this._required = false;\n    /**\n     * The method to be called in order to update ngModel\n     */\n\n    this._controlValueAccessorChangeFn = function () {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * \\@docs-private\n     */\n\n\n    this.onTouched = function () {};\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n\n    this.change = new EventEmitter();\n  }\n  /**\n   * Name of the radio button group. All radio buttons inside this group will use this name.\n   * @return {?}\n   */\n\n\n  _createClass(MatRadioGroup, [{\n    key: \"_checkSelectedRadioButton\",\n\n    /**\n     * @return {?}\n     */\n    value: function _checkSelectedRadioButton() {\n      if (this._selected && !this._selected.checked) {\n        this._selected.checked = true;\n      }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      // Mark this component as initialized in AfterContentInit because the initial value can\n      // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n      // NgModel occurs *after* the OnInit of the MatRadioGroup.\n      this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_touch\",\n    value: function _touch() {\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateRadioButtonNames\",\n    value: function _updateRadioButtonNames() {\n      var _this = this;\n\n      if (this._radios) {\n        this._radios.forEach(function (radio) {\n          radio.name = _this.name;\n\n          radio._markForCheck();\n        });\n      }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateSelectedRadioFromValue\",\n    value: function _updateSelectedRadioFromValue() {\n      var _this2 = this;\n\n      // If the value already matches the selected radio, do nothing.\n\n      /** @type {?} */\n      var isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n      if (this._radios && !isAlreadySelected) {\n        this._selected = null;\n\n        this._radios.forEach(function (radio) {\n          radio.checked = _this2.value === radio.value;\n\n          if (radio.checked) {\n            _this2._selected = radio;\n          }\n        });\n      }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      if (this._isInitialized) {\n        this.change.emit(new MatRadioChange(\n        /** @type {?} */\n        this._selected, this._value));\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markRadiosForCheck\",\n    value: function _markRadiosForCheck() {\n      if (this._radios) {\n        this._radios.forEach(function (radio) {\n          return radio._markForCheck();\n        });\n      }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetector.markForCheck();\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._name = value;\n\n      this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n\n  }, {\n    key: \"labelPosition\",\n    get: function get() {\n      return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._labelPosition = v === 'before' ? 'before' : 'after';\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      if (this._value !== newValue) {\n        // Set this before proceeding to ensure no circular loop occurs with selection.\n        this._value = newValue;\n\n        this._updateSelectedRadioFromValue();\n\n        this._checkSelectedRadioButton();\n      }\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    ,\n    set: function set(selected) {\n      this._selected = selected;\n      this.value = selected ? selected.value : null;\n\n      this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n  }]);\n\n  return MatRadioGroup;\n}();\n\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) {\n  return new (t || MatRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatRadioGroup,\n  selectors: [[\"mat-radio-group\"]],\n  contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"],\n  inputs: {\n    name: \"name\",\n    labelPosition: \"labelPosition\",\n    value: \"value\",\n    selected: \"selected\",\n    disabled: \"disabled\",\n    required: \"required\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matRadioGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR])]\n});\n/** @nocollapse */\n\nMatRadioGroup.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nMatRadioGroup.propDecorators = {\n  change: [{\n    type: Output\n  }],\n  _radios: [{\n    type: ContentChildren,\n    args: [forwardRef(function () {\n      return MatRadioButton;\n    }), {\n      descendants: true\n    }]\n  }],\n  name: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-radio-group',\n      exportAs: 'matRadioGroup',\n      providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n      host: {\n        'role': 'radiogroup',\n        'class': 'mat-radio-group'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    change: [{\n      type: Output\n    }],\n    name: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    _radios: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return MatRadioButton;\n      }), {\n        descendants: true\n      }]\n    }]\n  });\n})(); // Boilerplate for applying mixins to MatRadioButton.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatRadioButtonBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatRadioButtonBase(_elementRef) {\n  _classCallCheck(this, MatRadioButtonBase);\n\n  this._elementRef = _elementRef;\n}; // As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n\n/** @type {?} */\n\n\nvar _MatRadioButtonMixinBase = mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n\n\nvar MatRadioButton = /*#__PURE__*/function (_MatRadioButtonMixinB) {\n  _inherits(MatRadioButton, _MatRadioButtonMixinB);\n\n  var _super = _createSuper(MatRadioButton);\n\n  /**\n   * @param {?} radioGroup\n   * @param {?} elementRef\n   * @param {?} _changeDetector\n   * @param {?} _focusMonitor\n   * @param {?} _radioDispatcher\n   * @param {?=} _animationMode\n   */\n  function MatRadioButton(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode) {\n    var _this3;\n\n    _classCallCheck(this, MatRadioButton);\n\n    _this3 = _super.call(this, elementRef);\n    _this3._changeDetector = _changeDetector;\n    _this3._focusMonitor = _focusMonitor;\n    _this3._radioDispatcher = _radioDispatcher;\n    _this3._animationMode = _animationMode;\n    _this3._uniqueId = \"mat-radio-\".concat(++nextUniqueId);\n    /**\n     * The unique ID for the radio button.\n     */\n\n    _this3.id = _this3._uniqueId;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n    _this3.change = new EventEmitter();\n    /**\n     * Whether this radio is checked.\n     */\n\n    _this3._checked = false;\n    /**\n     * Value assigned to this radio.\n     */\n\n    _this3._value = null;\n    /**\n     * Unregister function for _radioDispatcher\n     */\n\n    _this3._removeUniqueSelectionListener = function () {}; // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n    _this3.radioGroup = radioGroup;\n    _this3._removeUniqueSelectionListener = _radioDispatcher.listen(function (id, name) {\n      if (id !== _this3.id && name === _this3.name) {\n        _this3.checked = false;\n      }\n    });\n    return _this3;\n  }\n  /**\n   * Whether this radio button is checked.\n   * @return {?}\n   */\n\n\n  _createClass(MatRadioButton, [{\n    key: \"focus\",\n\n    /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n    value: function focus() {\n      this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n      // update radio button's status\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.radioGroup) {\n        // If the radio is inside a radio group, determine if it should be checked\n        this.checked = this.radioGroup.value === this._value; // Copy name from parent radio group\n\n        this.name = this.radioGroup.name;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this4 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(function (focusOrigin) {\n        if (!focusOrigin && _this4.radioGroup) {\n          _this4.radioGroup._touch();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `radio-button` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputChange\",\n    value: function _onInputChange(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the `change` output.\n      event.stopPropagation();\n      /** @type {?} */\n\n      var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n      this.checked = true;\n\n      this._emitChangeEvent();\n\n      if (this.radioGroup) {\n        this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n        if (groupValueChanged) {\n          this.radioGroup._emitChangeEvent();\n        }\n      }\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newCheckedState = coerceBooleanProperty(value);\n\n      if (this._checked !== newCheckedState) {\n        this._checked = newCheckedState;\n\n        if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n          this.radioGroup.selected = this;\n        } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n          // When unchecking the selected radio button, update the selected radio\n          // property on the group.\n          this.radioGroup.selected = null;\n        }\n\n        if (newCheckedState) {\n          // Notify all radio buttons with the same name to un-check.\n          this._radioDispatcher.notify(this.id, this.name);\n        }\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (this._value !== value) {\n        this._value = value;\n\n        if (this.radioGroup !== null) {\n          if (!this.checked) {\n            // Update checked when the value changed to match the radio group's value\n            this.checked = this.radioGroup.value === value;\n          }\n\n          if (this.checked) {\n            this.radioGroup.selected = this;\n          }\n        }\n      }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n\n  }, {\n    key: \"labelPosition\",\n    get: function get() {\n      return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newDisabledState = coerceBooleanProperty(value);\n\n      if (this._disabled !== newDisabledState) {\n        this._disabled = newDisabledState;\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required || this.radioGroup && this.radioGroup.required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n  }]);\n\n  return MatRadioButton;\n}(_MatRadioButtonMixinBase);\n\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) {\n  return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatRadioButton,\n  selectors: [[\"mat-radio-button\"]],\n  viewQuery: function MatRadioButton_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-radio-button\"],\n  hostVars: 8,\n  hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n        return ctx._inputElement.nativeElement.focus();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    id: \"id\",\n    checked: \"checked\",\n    value: \"value\",\n    labelPosition: \"labelPosition\",\n    disabled: \"disabled\",\n    required: \"required\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matRadioButton\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 13,\n  vars: 18,\n  consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]],\n  template: function MatRadioButton_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵelement(3, \"div\", 3);\n      ɵngcc0.ɵɵelement(4, \"div\", 4);\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n      ɵngcc0.ɵɵelement(6, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"input\", 7, 8);\n      ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_7_listener($event) {\n        return ctx._onInputChange($event);\n      })(\"click\", function MatRadioButton_Template_input_click_7_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n      ɵngcc0.ɵɵtext(11, \"\\xA0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(12);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c1));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    }\n  },\n  directives: [ɵngcc3.MatRipple],\n  styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}@media (hover:none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}@media (-ms-high-contrast:active){.mat-radio-disabled{opacity:.5}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatRadioButton.ctorParameters = function () {\n  return [{\n    type: MatRadioGroup,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: UniqueSelectionDispatcher\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatRadioButton.propDecorators = {\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  checked: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'mat-radio-button',\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label><div class=\\\"mat-radio-container\\\"><div class=\\\"mat-radio-outer-circle\\\"></div><div class=\\\"mat-radio-inner-circle\\\"></div><div mat-ripple class=\\\"mat-radio-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div></div><input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [tabIndex]=\\\"tabIndex\\\" [attr.name]=\\\"name\\\" [required]=\\\"required\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-describedby]=\\\"ariaDescribedby\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"></div><div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></div></label>\",\n      styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}@media (hover:none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}@media (-ms-high-contrast:active){.mat-radio-disabled{opacity:.5}}\"],\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRadioButton',\n      host: {\n        'class': 'mat-radio-button',\n        '[class.mat-radio-checked]': 'checked',\n        '[class.mat-radio-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        // Needs to be -1 so the `focus` event still fires.\n        '[attr.tabindex]': '-1',\n        '[attr.id]': 'id',\n        // Note: under normal conditions focus shouldn't land on this element, however it may be\n        // programmatically set, for example inside of a focus trap, in this case we want to forward\n        // the focus to the native element.\n        '(focus)': '_inputElement.nativeElement.focus()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: MatRadioGroup,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc2.UniqueSelectionDispatcher\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    checked: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatRadioModule = function MatRadioModule() {\n  _classCallCheck(this, MatRadioModule);\n};\n\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatRadioModule\n});\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatRadioModule_Factory(t) {\n    return new (t || MatRadioModule)();\n  },\n  imports: [[CommonModule, MatRippleModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, {\n    declarations: function declarations() {\n      return [MatRadioGroup, MatRadioButton];\n    },\n    imports: function imports() {\n      return [CommonModule, MatRippleModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatRadioGroup, MatRadioButton, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatRippleModule, MatCommonModule],\n      exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n      declarations: [MatRadioGroup, MatRadioButton]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatRadioModule, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroup, MatRadioButtonBase, _MatRadioButtonMixinBase, MatRadioButton };","map":{"version":3,"sources":["../../../src/lib/radio/radio.ts","../../../src/lib/radio/radio-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n"]},"metadata":{},"sourceType":"module"}