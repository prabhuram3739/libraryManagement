{"ast":null,"code":"import _toConsumableArray from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/common';\nvar _c0 = [\"trigger\"];\nvar _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\xA0\");\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\xA0\");\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n  }\n}\n\nvar _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nvar _c3 = [\"mat-select-trigger\", \"*\"];\nvar matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * \\@breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [state('showing', style({\n    opacity: 1\n  })), transition('void => showing', [style({\n    opacity: 0\n  }), animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nvar transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nvar fadeInContent = matSelectAnimations.fadeInContent;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\n\nvar SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\n\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\n\nvar SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\n\nvar SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\n\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\n\nvar MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\n\nvar MatSelectChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatSelectChange(source, value) {\n  _classCallCheck(this, MatSelectChange);\n\n  this.source = source;\n  this.value = value;\n}; // Boilerplate for applying mixins to MatSelect.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSelectBase =\n/**\n * @param {?} _elementRef\n * @param {?} _defaultErrorStateMatcher\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nfunction MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatSelectBase);\n\n  this._elementRef = _elementRef;\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n/** @type {?} */\n\n\nvar _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\n\nvar MatSelectTrigger = function MatSelectTrigger() {\n  _classCallCheck(this, MatSelectTrigger);\n};\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger'\n    }]\n  }], null, null);\n})();\n\nvar MatSelect = /*#__PURE__*/function (_MatSelectMixinBase2) {\n  _inherits(MatSelect, _MatSelectMixinBase2);\n\n  var _super = _createSuper(MatSelect);\n\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _changeDetectorRef\n   * @param {?} _ngZone\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} elementRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _parentFormField\n   * @param {?} ngControl\n   * @param {?} tabIndex\n   * @param {?} scrollStrategyFactory\n   * @param {?=} _liveAnnouncer\n   */\n  function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n    var _this;\n\n    _classCallCheck(this, MatSelect);\n\n    _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._viewportRuler = _viewportRuler;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._ngZone = _ngZone;\n    _this._dir = _dir;\n    _this._parentFormField = _parentFormField;\n    _this.ngControl = ngControl;\n    _this._liveAnnouncer = _liveAnnouncer;\n    /**\n     * Whether or not the overlay panel is open.\n     */\n\n    _this._panelOpen = false;\n    /**\n     * Whether filling out the select is required in the form.\n     */\n\n    _this._required = false;\n    /**\n     * The scroll position of the overlay panel, calculated to center the selected option.\n     */\n\n    _this._scrollTop = 0;\n    /**\n     * Whether the component is in multiple selection mode.\n     */\n\n    _this._multiple = false;\n    /**\n     * Comparison function to specify which option is displayed. Defaults to object equality.\n     */\n\n    _this._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n    /**\n     * Unique id for this input.\n     */\n\n\n    _this._uid = \"mat-select-\".concat(nextUniqueId++);\n    /**\n     * Emits whenever the component is destroyed.\n     */\n\n    _this._destroy = new Subject();\n    /**\n     * The cached font-size of the trigger element.\n     */\n\n    _this._triggerFontSize = 0;\n    /**\n     * `View -> model callback called when value changes`\n     */\n\n    _this._onChange = function () {};\n    /**\n     * `View -> model callback called when select has been touched`\n     */\n\n\n    _this._onTouched = function () {};\n    /**\n     * The IDs of child options to be passed to the aria-owns attribute.\n     */\n\n\n    _this._optionIds = '';\n    /**\n     * The value of the select panel's transform-origin property.\n     */\n\n    _this._transformOrigin = 'top';\n    /**\n     * Emits when the panel element is finished transforming in.\n     */\n\n    _this._panelDoneAnimatingStream = new Subject();\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n\n    _this._offsetY = 0;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n\n    _this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n    /**\n     * Whether the component is disabling centering of the active option over the trigger.\n     */\n\n    _this._disableOptionCentering = false;\n    _this._focused = false;\n    /**\n     * A name for this control that can be used by `mat-form-field`.\n     */\n\n    _this.controlType = 'mat-select';\n    /**\n     * Aria label of the select. If not specified, the placeholder will be used as label.\n     */\n\n    _this.ariaLabel = '';\n    /**\n     * Combined stream of all of the child options' change events.\n     */\n\n    _this.optionSelectionChanges = defer(function () {\n      if (_this.options) {\n        return merge.apply(void 0, _toConsumableArray(_this.options.map(function (option) {\n          return option.onSelectionChange;\n        })));\n      }\n\n      return _this._ngZone.onStable.asObservable().pipe(take(1), switchMap(function () {\n        return _this.optionSelectionChanges;\n      }));\n    });\n    /**\n     * Event emitted when the select panel has been toggled.\n     */\n\n    _this.openedChange = new EventEmitter();\n    /**\n     * Event emitted when the select has been opened.\n     */\n\n    _this._openedStream = _this.openedChange.pipe(filter(function (o) {\n      return o;\n    }), map(function () {}));\n    /**\n     * Event emitted when the select has been closed.\n     */\n\n    _this._closedStream = _this.openedChange.pipe(filter(function (o) {\n      return !o;\n    }), map(function () {}));\n    /**\n     * Event emitted when the selected value has been changed by the user.\n     */\n\n    _this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n\n    if (_this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      _this.ngControl.valueAccessor = _assertThisInitialized(_this);\n    }\n\n    _this._scrollStrategyFactory = scrollStrategyFactory;\n    _this._scrollStrategy = _this._scrollStrategyFactory();\n    _this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id;\n    return _this;\n  }\n  /**\n   * Whether the select is focused.\n   * @return {?}\n   */\n\n\n  _createClass(MatSelect, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n      // fire the animation end event twice for the same animation. See:\n      // https://github.com/angular/angular/issues/24084\n\n      this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(function () {\n        if (_this2.panelOpen) {\n          _this2._scrollTop = 0;\n\n          _this2.openedChange.emit(true);\n        } else {\n          _this2.openedChange.emit(false);\n\n          _this2.overlayDir.offsetX = 0;\n\n          _this2._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this3 = this;\n\n      this._initKeyManager();\n\n      this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n        event.added.forEach(function (option) {\n          return option.select();\n        });\n        event.removed.forEach(function (option) {\n          return option.deselect();\n        });\n      });\n\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n        _this3._resetOptions();\n\n        _this3._initializeSelection();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        this.updateErrorState();\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes['disabled']) {\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n\n      this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this4 = this;\n\n      if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n        return;\n      }\n\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n      this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n      this._panelOpen = true;\n\n      this._keyManager.withHorizontalOrientation(null);\n\n      this._calculateOverlayPosition();\n\n      this._highlightCorrectOption();\n\n      this._changeDetectorRef.markForCheck(); // Set the font size on the panel element once it exists.\n\n\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n        if (_this4._triggerFontSize && _this4.overlayDir.overlayRef && _this4.overlayDir.overlayRef.overlayElement) {\n          _this4.overlayDir.overlayRef.overlayElement.style.fontSize = \"\".concat(_this4._triggerFontSize, \"px\");\n        }\n      });\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._changeDetectorRef.markForCheck();\n\n        this._onTouched();\n      }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.options) {\n        this._setSelectionByValue(value);\n      }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    value: function _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClosedKeydown\",\n    value: function _handleClosedKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      /** @type {?} */\n\n      var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n      /** @type {?} */\n\n      var manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n      if (isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n        this.open();\n      } else if (!this.multiple) {\n        /** @type {?} */\n        var selectedOption = this.selected;\n\n        if (keyCode === HOME || keyCode === END) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        } // Since the value has changed, we need to announce it ourselves.\n        // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n\n\n        if (this._liveAnnouncer && selectedOption !== this.selected) {\n          this._liveAnnouncer.announce(\n          /** @type {?} */\n          this.selected.viewValue);\n        }\n      }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleOpenKeydown\",\n    value: function _handleOpenKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      /** @type {?} */\n\n      var manager = this._keyManager;\n\n      if (keyCode === HOME || keyCode === END) {\n        event.preventDefault();\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n      } else if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close();\n      } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n        event.preventDefault();\n\n        manager.activeItem._selectViaInteraction();\n      } else if (this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        /** @type {?} */\n\n        var hasDeselectedOptions = this.options.some(function (opt) {\n          return !opt.disabled && !opt.selected;\n        });\n        this.options.forEach(function (option) {\n          if (!option.disabled) {\n            hasDeselectedOptions ? option.select() : option.deselect();\n          }\n        });\n      } else {\n        /** @type {?} */\n        var previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      this._focused = false;\n\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAttached\",\n    value: function _onAttached() {\n      var _this5 = this;\n\n      this.overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n        _this5._setPseudoCheckboxPaddingSize();\n\n        _this5._changeDetectorRef.detectChanges();\n\n        _this5._calculateOverlayOffsetX();\n\n        _this5.panel.nativeElement.scrollTop = _this5._scrollTop;\n      });\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPanelTheme\",\n    value: function _getPanelTheme() {\n      return this._parentFormField ? \"mat-\".concat(this._parentFormField.color) : '';\n    } // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setPseudoCheckboxPaddingSize\",\n    value: function _setPseudoCheckboxPaddingSize() {\n      if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n        /** @type {?} */\n        var pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n\n        if (pseudoCheckbox) {\n          SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n        }\n      }\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initializeSelection\",\n\n    /**\n     * @private\n     * @return {?}\n     */\n    value: function _initializeSelection() {\n      var _this6 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        _this6._setSelectionByValue(_this6.ngControl ? _this6.ngControl.value : _this6._value);\n\n        _this6.stateChanges.next();\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this7 = this;\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value)) {\n          throw getMatSelectNonArrayValueError();\n        }\n\n        this._selectionModel.clear();\n\n        value.forEach(function (currentValue) {\n          return _this7._selectValue(currentValue);\n        });\n\n        this._sortValues();\n      } else {\n        this._selectionModel.clear();\n        /** @type {?} */\n\n\n        var correspondingOption = this._selectValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n\n\n        if (correspondingOption) {\n          this._keyManager.setActiveItem(correspondingOption);\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this8 = this;\n\n      /** @type {?} */\n      var correspondingOption = this.options.find(function (option) {\n        try {\n          // Treat null as a special reset value.\n          return option.value != null && _this8._compareWith(option.value, value);\n        } catch (error) {\n          if (isDevMode()) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n\n          return false;\n        }\n      });\n\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n\n      return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initKeyManager\",\n    value: function _initKeyManager() {\n      var _this9 = this;\n\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead().withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withAllowedModifierKeys(['shiftKey']);\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        _this9.focus();\n\n        _this9.close();\n      });\n\n      this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this9._panelOpen && _this9.panel) {\n          _this9._scrollActiveOptionIntoView();\n        } else if (!_this9._panelOpen && !_this9.multiple && _this9._keyManager.activeItem) {\n          _this9._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetOptions\",\n    value: function _resetOptions() {\n      var _this10 = this;\n\n      /** @type {?} */\n      var changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n        _this10._onSelect(event.source, event.isUserInput);\n\n        if (event.isUserInput && !_this10.multiple && _this10._panelOpen) {\n          _this10.close();\n\n          _this10.focus();\n        }\n      }); // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n\n      merge.apply(void 0, _toConsumableArray(this.options.map(function (option) {\n        return option._stateChanges;\n      }))).pipe(takeUntil(changedOrDestroyed)).subscribe(function () {\n        _this10._changeDetectorRef.markForCheck();\n\n        _this10.stateChanges.next();\n      });\n\n      this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onSelect\",\n    value: function _onSelect(option, isUserInput) {\n      /** @type {?} */\n      var wasSelected = this._selectionModel.isSelected(option);\n\n      if (option.value == null && !this._multiple) {\n        option.deselect();\n\n        this._selectionModel.clear();\n\n        this._propagateChanges(option.value);\n      } else {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n\n        if (this.multiple) {\n          this._sortValues();\n\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this11 = this;\n\n      if (this.multiple) {\n        /** @type {?} */\n        var options = this.options.toArray();\n\n        this._selectionModel.sort(function (a, b) {\n          return _this11.sortComparator ? _this11.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n        });\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      /** @type {?} */\n      var valueToEmit = null;\n\n      if (this.multiple) {\n        valueToEmit =\n        /** @type {?} */\n        this.selected.map(function (option) {\n          return option.value;\n        });\n      } else {\n        valueToEmit = this.selected ?\n        /** @type {?} */\n        this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOptionIds\",\n    value: function _setOptionIds() {\n      this._optionIds = this.options.map(function (option) {\n        return option.id;\n      }).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_highlightCorrectOption\",\n    value: function _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          this._keyManager.setFirstItemActive();\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollActiveOptionIntoView\",\n    value: function _scrollActiveOptionIntoView() {\n      /** @type {?} */\n      var activeOptionIndex = this._keyManager.activeItemIndex || 0;\n      /** @type {?} */\n\n      var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n      this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOptionIndex\",\n    value: function _getOptionIndex(option) {\n      return this.options.reduce(function (result, current, index) {\n        return result === undefined ? option === current ? index : undefined : result;\n      }, undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayPosition\",\n    value: function _calculateOverlayPosition() {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var items = this._getItemCount();\n      /** @type {?} */\n\n\n      var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      /** @type {?} */\n\n      var scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n      /** @type {?} */\n\n      var maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n      /** @type {?} */\n\n      var selectedOptionOffset = this.empty ? 0 :\n      /** @type {?} */\n      this._getOptionIndex(this._selectionModel.selected[0]);\n      selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n\n      /** @type {?} */\n\n      var scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n      this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayScroll\",\n    value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n      /** @type {?} */\n\n      var halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n      // scroll container, then subtracts the scroll buffer to scroll the option down to\n      // the center of the overlay panel. Half the option height must be re-added to the\n      // scrollTop so the option is centered based on its middle, not its top edge.\n\n      /** @type {?} */\n\n      var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n      return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaLabel\",\n    value: function _getAriaLabel() {\n      // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n      // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n      return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaLabelledby\",\n    value: function _getAriaLabelledby() {\n      if (this.ariaLabelledby) {\n        return this.ariaLabelledby;\n      } // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n      // computed label. `this.ariaLabel` is only the user-specified label.\n\n\n      if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() || this._getAriaLabel()) {\n        return null;\n      }\n\n      return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaActiveDescendant\",\n    value: function _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetX\",\n    value: function _calculateOverlayOffsetX() {\n      /** @type {?} */\n      var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n      /** @type {?} */\n\n      var viewportSize = this._viewportRuler.getViewportSize();\n      /** @type {?} */\n\n\n      var isRtl = this._isRtl();\n      /** @type {?} */\n\n\n      var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n      /** @type {?} */\n\n      var offsetX; // Adjust the offset, depending on the option padding.\n\n      if (this.multiple) {\n        offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n      } else {\n        /** @type {?} */\n        var selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n      } // Invert the offset in LTR.\n\n\n      if (!isRtl) {\n        offsetX *= -1;\n      } // Determine how much the select overflows on each side.\n\n      /** @type {?} */\n\n\n      var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n      /** @type {?} */\n\n      var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n      if (leftOverflow > 0) {\n        offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } else if (rightOverflow > 0) {\n        offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } // Set the offset directly in order to avoid having to go through change detection and\n      // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n      // blurry content in some browsers.\n\n\n      this.overlayDir.offsetX = Math.round(offsetX);\n      this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetY\",\n    value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      /** @type {?} */\n\n      var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n      /** @type {?} */\n\n      var optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n      if (this._disableOptionCentering) {\n        return 0;\n      }\n\n      if (this._scrollTop === 0) {\n        optionOffsetFromPanelTop = selectedIndex * itemHeight;\n      } else if (this._scrollTop === maxScroll) {\n        /** @type {?} */\n        var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n        /** @type {?} */\n\n        var selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n        // portion of it is shown in the viewport and account for it in our offset.\n\n        /** @type {?} */\n\n        var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n        // there is always extra padding at the top or bottom of the panel. When\n        // scrolled to the very bottom, this padding is at the top of the panel and\n        // must be added to the offset.\n\n        optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n      } else {\n        // If the option was scrolled to the middle of the panel using a scroll buffer,\n        // its offset will be the scroll buffer minus the half height that was added to\n        // center it.\n        optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n      } // The final offset is the option's offset from the top, adjusted for the height difference,\n      // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n      // The value is rounded to prevent some browsers from blurring the content.\n\n\n      return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkOverlayWithinViewport\",\n    value: function _checkOverlayWithinViewport(maxScroll) {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var viewportSize = this._viewportRuler.getViewportSize();\n      /** @type {?} */\n\n\n      var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n      /** @type {?} */\n\n      var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n      /** @type {?} */\n\n      var panelHeightTop = Math.abs(this._offsetY);\n      /** @type {?} */\n\n      var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      /** @type {?} */\n\n      var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n      if (panelHeightBottom > bottomSpaceAvailable) {\n        this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n      } else if (panelHeightTop > topSpaceAvailable) {\n        this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n      } else {\n        this._transformOrigin = this._getOriginBasedOnOption();\n      }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustPanelUp\",\n    value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n\n      /** @type {?} */\n      var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel up into the viewport.\n\n      this._scrollTop -= distanceBelowViewport;\n      this._offsetY -= distanceBelowViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n      // by scrolling, so set the offset to 0 to allow the fallback position to take\n      // effect.\n\n      if (this._scrollTop <= 0) {\n        this._scrollTop = 0;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% bottom 0px\";\n      }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n\n  }, {\n    key: \"_adjustPanelDown\",\n    value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n\n      /** @type {?} */\n      var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel down into the viewport.\n\n      this._scrollTop += distanceAboveViewport;\n      this._offsetY += distanceAboveViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n      // panel by scrolling, so set the offset to 0 to allow the fallback position\n      // to take effect.\n\n      if (this._scrollTop >= maxScroll) {\n        this._scrollTop = maxScroll;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% top 0px\";\n        return;\n      }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOriginBasedOnOption\",\n    value: function _getOriginBasedOnOption() {\n      /** @type {?} */\n      var itemHeight = this._getItemHeight();\n      /** @type {?} */\n\n\n      var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      /** @type {?} */\n\n      var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n      return \"50% \".concat(originY, \"px 0px\");\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemCount\",\n    value: function _getItemCount() {\n      return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getItemHeight\",\n    value: function _getItemHeight() {\n      return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (this._selectionModel) {\n        throw getMatSelectDynamicMultipleError();\n      }\n\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disableOptionCentering\",\n    get: function get() {\n      return this._disableOptionCentering;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      if (typeof fn !== 'function') {\n        throw getMatSelectNonFunctionValueError();\n      }\n\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      if (newValue !== this._value) {\n        this.writeValue(newValue);\n        this._value = newValue;\n      }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n\n  }, {\n    key: \"triggerValue\",\n    get: function get() {\n      if (this.empty) {\n        return '';\n      }\n\n      if (this._multiple) {\n        /** @type {?} */\n        var selectedOptions = this._selectionModel.selected.map(function (option) {\n          return option.viewValue;\n        });\n\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n        return selectedOptions.join(', ');\n      }\n\n      return this._selectionModel.selected[0].viewValue;\n    }\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return this._panelOpen || !this.empty;\n    }\n  }]);\n\n  return MatSelect;\n}(_MatSelectMixinBase);\n\nMatSelect.ɵfac = function MatSelect_Factory(t) {\n  return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LiveAnnouncer));\n};\n\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatSelect_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n      ɵngcc0.ɵɵviewQuery(_c1, true);\n      ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"],\n  hostVars: 19,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    id: \"id\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    panelClass: \"panelClass\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    sortComparator: \"sortComparator\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 9,\n  consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵelement(7, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 10, \"ng-template\", 7);\n      ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  directives: [ɵngcc7.CdkOverlayOrigin, ɵngcc8.NgSwitch, ɵngcc8.NgSwitchCase, ɵngcc7.CdkConnectedOverlay, ɵngcc8.NgSwitchDefault, ɵngcc8.NgClass],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSelect.ctorParameters = function () {\n  return [{\n    type: ViewportRuler\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Self\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SELECT_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: LiveAnnouncer\n  }];\n};\n\nMatSelect.propDecorators = {\n  trigger: [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  overlayDir: [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  customTrigger: [{\n    type: ContentChild,\n    args: [MatSelectTrigger]\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disableOptionCentering: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  sortComparator: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\xA0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\xA0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\n      styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'listbox',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-label]': '_getAriaLabel()',\n        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        'class': 'mat-select',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc6.LiveAnnouncer\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MatSelectTrigger]\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatSelectModule = function MatSelectModule() {\n  _classCallCheck(this, MatSelectModule);\n};\n\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatSelectModule_Factory(t) {\n    return new (t || MatSelectModule)();\n  },\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function declarations() {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };","map":{"version":3,"sources":["../../../src/lib/select/select-animations.ts","../../../src/lib/select/select-errors.ts","../../../src/lib/select/select.ts","../../../src/lib/select/select-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    /**\n     * @deprecated _liveAnnouncer to be turned into a required parameter.\n     * @breaking-change 8.0.0\n     */\n    private _liveAnnouncer?: LiveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const selectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce((this.selected as MatOption).viewValue);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n"]},"metadata":{},"sourceType":"module"}