{"ast":null,"code":"import _assertThisInitialized from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _get from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Inject, InjectionToken, NgZone, TemplateRef, ChangeDetectionStrategy, Component, ContentChild, Input, ViewChild, ViewContainerRef, ViewEncapsulation, ChangeDetectorRef, Output, EventEmitter, Optional, ComponentFactoryResolver, forwardRef, ContentChildren, Attribute, NgModule } from '@angular/core';\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalHostDirective, PortalModule } from '@angular/cdk/portal';\nimport { mixinDisabled, mixinDisableRipple, mixinColor, MAT_RIPPLE_GLOBAL_OPTIONS, mixinTabIndex, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Subject, Subscription, merge, of, timer, fromEvent } from 'rxjs';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { END, ENTER, HOME, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Platform, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token for the MatInkBar's Positioner.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/material/core';\nimport * as ɵngcc5 from '@angular/cdk/observers';\nimport * as ɵngcc6 from '@angular/common';\nimport * as ɵngcc7 from '@angular/cdk/a11y';\nimport * as ɵngcc8 from '@angular/cdk/portal';\n\nfunction MatTab_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nvar _c0 = [\"*\"];\n\nfunction MatTabBody_ng_template_2_Template(rf, ctx) {}\n\nvar _c1 = function _c1(a0) {\n  return {\n    animationDuration: a0\n  };\n};\n\nvar _c2 = function _c2(a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\n\nvar _c3 = [\"tabListContainer\"];\nvar _c4 = [\"tabList\"];\nvar _c5 = [\"nextPaginator\"];\nvar _c6 = [\"previousPaginator\"];\nvar _c7 = [\"tabBodyWrapper\"];\nvar _c8 = [\"tabHeader\"];\n\nfunction MatTabGroup_div_2_ng_template_2_ng_template_0_Template(rf, ctx) {}\n\nfunction MatTabGroup_div_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, MatTabGroup_div_2_ng_template_2_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n  }\n\n  if (rf & 2) {\n    var tab_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", tab_r4.templateLabel);\n  }\n}\n\nfunction MatTabGroup_div_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var tab_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵtextInterpolate(tab_r4.textLabel);\n  }\n}\n\nfunction MatTabGroup_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function MatTabGroup_div_2_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var tab_r4 = ctx.$implicit;\n      var i_r5 = ctx.index;\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      return ctx_r11._handleClick(tab_r4, _r0, i_r5);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(2, MatTabGroup_div_2_ng_template_2_Template, 1, 1, \"ng-template\", 8);\n    ɵngcc0.ɵɵtemplate(3, MatTabGroup_div_2_ng_template_3_Template, 1, 1, \"ng-template\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tab_r4 = ctx.$implicit;\n    var i_r5 = ctx.index;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-tab-label-active\", ctx_r1.selectedIndex == i_r5);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1._getTabLabelId(i_r5))(\"disabled\", tab_r4.disabled)(\"matRippleDisabled\", tab_r4.disabled || ctx_r1.disableRipple);\n    ɵngcc0.ɵɵattribute(\"tabIndex\", ctx_r1._getTabIndex(tab_r4, i_r5))(\"aria-posinset\", i_r5 + 1)(\"aria-setsize\", ctx_r1._tabs.length)(\"aria-controls\", ctx_r1._getTabContentId(i_r5))(\"aria-selected\", ctx_r1.selectedIndex == i_r5)(\"aria-label\", tab_r4.ariaLabel || null)(\"aria-labelledby\", !tab_r4.ariaLabel && tab_r4.ariaLabelledby ? tab_r4.ariaLabelledby : null);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", tab_r4.templateLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !tab_r4.templateLabel);\n  }\n}\n\nfunction MatTabGroup_mat_tab_body_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-tab-body\", 10);\n    ɵngcc0.ɵɵlistener(\"_onCentered\", function MatTabGroup_mat_tab_body_5_Template_mat_tab_body__onCentered_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15._removeTabBodyWrapperHeight();\n    })(\"_onCentering\", function MatTabGroup_mat_tab_body_5_Template_mat_tab_body__onCentering_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17._setTabBodyWrapperHeight($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var tab_r13 = ctx.$implicit;\n    var i_r14 = ctx.index;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-tab-body-active\", ctx_r3.selectedIndex == i_r14);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r3._getTabContentId(i_r14))(\"content\", tab_r13.content)(\"position\", tab_r13.position)(\"origin\", tab_r13.origin)(\"animationDuration\", ctx_r3.animationDuration);\n    ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx_r3._getTabLabelId(i_r14));\n  }\n}\n\nvar _c9 = [\"mat-tab-nav-bar\", \"\"];\n\nvar _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\n  providedIn: 'root',\n  factory: _MAT_INK_BAR_POSITIONER_FACTORY\n});\n/**\n * The default positioner function for the MatInkBar.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\n  /** @type {?} */\n  var method = function method(element) {\n    return {\n      left: element ? (element.offsetLeft || 0) + 'px' : '0',\n      width: element ? (element.offsetWidth || 0) + 'px' : '0'\n    };\n  };\n\n  return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\n\n\nvar MatInkBar = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} _inkBarPositioner\n   */\n  function MatInkBar(_elementRef, _ngZone, _inkBarPositioner) {\n    _classCallCheck(this, MatInkBar);\n\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._inkBarPositioner = _inkBarPositioner;\n  }\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _createClass(MatInkBar, [{\n    key: \"alignToElement\",\n    value: function alignToElement(element) {\n      var _this = this;\n\n      this.show();\n\n      if (typeof requestAnimationFrame !== 'undefined') {\n        this._ngZone.runOutsideAngular(function () {\n          requestAnimationFrame(function () {\n            return _this._setStyles(element);\n          });\n        });\n      } else {\n        this._setStyles(element);\n      }\n    }\n    /**\n     * Shows the ink bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      this._elementRef.nativeElement.style.visibility = 'visible';\n    }\n    /**\n     * Hides the ink bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this._elementRef.nativeElement.style.visibility = 'hidden';\n    }\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setStyles\",\n    value: function _setStyles(element) {\n      /** @type {?} */\n      var positions = this._inkBarPositioner(element);\n      /** @type {?} */\n\n\n      var inkBar = this._elementRef.nativeElement;\n      inkBar.style.left = positions.left;\n      inkBar.style.width = positions.width;\n    }\n  }]);\n\n  return MatInkBar;\n}();\n\nMatInkBar.ɵfac = function MatInkBar_Factory(t) {\n  return new (t || MatInkBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(_MAT_INK_BAR_POSITIONER));\n};\n\nMatInkBar.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatInkBar,\n  selectors: [[\"mat-ink-bar\"]],\n  hostAttrs: [1, \"mat-ink-bar\"]\n});\n/** @nocollapse */\n\nMatInkBar.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [_MAT_INK_BAR_POSITIONER]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatInkBar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-ink-bar',\n      host: {\n        'class': 'mat-ink-bar'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [_MAT_INK_BAR_POSITIONER]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Decorates the `ng-template` tags and reads out the template from it.\n */\n\n\nvar MatTabContent =\n/**\n * @param {?} template\n */\nfunction MatTabContent(template) {\n  _classCallCheck(this, MatTabContent);\n\n  this.template = template;\n};\n\nMatTabContent.ɵfac = function MatTabContent_Factory(t) {\n  return new (t || MatTabContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nMatTabContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTabContent,\n  selectors: [[\"\", \"matTabContent\", \"\"]]\n});\n/** @nocollapse */\n\nMatTabContent.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabContent, [{\n    type: Directive,\n    args: [{\n      selector: '[matTabContent]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used to flag tab labels for use with the portal directive\n */\n\n\nvar MatTabLabel = /*#__PURE__*/function (_CdkPortal) {\n  _inherits(MatTabLabel, _CdkPortal);\n\n  var _super = _createSuper(MatTabLabel);\n\n  function MatTabLabel() {\n    _classCallCheck(this, MatTabLabel);\n\n    return _super.apply(this, arguments);\n  }\n\n  return MatTabLabel;\n}(CdkPortal);\n\nMatTabLabel.ɵfac = function MatTabLabel_Factory(t) {\n  return ɵMatTabLabel_BaseFactory(t || MatTabLabel);\n};\n\nMatTabLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTabLabel,\n  selectors: [[\"\", \"mat-tab-label\", \"\"], [\"\", \"matTabLabel\", \"\"]],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatTabLabel_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTabLabel);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabLabel, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-tab-label], [matTabLabel]'\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatTab.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatTabBase = function MatTabBase() {\n  _classCallCheck(this, MatTabBase);\n};\n/** @type {?} */\n\n\nvar _MatTabMixinBase = mixinDisabled(MatTabBase);\n\nvar MatTab = /*#__PURE__*/function (_MatTabMixinBase2) {\n  _inherits(MatTab, _MatTabMixinBase2);\n\n  var _super2 = _createSuper(MatTab);\n\n  /**\n   * @param {?} _viewContainerRef\n   */\n  function MatTab(_viewContainerRef) {\n    var _this2;\n\n    _classCallCheck(this, MatTab);\n\n    _this2 = _super2.call(this);\n    _this2._viewContainerRef = _viewContainerRef;\n    /**\n     * Plain text label for the tab, used when there is no template label.\n     */\n\n    _this2.textLabel = '';\n    /**\n     * Portal that will be the hosted content of the tab\n     */\n\n    _this2._contentPortal = null;\n    /**\n     * Emits whenever the internal state of the tab changes.\n     */\n\n    _this2._stateChanges = new Subject();\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n\n    _this2.position = null;\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n\n    _this2.origin = null;\n    /**\n     * Whether the tab is currently active.\n     */\n\n    _this2.isActive = false;\n    return _this2;\n  }\n  /**\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  _createClass(MatTab, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    value: function ngOnChanges(changes) {\n      if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n        this._stateChanges.next();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n    }\n  }, {\n    key: \"content\",\n    get: function get() {\n      return this._contentPortal;\n    }\n  }]);\n\n  return MatTab;\n}(_MatTabMixinBase);\n\nMatTab.ɵfac = function MatTab_Factory(t) {\n  return new (t || MatTab)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nMatTab.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTab,\n  selectors: [[\"mat-tab\"]],\n  contentQueries: function MatTab_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLabel, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabContent, true, TemplateRef);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateLabel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._explicitContent = _t.first);\n    }\n  },\n  viewQuery: function MatTab_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._implicitContent = _t.first);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    textLabel: [\"label\", \"textLabel\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"]\n  },\n  exportAs: [\"matTab\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatTab_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatTab_ng_template_0_Template, 1, 0, \"ng-template\");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatTab.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }];\n};\n\nMatTab.propDecorators = {\n  templateLabel: [{\n    type: ContentChild,\n    args: [MatTabLabel]\n  }],\n  _explicitContent: [{\n    type: ContentChild,\n    args: [MatTabContent, {\n      read: TemplateRef\n    }]\n  }],\n  _implicitContent: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  textLabel: [{\n    type: Input,\n    args: ['label']\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTab, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tab',\n      template: \"<ng-template><ng-content></ng-content></ng-template>\",\n      inputs: ['disabled'],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matTab'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, {\n    textLabel: [{\n      type: Input,\n      args: ['label']\n    }],\n    templateLabel: [{\n      type: ContentChild,\n      args: [MatTabLabel]\n    }],\n    _explicitContent: [{\n      type: ContentChild,\n      args: [MatTabContent, {\n        read: TemplateRef\n      }]\n    }],\n    _implicitContent: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by the Material tabs.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar matTabsAnimations = {\n  /**\n   * Animation translates a tab along the X axis.\n   */\n  translateTab: trigger('translateTab', [// Note: transitions to `none` instead of 0, because some browsers might blur the content.\n  state('center, void, left-origin-center, right-origin-center', style({\n    transform: 'none'\n  })), // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n  // in order to ensure that the element has a height before its state changes. This is\n  // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n  // not have a static height and is not rendered. See related issue: #9465\n  state('left', style({\n    transform: 'translate3d(-100%, 0, 0)',\n    minHeight: '1px'\n  })), state('right', style({\n    transform: 'translate3d(100%, 0, 0)',\n    minHeight: '1px'\n  })), transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')), transition('void => left-origin-center', [style({\n    transform: 'translate3d(-100%, 0, 0)'\n  }), animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')]), transition('void => right-origin-center', [style({\n    transform: 'translate3d(100%, 0, 0)'\n  }), animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')])])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The portal host directive for the contents of the tab.\n * \\@docs-private\n */\n\nvar MatTabBodyPortal = /*#__PURE__*/function (_CdkPortalOutlet) {\n  _inherits(MatTabBodyPortal, _CdkPortalOutlet);\n\n  var _super3 = _createSuper(MatTabBodyPortal);\n\n  /**\n   * @param {?} componentFactoryResolver\n   * @param {?} viewContainerRef\n   * @param {?} _host\n   */\n  function MatTabBodyPortal(componentFactoryResolver, viewContainerRef, _host) {\n    var _this3;\n\n    _classCallCheck(this, MatTabBodyPortal);\n\n    _this3 = _super3.call(this, componentFactoryResolver, viewContainerRef);\n    _this3._host = _host;\n    /**\n     * Subscription to events for when the tab body begins centering.\n     */\n\n    _this3._centeringSub = Subscription.EMPTY;\n    /**\n     * Subscription to events for when the tab body finishes leaving from center position.\n     */\n\n    _this3._leavingSub = Subscription.EMPTY;\n    return _this3;\n  }\n  /**\n   * Set initial visibility or set up subscription for changing visibility.\n   * @return {?}\n   */\n\n\n  _createClass(MatTabBodyPortal, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this4 = this;\n\n      _get(_getPrototypeOf(MatTabBodyPortal.prototype), \"ngOnInit\", this).call(this);\n\n      this._centeringSub = this._host._beforeCentering.pipe(startWith(this._host._isCenterPosition(this._host._position))).subscribe(function (isCentering) {\n        if (isCentering && !_this4.hasAttached()) {\n          _this4.attach(_this4._host._content);\n        }\n      });\n      this._leavingSub = this._host._afterLeavingCenter.subscribe(function () {\n        _this4.detach();\n      });\n    }\n    /**\n     * Clean up centering subscription.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatTabBodyPortal.prototype), \"ngOnDestroy\", this).call(this);\n\n      this._centeringSub.unsubscribe();\n\n      this._leavingSub.unsubscribe();\n    }\n  }]);\n\n  return MatTabBodyPortal;\n}(CdkPortalOutlet);\n\nMatTabBodyPortal.ɵfac = function MatTabBodyPortal_Factory(t) {\n  return new (t || MatTabBodyPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n    return MatTabBody;\n  })));\n};\n\nMatTabBodyPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTabBodyPortal,\n  selectors: [[\"\", \"matTabBodyHost\", \"\"]],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTabBodyPortal.ctorParameters = function () {\n  return [{\n    type: ComponentFactoryResolver\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: MatTabBody,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(function () {\n        return MatTabBody;\n      })]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabBodyPortal, [{\n    type: Directive,\n    args: [{\n      selector: '[matTabBodyHost]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: MatTabBody,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return MatTabBody;\n        })]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\n\n\nvar MatTabBody = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _dir\n   * @param {?=} changeDetectorRef\n   */\n  function MatTabBody(_elementRef, _dir,\n  /**\n   * @breaking-change 8.0.0 changeDetectorRef to be made required.\n   */\n  changeDetectorRef) {\n    var _this5 = this;\n\n    _classCallCheck(this, MatTabBody);\n\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    /**\n     * Subscription to the directionality change observable.\n     */\n\n    this._dirChangeSubscription = Subscription.EMPTY;\n    /**\n     * Emits when an animation on the tab is complete.\n     */\n\n    this._translateTabComplete = new Subject();\n    /**\n     * Event emitted when the tab begins to animate towards the center as the active tab.\n     */\n\n    this._onCentering = new EventEmitter();\n    /**\n     * Event emitted before the centering of the tab begins.\n     */\n\n    this._beforeCentering = new EventEmitter();\n    /**\n     * Event emitted before the centering of the tab begins.\n     */\n\n    this._afterLeavingCenter = new EventEmitter();\n    /**\n     * Event emitted when the tab completes its animation towards the center.\n     */\n\n    this._onCentered = new EventEmitter(true); // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n\n    /**\n     * Duration for the tab's animation.\n     */\n\n    this.animationDuration = '500ms';\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(function (dir) {\n        _this5._computePositionAnimationState(dir);\n\n        changeDetectorRef.markForCheck();\n      });\n    } // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n\n\n    this._translateTabComplete.pipe(distinctUntilChanged(function (x, y) {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(function (event) {\n      // If the transition to the center is complete, emit an event.\n      if (_this5._isCenterPosition(event.toState) && _this5._isCenterPosition(_this5._position)) {\n        _this5._onCentered.emit();\n      }\n\n      if (_this5._isCenterPosition(event.fromState) && !_this5._isCenterPosition(_this5._position)) {\n        _this5._afterLeavingCenter.emit();\n      }\n    });\n  }\n  /**\n   * The shifted index position of the tab body, where zero represents the active center tab.\n   * @param {?} position\n   * @return {?}\n   */\n\n\n  _createClass(MatTabBody, [{\n    key: \"ngOnInit\",\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      if (this._position == 'center' && this.origin != null) {\n        this._position = this._computePositionFromOrigin();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._dirChangeSubscription.unsubscribe();\n\n      this._translateTabComplete.complete();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onTranslateTabStarted\",\n    value: function _onTranslateTabStarted(event) {\n      /** @type {?} */\n      var isCentering = this._isCenterPosition(event.toState);\n\n      this._beforeCentering.emit(isCentering);\n\n      if (isCentering) {\n        this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n      }\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getLayoutDirection\",\n    value: function _getLayoutDirection() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Whether the provided position state is considered center, regardless of origin.\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isCenterPosition\",\n    value: function _isCenterPosition(position) {\n      return position == 'center' || position == 'left-origin-center' || position == 'right-origin-center';\n    }\n    /**\n     * Computes the position state that will be used for the tab-body animation trigger.\n     * @private\n     * @param {?=} dir\n     * @return {?}\n     */\n\n  }, {\n    key: \"_computePositionAnimationState\",\n    value: function _computePositionAnimationState() {\n      var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getLayoutDirection();\n\n      if (this._positionIndex < 0) {\n        this._position = dir == 'ltr' ? 'left' : 'right';\n      } else if (this._positionIndex > 0) {\n        this._position = dir == 'ltr' ? 'right' : 'left';\n      } else {\n        this._position = 'center';\n      }\n    }\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_computePositionFromOrigin\",\n    value: function _computePositionFromOrigin() {\n      /** @type {?} */\n      var dir = this._getLayoutDirection();\n\n      if (dir == 'ltr' && this.origin <= 0 || dir == 'rtl' && this.origin > 0) {\n        return 'left-origin-center';\n      }\n\n      return 'right-origin-center';\n    }\n  }, {\n    key: \"position\",\n    set: function set(position) {\n      this._positionIndex = position;\n\n      this._computePositionAnimationState();\n    }\n  }]);\n\n  return MatTabBody;\n}();\n\nMatTabBody.ɵfac = function MatTabBody_Factory(t) {\n  return new (t || MatTabBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatTabBody.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTabBody,\n  selectors: [[\"mat-tab-body\"]],\n  viewQuery: function MatTabBody_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(PortalHostDirective, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalHost = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-tab-body\"],\n  inputs: {\n    animationDuration: \"animationDuration\",\n    position: \"position\",\n    _content: [\"content\", \"_content\"],\n    origin: \"origin\"\n  },\n  outputs: {\n    _onCentering: \"_onCentering\",\n    _beforeCentering: \"_beforeCentering\",\n    _afterLeavingCenter: \"_afterLeavingCenter\",\n    _onCentered: \"_onCentered\"\n  },\n  decls: 3,\n  vars: 6,\n  consts: [[1, \"mat-tab-body-content\"], [\"content\", \"\"], [\"matTabBodyHost\", \"\"]],\n  template: function MatTabBody_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"@translateTab.start\", function MatTabBody_Template_div_animation_translateTab_start_0_listener($event) {\n        return ctx._onTranslateTabStarted($event);\n      })(\"@translateTab.done\", function MatTabBody_Template_div_animation_translateTab_done_0_listener($event) {\n        return ctx._translateTabComplete.next($event);\n      });\n      ɵngcc0.ɵɵtemplate(2, MatTabBody_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"@translateTab\", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx._position, ɵngcc0.ɵɵpureFunction1(1, _c1, ctx.animationDuration)));\n    }\n  },\n  directives: [MatTabBodyPortal],\n  styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTabsAnimations.translateTab]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatTabBody.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nMatTabBody.propDecorators = {\n  _onCentering: [{\n    type: Output\n  }],\n  _beforeCentering: [{\n    type: Output\n  }],\n  _afterLeavingCenter: [{\n    type: Output\n  }],\n  _onCentered: [{\n    type: Output\n  }],\n  _portalHost: [{\n    type: ViewChild,\n    args: [PortalHostDirective]\n  }],\n  _content: [{\n    type: Input,\n    args: ['content']\n  }],\n  origin: [{\n    type: Input\n  }],\n  animationDuration: [{\n    type: Input\n  }],\n  position: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabBody, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tab-body',\n      template: \"<div class=\\\"mat-tab-body-content\\\" #content [@translateTab]=\\\"{ value: _position, params: {animationDuration: animationDuration} }\\\" (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\" (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\"><ng-template matTabBodyHost></ng-template></div>\",\n      styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTabsAnimations.translateTab],\n      host: {\n        'class': 'mat-tab-body'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    _onCentering: [{\n      type: Output\n    }],\n    _beforeCentering: [{\n      type: Output\n    }],\n    _afterLeavingCenter: [{\n      type: Output\n    }],\n    _onCentered: [{\n      type: Output\n    }],\n    animationDuration: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    _portalHost: [{\n      type: ViewChild,\n      args: [PortalHostDirective]\n    }],\n    _content: [{\n      type: Input,\n      args: ['content']\n    }],\n    origin: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatTabLabelWrapperBase = function MatTabLabelWrapperBase() {\n  _classCallCheck(this, MatTabLabelWrapperBase);\n};\n/** @type {?} */\n\n\nvar _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * \\@docs-private\n */\n\n\nvar MatTabLabelWrapper = /*#__PURE__*/function (_MatTabLabelWrapperMi) {\n  _inherits(MatTabLabelWrapper, _MatTabLabelWrapperMi);\n\n  var _super4 = _createSuper(MatTabLabelWrapper);\n\n  /**\n   * @param {?} elementRef\n   */\n  function MatTabLabelWrapper(elementRef) {\n    var _this6;\n\n    _classCallCheck(this, MatTabLabelWrapper);\n\n    _this6 = _super4.call(this);\n    _this6.elementRef = elementRef;\n    return _this6;\n  }\n  /**\n   * Sets focus on the wrapper element\n   * @return {?}\n   */\n\n\n  _createClass(MatTabLabelWrapper, [{\n    key: \"focus\",\n    value: function focus() {\n      this.elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getOffsetLeft\",\n    value: function getOffsetLeft() {\n      return this.elementRef.nativeElement.offsetLeft;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getOffsetWidth\",\n    value: function getOffsetWidth() {\n      return this.elementRef.nativeElement.offsetWidth;\n    }\n  }]);\n\n  return MatTabLabelWrapper;\n}(_MatTabLabelWrapperMixinBase);\n\nMatTabLabelWrapper.ɵfac = function MatTabLabelWrapper_Factory(t) {\n  return new (t || MatTabLabelWrapper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatTabLabelWrapper.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTabLabelWrapper,\n  selectors: [[\"\", \"matTabLabelWrapper\", \"\"]],\n  hostVars: 3,\n  hostBindings: function MatTabLabelWrapper_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-disabled\", !!ctx.disabled);\n      ɵngcc0.ɵɵclassProp(\"mat-tab-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTabLabelWrapper.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabLabelWrapper, [{\n    type: Directive,\n    args: [{\n      selector: '[matTabLabelWrapper]',\n      inputs: ['disabled'],\n      host: {\n        '[class.mat-tab-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Config used to bind passive event listeners\n * @type {?}\n */\n\n\nvar passiveEventListenerOptions =\n/** @type {?} */\nnormalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n * @type {?}\n */\n\nvar EXAGGERATED_OVERSCROLL = 60;\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n * @type {?}\n */\n\nvar HEADER_SCROLL_DELAY = 650;\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n * @type {?}\n */\n\nvar HEADER_SCROLL_INTERVAL = 100; // Boilerplate for applying mixins to MatTabHeader.\n\n/**\n * \\@docs-private\n */\n\nvar MatTabHeaderBase = function MatTabHeaderBase() {\n  _classCallCheck(this, MatTabHeaderBase);\n};\n/** @type {?} */\n\n\nvar _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\n\n\nvar MatTabHeader = /*#__PURE__*/function (_MatTabHeaderMixinBas) {\n  _inherits(MatTabHeader, _MatTabHeaderMixinBas);\n\n  var _super5 = _createSuper(MatTabHeader);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _viewportRuler\n   * @param {?} _dir\n   * @param {?=} _ngZone\n   * @param {?=} _platform\n   */\n  function MatTabHeader(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform) {\n    var _this7;\n\n    _classCallCheck(this, MatTabHeader);\n\n    _this7 = _super5.call(this);\n    _this7._elementRef = _elementRef;\n    _this7._changeDetectorRef = _changeDetectorRef;\n    _this7._viewportRuler = _viewportRuler;\n    _this7._dir = _dir;\n    _this7._ngZone = _ngZone;\n    _this7._platform = _platform;\n    /**\n     * The distance in pixels that the tab labels should be translated to the left.\n     */\n\n    _this7._scrollDistance = 0;\n    /**\n     * Whether the header should scroll to the selected index after the view has been checked.\n     */\n\n    _this7._selectedIndexChanged = false;\n    /**\n     * Emits when the component is destroyed.\n     */\n\n    _this7._destroyed = new Subject();\n    /**\n     * Whether the controls for pagination should be displayed\n     */\n\n    _this7._showPaginationControls = false;\n    /**\n     * Whether the tab list can be scrolled more towards the end of the tab label list.\n     */\n\n    _this7._disableScrollAfter = true;\n    /**\n     * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n     */\n\n    _this7._disableScrollBefore = true;\n    /**\n     * Stream that will stop the automated scrolling.\n     */\n\n    _this7._stopScrolling = new Subject();\n    _this7._selectedIndex = 0;\n    /**\n     * Event emitted when the option is selected.\n     */\n\n    _this7.selectFocusedIndex = new EventEmitter();\n    /**\n     * Event emitted when a label is focused.\n     */\n\n    _this7.indexFocused = new EventEmitter();\n    /** @type {?} */\n\n    var element = _elementRef.nativeElement;\n    /** @type {?} */\n\n    var bindEvent = function bindEvent() {\n      fromEvent(element, 'mouseleave').pipe(takeUntil(_this7._destroyed)).subscribe(function () {\n        _this7._stopInterval();\n      });\n    }; // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n\n\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n\n    return _this7;\n  }\n  /**\n   * The index of the active tab.\n   * @return {?}\n   */\n\n\n  _createClass(MatTabHeader, [{\n    key: \"ngAfterContentChecked\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentChecked() {\n      // If the number of tab labels have changed, check if scrolling should be enabled\n      if (this._tabLabelCount != this._labelWrappers.length) {\n        this.updatePagination();\n        this._tabLabelCount = this._labelWrappers.length;\n\n        this._changeDetectorRef.markForCheck();\n      } // If the selected index has changed, scroll to the label and check if the scrolling controls\n      // should be disabled.\n\n\n      if (this._selectedIndexChanged) {\n        this._scrollToLabel(this._selectedIndex);\n\n        this._checkScrollingControls();\n\n        this._alignInkBarToSelectedTab();\n\n        this._selectedIndexChanged = false;\n\n        this._changeDetectorRef.markForCheck();\n      } // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n      // then translate the header to reflect this.\n\n\n      if (this._scrollDistanceChanged) {\n        this._updateTabScrollPosition();\n\n        this._scrollDistanceChanged = false;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Handles keyboard events on the header.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      // We don't handle any key bindings with a modifier key.\n      if (hasModifierKey(event)) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case HOME:\n          this._keyManager.setFirstItemActive();\n\n          event.preventDefault();\n          break;\n\n        case END:\n          this._keyManager.setLastItemActive();\n\n          event.preventDefault();\n          break;\n\n        case ENTER:\n        case SPACE:\n          this.selectFocusedIndex.emit(this.focusIndex);\n          event.preventDefault();\n          break;\n\n        default:\n          this._keyManager.onKeydown(event);\n\n      }\n    }\n    /**\n     * Aligns the ink bar to the selected tab on load.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this8 = this;\n\n      /** @type {?} */\n      var dirChange = this._dir ? this._dir.change : of(null);\n      /** @type {?} */\n\n      var resize = this._viewportRuler.change(150);\n      /** @type {?} */\n\n\n      var realign = function realign() {\n        _this8.updatePagination();\n\n        _this8._alignInkBarToSelectedTab();\n      };\n\n      this._keyManager = new FocusKeyManager(this._labelWrappers).withHorizontalOrientation(this._getLayoutDirection()).withWrap();\n\n      this._keyManager.updateActiveItem(0); // Defer the first call in order to allow for slower browsers to lay out the elements.\n      // This helps in cases where the user lands directly on a page with paginated tabs.\n\n\n      typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign(); // On dir change or window resize, realign the ink bar and update the orientation of\n      // the key manager if the direction has changed.\n\n      merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(function () {\n        realign();\n\n        _this8._keyManager.withHorizontalOrientation(_this8._getLayoutDirection());\n      }); // If there is a change in the focus key manager we need to emit the `indexFocused`\n      // event in order to provide a public event that notifies about focus changes. Also we realign\n      // the tabs container by scrolling the new focused tab into the visible section.\n\n      this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(function (newFocusIndex) {\n        _this8.indexFocused.emit(newFocusIndex);\n\n        _this8._setTabFocus(newFocusIndex);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this9 = this;\n\n      // We need to handle these events manually, because we want to bind passive event listeners.\n      fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions).pipe(takeUntil(this._destroyed)).subscribe(function () {\n        _this9._handlePaginatorPress('before');\n      });\n      fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions).pipe(takeUntil(this._destroyed)).subscribe(function () {\n        _this9._handlePaginatorPress('after');\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._stopScrolling.complete();\n    }\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onContentChanges\",\n    value: function _onContentChanges() {\n      var _this10 = this;\n\n      /** @type {?} */\n      var textContent = this._elementRef.nativeElement.textContent; // We need to diff the text content of the header, because the MutationObserver callback\n      // will fire even if the text content didn't change which is inefficient and is prone\n      // to infinite loops if a poorly constructed expression is passed in (see #14249).\n\n      if (textContent !== this._currentTextContent) {\n        this._currentTextContent = textContent;\n        /** @type {?} */\n\n        var zoneCallback = function zoneCallback() {\n          _this10.updatePagination();\n\n          _this10._alignInkBarToSelectedTab();\n\n          _this10._changeDetectorRef.markForCheck();\n        }; // The content observer runs outside the `NgZone` by default, which\n        // means that we need to bring the callback back in ourselves.\n        // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n\n\n        this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n      }\n    }\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updatePagination\",\n    value: function updatePagination() {\n      this._checkPaginationEnabled();\n\n      this._checkScrollingControls();\n\n      this._updateTabScrollPosition();\n    }\n    /**\n     * Tracks which element has focus; used for keyboard navigation\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isValidIndex\",\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     * @param {?} index\n     * @return {?}\n     */\n    value: function _isValidIndex(index) {\n      if (!this._labelWrappers) {\n        return true;\n      }\n      /** @type {?} */\n\n\n      var tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n      return !!tab && !tab.disabled;\n    }\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     * @param {?} tabIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTabFocus\",\n    value: function _setTabFocus(tabIndex) {\n      if (this._showPaginationControls) {\n        this._scrollToLabel(tabIndex);\n      }\n\n      if (this._labelWrappers && this._labelWrappers.length) {\n        this._labelWrappers.toArray()[tabIndex].focus(); // Do not let the browser manage scrolling to focus the element, this will be handled\n        // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n        // should be the full width minus the offset width.\n\n        /** @type {?} */\n\n\n        var containerEl = this._tabListContainer.nativeElement;\n        /** @type {?} */\n\n        var dir = this._getLayoutDirection();\n\n        if (dir == 'ltr') {\n          containerEl.scrollLeft = 0;\n        } else {\n          containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n        }\n      }\n    }\n    /**\n     * The layout direction of the containing app.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getLayoutDirection\",\n    value: function _getLayoutDirection() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTabScrollPosition\",\n    value: function _updateTabScrollPosition() {\n      /** @type {?} */\n      var scrollDistance = this.scrollDistance;\n      /** @type {?} */\n\n      var platform = this._platform;\n      /** @type {?} */\n\n      var translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance; // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n      // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n      // and ripples will exceed the boundaries of the visible tab bar.\n      // See: https://github.com/angular/material2/issues/10276\n      // We round the `transform` here, because transforms with sub-pixel precision cause some\n      // browsers to blur the content of the element.\n\n      this._tabList.nativeElement.style.transform = \"translateX(\".concat(Math.round(translateX), \"px)\"); // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n      // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n      // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n      // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n      // @breaking-change 8.0.0 Remove null check for `platform`.\n\n      if (platform && (platform.TRIDENT || platform.EDGE)) {\n        this._tabListContainer.nativeElement.scrollLeft = 0;\n      }\n    }\n    /**\n     * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollHeader\",\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} direction\n     * @return {?}\n     */\n    value: function _scrollHeader(direction) {\n      /** @type {?} */\n      var viewLength = this._tabListContainer.nativeElement.offsetWidth; // Move the scroll distance one-third the length of the tab list's viewport.\n\n      /** @type {?} */\n\n      var scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n      return this._scrollTo(this._scrollDistance + scrollAmount);\n    }\n    /**\n     * Handles click events on the pagination arrows.\n     * @param {?} direction\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handlePaginatorClick\",\n    value: function _handlePaginatorClick(direction) {\n      this._stopInterval();\n\n      this._scrollHeader(direction);\n    }\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} labelIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollToLabel\",\n    value: function _scrollToLabel(labelIndex) {\n      /** @type {?} */\n      var selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n      if (!selectedLabel) {\n        return;\n      } // The view length is the visible width of the tab labels.\n\n      /** @type {?} */\n\n\n      var viewLength = this._tabListContainer.nativeElement.offsetWidth;\n      /** @type {?} */\n\n      var labelBeforePos;\n      /** @type {?} */\n\n      var labelAfterPos;\n\n      if (this._getLayoutDirection() == 'ltr') {\n        labelBeforePos = selectedLabel.getOffsetLeft();\n        labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n      } else {\n        labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n        labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n      }\n      /** @type {?} */\n\n\n      var beforeVisiblePos = this.scrollDistance;\n      /** @type {?} */\n\n      var afterVisiblePos = this.scrollDistance + viewLength;\n\n      if (labelBeforePos < beforeVisiblePos) {\n        // Scroll header to move label to the before direction\n        this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n      } else if (labelAfterPos > afterVisiblePos) {\n        // Scroll header to move label to the after direction\n        this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n      }\n    }\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkPaginationEnabled\",\n    value: function _checkPaginationEnabled() {\n      /** @type {?} */\n      var isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n      if (!isEnabled) {\n        this.scrollDistance = 0;\n      }\n\n      if (isEnabled !== this._showPaginationControls) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._showPaginationControls = isEnabled;\n    }\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkScrollingControls\",\n    value: function _checkScrollingControls() {\n      // Check if the pagination arrows should be activated.\n      this._disableScrollBefore = this.scrollDistance == 0;\n      this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getMaxScrollDistance\",\n    value: function _getMaxScrollDistance() {\n      /** @type {?} */\n      var lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n      /** @type {?} */\n\n      var viewLength = this._tabListContainer.nativeElement.offsetWidth;\n      return lengthOfTabList - viewLength || 0;\n    }\n    /**\n     * Tells the ink-bar to align itself to the current label wrapper\n     * @return {?}\n     */\n\n  }, {\n    key: \"_alignInkBarToSelectedTab\",\n    value: function _alignInkBarToSelectedTab() {\n      /** @type {?} */\n      var selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement : null;\n\n      this._inkBar.alignToElement(\n      /** @type {?} */\n      selectedLabelWrapper);\n    }\n    /**\n     * Stops the currently-running paginator interval.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_stopInterval\",\n    value: function _stopInterval() {\n      this._stopScrolling.next();\n    }\n    /**\n     * Handles the user pressing down on one of the paginators.\n     * Starts scrolling the header after a certain amount of time.\n     * @param {?} direction In which direction the paginator should be scrolled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handlePaginatorPress\",\n    value: function _handlePaginatorPress(direction) {\n      var _this11 = this;\n\n      // Avoid overlapping timers.\n      this._stopInterval(); // Start a timer after the delay and keep firing based on the interval.\n\n\n      timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL) // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed))).subscribe(function () {\n        var _this11$_scrollHeader = _this11._scrollHeader(direction),\n            maxScrollDistance = _this11$_scrollHeader.maxScrollDistance,\n            distance = _this11$_scrollHeader.distance; // Stop the timer if we've reached the start or the end.\n\n\n        if (distance === 0 || distance >= maxScrollDistance) {\n          _this11._stopInterval();\n        }\n      });\n    }\n    /**\n     * Scrolls the header to a given position.\n     * @private\n     * @param {?} position Position to which to scroll.\n     * @return {?} Information on the current scroll distance and the maximum.\n     */\n\n  }, {\n    key: \"_scrollTo\",\n    value: function _scrollTo(position) {\n      /** @type {?} */\n      var maxScrollDistance = this._getMaxScrollDistance();\n\n      this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position)); // Mark that the scroll distance has changed so that after the view is checked, the CSS\n      // transformation can move the header.\n\n      this._scrollDistanceChanged = true;\n\n      this._checkScrollingControls();\n\n      return {\n        maxScrollDistance: maxScrollDistance,\n        distance: this._scrollDistance\n      };\n    }\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this._selectedIndex;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      value = coerceNumberProperty(value);\n      this._selectedIndexChanged = this._selectedIndex != value;\n      this._selectedIndex = value;\n\n      if (this._keyManager) {\n        this._keyManager.updateActiveItemIndex(value);\n      }\n    }\n  }, {\n    key: \"focusIndex\",\n    get: function get() {\n      return this._keyManager ?\n      /** @type {?} */\n      this._keyManager.activeItemIndex : 0;\n    }\n    /**\n     * When the focus index is set, we must manually send focus to the correct label\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n        return;\n      }\n\n      this._keyManager.setActiveItem(value);\n    }\n  }, {\n    key: \"scrollDistance\",\n    get: function get() {\n      return this._scrollDistance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._scrollTo(value);\n    }\n  }]);\n\n  return MatTabHeader;\n}(_MatTabHeaderMixinBase);\n\nMatTabHeader.ɵfac = function MatTabHeader_Factory(t) {\n  return new (t || MatTabHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform));\n};\n\nMatTabHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTabHeader,\n  selectors: [[\"mat-tab-header\"]],\n  contentQueries: function MatTabHeader_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLabelWrapper, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelWrappers = _t);\n    }\n  },\n  viewQuery: function MatTabHeader_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatInkBar, true);\n      ɵngcc0.ɵɵviewQuery(_c3, true);\n      ɵngcc0.ɵɵviewQuery(_c4, true);\n      ɵngcc0.ɵɵviewQuery(_c5, true);\n      ɵngcc0.ɵɵviewQuery(_c6, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inkBar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabListContainer = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabList = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nextPaginator = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previousPaginator = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-tab-header\"],\n  hostVars: 4,\n  hostBindings: function MatTabHeader_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-controls-enabled\", ctx._showPaginationControls)(\"mat-tab-header-rtl\", ctx._getLayoutDirection() == \"rtl\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    selectedIndex: \"selectedIndex\"\n  },\n  outputs: {\n    selectFocusedIndex: \"selectFocusedIndex\",\n    indexFocused: \"indexFocused\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 13,\n  vars: 6,\n  consts: [[\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-before\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"click\", \"mousedown\", \"touchend\"], [\"previousPaginator\", \"\"], [1, \"mat-tab-header-pagination-chevron\"], [1, \"mat-tab-label-container\", 3, \"keydown\"], [\"tabListContainer\", \"\"], [\"role\", \"tablist\", 1, \"mat-tab-list\", 3, \"cdkObserveContent\"], [\"tabList\", \"\"], [1, \"mat-tab-labels\"], [\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-after\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"mousedown\", \"click\", \"touchend\"], [\"nextPaginator\", \"\"]],\n  template: function MatTabHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatTabHeader_Template_div_click_0_listener() {\n        return ctx._handlePaginatorClick(\"before\");\n      })(\"mousedown\", function MatTabHeader_Template_div_mousedown_0_listener() {\n        return ctx._handlePaginatorPress(\"before\");\n      })(\"touchend\", function MatTabHeader_Template_div_touchend_0_listener() {\n        return ctx._stopInterval();\n      });\n      ɵngcc0.ɵɵelement(2, \"div\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatTabHeader_Template_div_keydown_3_listener($event) {\n        return ctx._handleKeydown($event);\n      });\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatTabHeader_Template_div_cdkObserveContent_5_listener() {\n        return ctx._onContentChanges();\n      });\n      ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n      ɵngcc0.ɵɵprojection(8);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(9, \"mat-ink-bar\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(10, \"div\", 8, 9);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function MatTabHeader_Template_div_mousedown_10_listener() {\n        return ctx._handlePaginatorPress(\"after\");\n      })(\"click\", function MatTabHeader_Template_div_click_10_listener() {\n        return ctx._handlePaginatorClick(\"after\");\n      })(\"touchend\", function MatTabHeader_Template_div_touchend_10_listener() {\n        return ctx._stopInterval();\n      });\n      ɵngcc0.ɵɵelement(12, \"div\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollBefore);\n      ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollBefore || ctx.disableRipple);\n      ɵngcc0.ɵɵadvance(10);\n      ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollAfter);\n      ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollAfter || ctx.disableRipple);\n    }\n  },\n  directives: [ɵngcc4.MatRipple, ɵngcc5.CdkObserveContent, MatInkBar],\n  styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}[mat-align-tabs=center] .mat-tab-labels{justify-content:center}[mat-align-tabs=end] .mat-tab-labels{justify-content:flex-end}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatTabHeader.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ViewportRuler\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }];\n};\n\nMatTabHeader.propDecorators = {\n  _labelWrappers: [{\n    type: ContentChildren,\n    args: [MatTabLabelWrapper]\n  }],\n  _inkBar: [{\n    type: ViewChild,\n    args: [MatInkBar]\n  }],\n  _tabListContainer: [{\n    type: ViewChild,\n    args: ['tabListContainer']\n  }],\n  _tabList: [{\n    type: ViewChild,\n    args: ['tabList']\n  }],\n  _nextPaginator: [{\n    type: ViewChild,\n    args: ['nextPaginator']\n  }],\n  _previousPaginator: [{\n    type: ViewChild,\n    args: ['previousPaginator']\n  }],\n  selectedIndex: [{\n    type: Input\n  }],\n  selectFocusedIndex: [{\n    type: Output\n  }],\n  indexFocused: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tab-header',\n      template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\" #previousPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\" (click)=\\\"_handlePaginatorClick('before')\\\" (mousedown)=\\\"_handlePaginatorPress('before')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div><div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\"><div class=\\\"mat-tab-list\\\" #tabList role=\\\"tablist\\\" (cdkObserveContent)=\\\"_onContentChanges()\\\"><div class=\\\"mat-tab-labels\\\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\" #nextPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\" (mousedown)=\\\"_handlePaginatorPress('after')\\\" (click)=\\\"_handlePaginatorClick('after')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div>\",\n      styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}[mat-align-tabs=center] .mat-tab-labels{justify-content:center}[mat-align-tabs=end] .mat-tab-labels{justify-content:flex-end}\"],\n      inputs: ['disableRipple'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-tab-header',\n        '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n        '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\"\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.ViewportRuler\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }];\n  }, {\n    selectFocusedIndex: [{\n      type: Output\n    }],\n    indexFocused: [{\n      type: Output\n    }],\n    selectedIndex: [{\n      type: Input\n    }],\n    _labelWrappers: [{\n      type: ContentChildren,\n      args: [MatTabLabelWrapper]\n    }],\n    _inkBar: [{\n      type: ViewChild,\n      args: [MatInkBar]\n    }],\n    _tabListContainer: [{\n      type: ViewChild,\n      args: ['tabListContainer']\n    }],\n    _tabList: [{\n      type: ViewChild,\n      args: ['tabList']\n    }],\n    _nextPaginator: [{\n      type: ViewChild,\n      args: ['nextPaginator']\n    }],\n    _previousPaginator: [{\n      type: ViewChild,\n      args: ['previousPaginator']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used to generate unique ID's for each tab component\n * @type {?}\n */\n\n\nvar nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\n\nvar MatTabChangeEvent = function MatTabChangeEvent() {\n  _classCallCheck(this, MatTabChangeEvent);\n};\n/**\n * Injection token that can be used to provide the default options the tabs module.\n * @type {?}\n */\n\n\nvar MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG'); // Boilerplate for applying mixins to MatTabGroup.\n\n/**\n * \\@docs-private\n */\n\nvar MatTabGroupBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatTabGroupBase(_elementRef) {\n  _classCallCheck(this, MatTabGroupBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n\n\nvar MatTabGroup = /*#__PURE__*/function (_MatTabGroupMixinBase2) {\n  _inherits(MatTabGroup, _MatTabGroupMixinBase2);\n\n  var _super6 = _createSuper(MatTabGroup);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?=} defaultConfig\n   */\n  function MatTabGroup(elementRef, _changeDetectorRef, defaultConfig) {\n    var _this12;\n\n    _classCallCheck(this, MatTabGroup);\n\n    _this12 = _super6.call(this, elementRef);\n    _this12._changeDetectorRef = _changeDetectorRef;\n    /**\n     * The tab index that should be selected after the content has been checked.\n     */\n\n    _this12._indexToSelect = 0;\n    /**\n     * Snapshot of the height of the tab body wrapper before another tab is activated.\n     */\n\n    _this12._tabBodyWrapperHeight = 0;\n    /**\n     * Subscription to tabs being added/removed.\n     */\n\n    _this12._tabsSubscription = Subscription.EMPTY;\n    /**\n     * Subscription to changes in the tab labels.\n     */\n\n    _this12._tabLabelSubscription = Subscription.EMPTY;\n    _this12._dynamicHeight = false;\n    _this12._selectedIndex = null;\n    /**\n     * Position of the tab header.\n     */\n\n    _this12.headerPosition = 'above';\n    /**\n     * Output to enable support for two-way binding on `[(selectedIndex)]`\n     */\n\n    _this12.selectedIndexChange = new EventEmitter();\n    /**\n     * Event emitted when focus has changed within a tab group.\n     */\n\n    _this12.focusChange = new EventEmitter();\n    /**\n     * Event emitted when the body animation has completed\n     */\n\n    _this12.animationDone = new EventEmitter();\n    /**\n     * Event emitted when the tab selection has changed.\n     */\n\n    _this12.selectedTabChange = new EventEmitter(true);\n    _this12._groupId = nextId++;\n    _this12.animationDuration = defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n    return _this12;\n  }\n  /**\n   * Whether the tab group should grow to the size of the active tab.\n   * @return {?}\n   */\n\n\n  _createClass(MatTabGroup, [{\n    key: \"ngAfterContentChecked\",\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     * @return {?}\n     */\n    value: function ngAfterContentChecked() {\n      var _this13 = this;\n\n      // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n      // the amount of tabs changes before the actual change detection runs.\n\n      /** @type {?} */\n      var indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect); // If there is a change in selected index, emit a change event. Should not trigger if\n      // the selected index has not yet been initialized.\n\n\n      if (this._selectedIndex != indexToSelect) {\n        /** @type {?} */\n        var isFirstRun = this._selectedIndex == null;\n\n        if (!isFirstRun) {\n          this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n        } // Changing these values after change detection has run\n        // since the checked content may contain references to them.\n\n\n        Promise.resolve().then(function () {\n          _this13._tabs.forEach(function (tab, index) {\n            return tab.isActive = index === indexToSelect;\n          });\n\n          if (!isFirstRun) {\n            _this13.selectedIndexChange.emit(indexToSelect);\n          }\n        });\n      } // Setup the position for each tab and optionally setup an origin on the next selected tab.\n\n\n      this._tabs.forEach(function (tab, index) {\n        tab.position = index - indexToSelect; // If there is already a selected tab, then set up an origin for the next selected tab\n        // if it doesn't have one already.\n\n        if (_this13._selectedIndex != null && tab.position == 0 && !tab.origin) {\n          tab.origin = indexToSelect - _this13._selectedIndex;\n        }\n      });\n\n      if (this._selectedIndex !== indexToSelect) {\n        this._selectedIndex = indexToSelect;\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this14 = this;\n\n      this._subscribeToTabLabels(); // Subscribe to changes in the amount of tabs, in order to be\n      // able to re-render the content as new tabs are added or removed.\n\n\n      this._tabsSubscription = this._tabs.changes.subscribe(function () {\n        /** @type {?} */\n        var indexToSelect = _this14._clampTabIndex(_this14._indexToSelect); // Maintain the previously-selected tab if a new tab is added or removed and there is no\n        // explicit change that selects a different tab.\n\n\n        if (indexToSelect === _this14._selectedIndex) {\n          /** @type {?} */\n          var tabs = _this14._tabs.toArray();\n\n          for (var i = 0; i < tabs.length; i++) {\n            if (tabs[i].isActive) {\n              // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n              // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n              // adding a tab within the `selectedIndexChange` event.\n              _this14._indexToSelect = _this14._selectedIndex = i;\n              break;\n            }\n          }\n        }\n\n        _this14._subscribeToTabLabels();\n\n        _this14._changeDetectorRef.markForCheck();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._tabsSubscription.unsubscribe();\n\n      this._tabLabelSubscription.unsubscribe();\n    }\n    /**\n     * Re-aligns the ink bar to the selected tab element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"realignInkBar\",\n    value: function realignInkBar() {\n      if (this._tabHeader) {\n        this._tabHeader._alignInkBarToSelectedTab();\n      }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusChanged\",\n    value: function _focusChanged(index) {\n      this.focusChange.emit(this._createChangeEvent(index));\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createChangeEvent\",\n    value: function _createChangeEvent(index) {\n      /** @type {?} */\n      var event = new MatTabChangeEvent();\n      event.index = index;\n\n      if (this._tabs && this._tabs.length) {\n        event.tab = this._tabs.toArray()[index];\n      }\n\n      return event;\n    }\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subscribeToTabLabels\",\n    value: function _subscribeToTabLabels() {\n      var _this15 = this;\n\n      if (this._tabLabelSubscription) {\n        this._tabLabelSubscription.unsubscribe();\n      }\n\n      this._tabLabelSubscription = merge.apply(void 0, _toConsumableArray(this._tabs.map(function (tab) {\n        return tab._stateChanges;\n      }))).subscribe(function () {\n        return _this15._changeDetectorRef.markForCheck();\n      });\n    }\n    /**\n     * Clamps the given index to the bounds of 0 and the tabs length.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clampTabIndex\",\n    value: function _clampTabIndex(index) {\n      // Note the `|| 0`, which ensures that values like NaN can't get through\n      // and which would otherwise throw the component into an infinite loop\n      // (since Math.max(NaN, 0) === NaN).\n      return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n    }\n    /**\n     * Returns a unique id for each tab label element\n     * @param {?} i\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getTabLabelId\",\n    value: function _getTabLabelId(i) {\n      return \"mat-tab-label-\".concat(this._groupId, \"-\").concat(i);\n    }\n    /**\n     * Returns a unique id for each tab content element\n     * @param {?} i\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getTabContentId\",\n    value: function _getTabContentId(i) {\n      return \"mat-tab-content-\".concat(this._groupId, \"-\").concat(i);\n    }\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     * @param {?} tabHeight\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTabBodyWrapperHeight\",\n    value: function _setTabBodyWrapperHeight(tabHeight) {\n      if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var wrapper = this._tabBodyWrapper.nativeElement;\n      wrapper.style.height = this._tabBodyWrapperHeight + 'px'; // This conditional forces the browser to paint the height so that\n      // the animation to the new height can have an origin.\n\n      if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n        wrapper.style.height = tabHeight + 'px';\n      }\n    }\n    /**\n     * Removes the height of the tab body wrapper.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeTabBodyWrapperHeight\",\n    value: function _removeTabBodyWrapperHeight() {\n      /** @type {?} */\n      var wrapper = this._tabBodyWrapper.nativeElement;\n      this._tabBodyWrapperHeight = wrapper.clientHeight;\n      wrapper.style.height = '';\n      this.animationDone.emit();\n    }\n    /**\n     * Handle click events, setting new selected index if appropriate.\n     * @param {?} tab\n     * @param {?} tabHeader\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(tab, tabHeader, index) {\n      if (!tab.disabled) {\n        this.selectedIndex = tabHeader.focusIndex = index;\n      }\n    }\n    /**\n     * Retrieves the tabindex for the tab.\n     * @param {?} tab\n     * @param {?} idx\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getTabIndex\",\n    value: function _getTabIndex(tab, idx) {\n      if (tab.disabled) {\n        return null;\n      }\n\n      return this.selectedIndex === idx ? 0 : -1;\n    }\n  }, {\n    key: \"dynamicHeight\",\n    get: function get() {\n      return this._dynamicHeight;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._dynamicHeight = coerceBooleanProperty(value);\n    }\n    /**\n     * The index of the active tab.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      return this._selectedIndex;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._indexToSelect = coerceNumberProperty(value, null);\n    }\n    /**\n     * Duration for the tab animation. Will be normalized to milliseconds if no units are set.\n     * @return {?}\n     */\n\n  }, {\n    key: \"animationDuration\",\n    get: function get() {\n      return this._animationDuration;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n    }\n    /**\n     * Background color of the tab group.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      return this._backgroundColor;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var nativeElement = this._elementRef.nativeElement;\n      nativeElement.classList.remove(\"mat-background-\".concat(this.backgroundColor));\n\n      if (value) {\n        nativeElement.classList.add(\"mat-background-\".concat(value));\n      }\n\n      this._backgroundColor = value;\n    }\n  }]);\n\n  return MatTabGroup;\n}(_MatTabGroupMixinBase);\n\nMatTabGroup.ɵfac = function MatTabGroup_Factory(t) {\n  return new (t || MatTabGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_TABS_CONFIG, 8));\n};\n\nMatTabGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTabGroup,\n  selectors: [[\"mat-tab-group\"]],\n  contentQueries: function MatTabGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTab, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabs = _t);\n    }\n  },\n  viewQuery: function MatTabGroup_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c7, true);\n      ɵngcc0.ɵɵviewQuery(_c8, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabBodyWrapper = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabHeader = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-tab-group\"],\n  hostVars: 4,\n  hostBindings: function MatTabGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-tab-group-dynamic-height\", ctx.dynamicHeight)(\"mat-tab-group-inverted-header\", ctx.headerPosition === \"below\");\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    headerPosition: \"headerPosition\",\n    animationDuration: \"animationDuration\",\n    dynamicHeight: \"dynamicHeight\",\n    selectedIndex: \"selectedIndex\",\n    backgroundColor: \"backgroundColor\"\n  },\n  outputs: {\n    selectedIndexChange: \"selectedIndexChange\",\n    focusChange: \"focusChange\",\n    animationDone: \"animationDone\",\n    selectedTabChange: \"selectedTabChange\"\n  },\n  exportAs: [\"matTabGroup\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 4,\n  consts: [[3, \"selectedIndex\", \"disableRipple\", \"indexFocused\", \"selectFocusedIndex\"], [\"tabHeader\", \"\"], [\"class\", \"mat-tab-label\", \"role\", \"tab\", \"matTabLabelWrapper\", \"\", \"mat-ripple\", \"\", \"cdkMonitorElementFocus\", \"\", 3, \"id\", \"mat-tab-label-active\", \"disabled\", \"matRippleDisabled\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-tab-body-wrapper\"], [\"tabBodyWrapper\", \"\"], [\"role\", \"tabpanel\", 3, \"id\", \"mat-tab-body-active\", \"content\", \"position\", \"origin\", \"animationDuration\", \"_onCentered\", \"_onCentering\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"tab\", \"matTabLabelWrapper\", \"\", \"mat-ripple\", \"\", \"cdkMonitorElementFocus\", \"\", 1, \"mat-tab-label\", 3, \"id\", \"disabled\", \"matRippleDisabled\", \"click\"], [1, \"mat-tab-label-content\"], [3, \"ngIf\"], [3, \"cdkPortalOutlet\"], [\"role\", \"tabpanel\", 3, \"id\", \"content\", \"position\", \"origin\", \"animationDuration\", \"_onCentered\", \"_onCentering\"]],\n  template: function MatTabGroup_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"mat-tab-header\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"indexFocused\", function MatTabGroup_Template_mat_tab_header_indexFocused_0_listener($event) {\n        return ctx._focusChanged($event);\n      })(\"selectFocusedIndex\", function MatTabGroup_Template_mat_tab_header_selectFocusedIndex_0_listener($event) {\n        return ctx.selectedIndex = $event;\n      });\n      ɵngcc0.ɵɵtemplate(2, MatTabGroup_div_2_Template, 4, 14, \"div\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n      ɵngcc0.ɵɵtemplate(5, MatTabGroup_mat_tab_body_5_Template, 1, 8, \"mat-tab-body\", 5);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"selectedIndex\", ctx.selectedIndex)(\"disableRipple\", ctx.disableRipple);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._tabs);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._tabs);\n    }\n  },\n  directives: [MatTabHeader, ɵngcc6.NgForOf, MatTabLabelWrapper, ɵngcc4.MatRipple, ɵngcc7.CdkMonitorFocus, ɵngcc6.NgIf, ɵngcc8.CdkPortalOutlet, MatTabBody],\n  styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatTabGroup.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_TABS_CONFIG]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatTabGroup.propDecorators = {\n  _tabs: [{\n    type: ContentChildren,\n    args: [MatTab]\n  }],\n  _tabBodyWrapper: [{\n    type: ViewChild,\n    args: ['tabBodyWrapper']\n  }],\n  _tabHeader: [{\n    type: ViewChild,\n    args: ['tabHeader']\n  }],\n  dynamicHeight: [{\n    type: Input\n  }],\n  selectedIndex: [{\n    type: Input\n  }],\n  headerPosition: [{\n    type: Input\n  }],\n  animationDuration: [{\n    type: Input\n  }],\n  backgroundColor: [{\n    type: Input\n  }],\n  selectedIndexChange: [{\n    type: Output\n  }],\n  focusChange: [{\n    type: Output\n  }],\n  animationDone: [{\n    type: Output\n  }],\n  selectedTabChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabGroup, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tab-group',\n      exportAs: 'matTabGroup',\n      template: \"<mat-tab-header #tabHeader [selectedIndex]=\\\"selectedIndex\\\" [disableRipple]=\\\"disableRipple\\\" (indexFocused)=\\\"_focusChanged($event)\\\" (selectFocusedIndex)=\\\"selectedIndex = $event\\\"><div class=\\\"mat-tab-label\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabLabelId(i)\\\" [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\" [attr.aria-posinset]=\\\"i + 1\\\" [attr.aria-setsize]=\\\"_tabs.length\\\" [attr.aria-controls]=\\\"_getTabContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex == i\\\" [attr.aria-label]=\\\"tab.ariaLabel || null\\\" [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\" [class.mat-tab-label-active]=\\\"selectedIndex == i\\\" [disabled]=\\\"tab.disabled\\\" [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\" (click)=\\\"_handleClick(tab, tabHeader, i)\\\"><div class=\\\"mat-tab-label-content\\\"><ng-template [ngIf]=\\\"tab.templateLabel\\\"><ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template></ng-template><ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template></div></div></mat-tab-header><div class=\\\"mat-tab-body-wrapper\\\" #tabBodyWrapper><mat-tab-body role=\\\"tabpanel\\\" *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabContentId(i)\\\" [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\" [class.mat-tab-body-active]=\\\"selectedIndex == i\\\" [content]=\\\"tab.content\\\" [position]=\\\"tab.position\\\" [origin]=\\\"tab.origin\\\" [animationDuration]=\\\"animationDuration\\\" (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\" (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\"></mat-tab-body></div>\",\n      styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['color', 'disableRipple'],\n      host: {\n        'class': 'mat-tab-group',\n        '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n        '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TABS_CONFIG]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    headerPosition: [{\n      type: Input\n    }],\n    selectedIndexChange: [{\n      type: Output\n    }],\n    focusChange: [{\n      type: Output\n    }],\n    animationDone: [{\n      type: Output\n    }],\n    selectedTabChange: [{\n      type: Output\n    }],\n    animationDuration: [{\n      type: Input\n    }],\n    dynamicHeight: [{\n      type: Input\n    }],\n    selectedIndex: [{\n      type: Input\n    }],\n    backgroundColor: [{\n      type: Input\n    }],\n    _tabs: [{\n      type: ContentChildren,\n      args: [MatTab]\n    }],\n    _tabBodyWrapper: [{\n      type: ViewChild,\n      args: ['tabBodyWrapper']\n    }],\n    _tabHeader: [{\n      type: ViewChild,\n      args: ['tabHeader']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatTabNav.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatTabNavBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatTabNavBase(_elementRef) {\n  _classCallCheck(this, MatTabNavBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n\n\nvar MatTabNav = /*#__PURE__*/function (_MatTabNavMixinBase2) {\n  _inherits(MatTabNav, _MatTabNavMixinBase2);\n\n  var _super7 = _createSuper(MatTabNav);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _dir\n   * @param {?} _ngZone\n   * @param {?} _changeDetectorRef\n   * @param {?} _viewportRuler\n   */\n  function MatTabNav(elementRef, _dir, _ngZone, _changeDetectorRef, _viewportRuler) {\n    var _this16;\n\n    _classCallCheck(this, MatTabNav);\n\n    _this16 = _super7.call(this, elementRef);\n    _this16._dir = _dir;\n    _this16._ngZone = _ngZone;\n    _this16._changeDetectorRef = _changeDetectorRef;\n    _this16._viewportRuler = _viewportRuler;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    _this16._onDestroy = new Subject();\n    return _this16;\n  }\n  /**\n   * Background color of the tab nav.\n   * @return {?}\n   */\n\n\n  _createClass(MatTabNav, [{\n    key: \"updateActiveLink\",\n\n    /**\n     * Notifies the component that the active link has been changed.\n     * \\@breaking-change 8.0.0 `element` parameter to be removed.\n     * @param {?} element\n     * @return {?}\n     */\n    value: function updateActiveLink(element) {\n      // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n      // @breaking-change 8.0.0\n      this._activeLinkChanged = !!element;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this17 = this;\n\n      this._ngZone.runOutsideAngular(function () {\n        /** @type {?} */\n        var dirChange = _this17._dir ? _this17._dir.change : of(null);\n        return merge(dirChange, _this17._viewportRuler.change(10)).pipe(takeUntil(_this17._onDestroy)).subscribe(function () {\n          return _this17._alignInkBar();\n        });\n      });\n    }\n    /**\n     * Checks if the active link has been changed and, if so, will update the ink bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      if (this._activeLinkChanged) {\n        /** @type {?} */\n        var activeTab = this._tabLinks.find(function (tab) {\n          return tab.active;\n        });\n\n        this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n\n        this._alignInkBar();\n\n        this._activeLinkChanged = false;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n    }\n    /**\n     * Aligns the ink bar to the active link.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_alignInkBar\",\n    value: function _alignInkBar() {\n      if (this._activeLinkElement) {\n        this._inkBar.show();\n\n        this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n      } else {\n        this._inkBar.hide();\n      }\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      return this._backgroundColor;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var nativeElement = this._elementRef.nativeElement;\n      nativeElement.classList.remove(\"mat-background-\".concat(this.backgroundColor));\n\n      if (value) {\n        nativeElement.classList.add(\"mat-background-\".concat(value));\n      }\n\n      this._backgroundColor = value;\n    }\n  }]);\n\n  return MatTabNav;\n}(_MatTabNavMixinBase);\n\nMatTabNav.ɵfac = function MatTabNav_Factory(t) {\n  return new (t || MatTabNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ViewportRuler));\n};\n\nMatTabNav.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTabNav,\n  selectors: [[\"\", \"mat-tab-nav-bar\", \"\"]],\n  contentQueries: function MatTabNav_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLink, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabLinks = _t);\n    }\n  },\n  viewQuery: function MatTabNav_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatInkBar, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inkBar = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-tab-nav-bar\"],\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    backgroundColor: \"backgroundColor\"\n  },\n  exportAs: [\"matTabNavBar\", \"matTabNav\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  attrs: _c9,\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"mat-tab-links\", 3, \"cdkObserveContent\"]],\n  template: function MatTabNav_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatTabNav_Template_div_cdkObserveContent_0_listener() {\n        return ctx._alignInkBar();\n      });\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelement(2, \"mat-ink-bar\");\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  directives: [ɵngcc5.CdkObserveContent, MatInkBar],\n  styles: [\".mat-tab-nav-bar{overflow:hidden;position:relative;flex-shrink:0}.mat-tab-links{position:relative;display:flex}[mat-align-tabs=center] .mat-tab-links{justify-content:center}[mat-align-tabs=end] .mat-tab-links{justify-content:flex-end}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:0}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-link:focus{outline:dotted 2px}}.mat-tab-link.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-link.mat-tab-disabled{opacity:.5}}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-link{opacity:1}}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media (max-width:599px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatTabNav.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ViewportRuler\n  }];\n};\n\nMatTabNav.propDecorators = {\n  _inkBar: [{\n    type: ViewChild,\n    args: [MatInkBar]\n  }],\n  _tabLinks: [{\n    type: ContentChildren,\n    args: [forwardRef(function () {\n      return MatTabLink;\n    }), {\n      descendants: true\n    }]\n  }],\n  backgroundColor: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabNav, [{\n    type: Component,\n    args: [{\n      selector: '[mat-tab-nav-bar]',\n      exportAs: 'matTabNavBar, matTabNav',\n      inputs: ['color', 'disableRipple'],\n      template: \"<div class=\\\"mat-tab-links\\\" (cdkObserveContent)=\\\"_alignInkBar()\\\"><ng-content></ng-content><mat-ink-bar></mat-ink-bar></div>\",\n      styles: [\".mat-tab-nav-bar{overflow:hidden;position:relative;flex-shrink:0}.mat-tab-links{position:relative;display:flex}[mat-align-tabs=center] .mat-tab-links{justify-content:center}[mat-align-tabs=end] .mat-tab-links{justify-content:flex-end}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:0}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-link:focus{outline:dotted 2px}}.mat-tab-link.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-link.mat-tab-disabled{opacity:.5}}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-link{opacity:1}}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media (max-width:599px){.mat-tab-link{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}\"],\n      host: {\n        'class': 'mat-tab-nav-bar'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.ViewportRuler\n    }];\n  }, {\n    backgroundColor: [{\n      type: Input\n    }],\n    _inkBar: [{\n      type: ViewChild,\n      args: [MatInkBar]\n    }],\n    _tabLinks: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return MatTabLink;\n      }), {\n        descendants: true\n      }]\n    }]\n  });\n})(); // Boilerplate for applying mixins to MatTabLink.\n\n\nvar MatTabLinkBase = function MatTabLinkBase() {\n  _classCallCheck(this, MatTabLinkBase);\n};\n/** @type {?} */\n\n\nvar _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n\n\nvar MatTabLink = /*#__PURE__*/function (_MatTabLinkMixinBase2) {\n  _inherits(MatTabLink, _MatTabLinkMixinBase2);\n\n  var _super8 = _createSuper(MatTabLink);\n\n  /**\n   * @param {?} _tabNavBar\n   * @param {?} _elementRef\n   * @param {?} ngZone\n   * @param {?} platform\n   * @param {?} globalRippleOptions\n   * @param {?} tabIndex\n   * @param {?=} _focusMonitor\n   */\n  function MatTabLink(_tabNavBar, _elementRef, ngZone, platform, globalRippleOptions, tabIndex, _focusMonitor) {\n    var _this18;\n\n    _classCallCheck(this, MatTabLink);\n\n    _this18 = _super8.call(this);\n    _this18._tabNavBar = _tabNavBar;\n    _this18._elementRef = _elementRef;\n    _this18._focusMonitor = _focusMonitor;\n    /**\n     * Whether the tab link is active or not.\n     */\n\n    _this18._isActive = false;\n    _this18._tabLinkRipple = new RippleRenderer(_assertThisInitialized(_this18), ngZone, _elementRef, platform);\n\n    _this18._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    _this18.rippleConfig = globalRippleOptions || {};\n    _this18.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n\n    return _this18;\n  }\n  /**\n   * Whether the link is active.\n   * @return {?}\n   */\n\n\n  _createClass(MatTabLink, [{\n    key: \"ngOnDestroy\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnDestroy() {\n      this._tabLinkRipple._removeTriggerEvents();\n\n      if (this._focusMonitor) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return this._isActive;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value !== this._isActive) {\n        this._isActive = value;\n\n        this._tabNavBar.updateActiveLink(this._elementRef);\n      }\n    }\n    /**\n     * Whether ripples are disabled on interaction.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"rippleDisabled\",\n    get: function get() {\n      return this.disabled || this.disableRipple || this._tabNavBar.disableRipple || !!this.rippleConfig.disabled;\n    }\n  }]);\n\n  return MatTabLink;\n}(_MatTabLinkMixinBase);\n\nMatTabLink.ɵfac = function MatTabLink_Factory(t) {\n  return new (t || MatTabLink)(ɵngcc0.ɵɵdirectiveInject(MatTabNav), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.FocusMonitor));\n};\n\nMatTabLink.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTabLink,\n  selectors: [[\"\", \"mat-tab-link\", \"\"], [\"\", \"matTabLink\", \"\"]],\n  hostAttrs: [1, \"mat-tab-link\"],\n  hostVars: 7,\n  hostBindings: function MatTabLink_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-current\", ctx.active)(\"aria-disabled\", ctx.disabled.toString())(\"tabIndex\", ctx.tabIndex);\n      ɵngcc0.ɵɵclassProp(\"mat-tab-disabled\", ctx.disabled)(\"mat-tab-label-active\", ctx.active);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    active: \"active\"\n  },\n  exportAs: [\"matTabLink\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTabLink.ctorParameters = function () {\n  return [{\n    type: MatTabNav\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: FocusMonitor\n  }];\n};\n\nMatTabLink.propDecorators = {\n  active: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabLink, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-tab-link], [matTabLink]',\n      exportAs: 'matTabLink',\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      host: {\n        'class': 'mat-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mat-tab-disabled]': 'disabled',\n        '[class.mat-tab-label-active]': 'active'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatTabNav\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: ɵngcc7.FocusMonitor\n    }];\n  }, {\n    active: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatTabsModule = function MatTabsModule() {\n  _classCallCheck(this, MatTabsModule);\n};\n\nMatTabsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTabsModule\n});\nMatTabsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatTabsModule_Factory(t) {\n    return new (t || MatTabsModule)();\n  },\n  imports: [[CommonModule, MatCommonModule, PortalModule, MatRippleModule, ObserversModule, A11yModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTabsModule, {\n    declarations: function declarations() {\n      return [MatTabGroup, MatTabLabel, MatTab, MatInkBar, MatTabLabelWrapper, MatTabNav, MatTabLink, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabContent];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule, PortalModule, MatRippleModule, ObserversModule, A11yModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatTabGroup, MatTabLabel, MatTab, MatTabNav, MatTabLink, MatTabContent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTabsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, PortalModule, MatRippleModule, ObserversModule, A11yModule],\n      // Don't export all components because some are only to be used internally.\n      exports: [MatCommonModule, MatTabGroup, MatTabLabel, MatTab, MatTabNav, MatTabLink, MatTabContent],\n      declarations: [MatTabGroup, MatTabLabel, MatTab, MatInkBar, MatTabLabelWrapper, MatTabNav, MatTabLink, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabContent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatInkBar, _MAT_INK_BAR_POSITIONER, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, MatTabContent, MatTabsModule, MatTabChangeEvent, MAT_TABS_CONFIG, MatTabGroupBase, _MatTabGroupMixinBase, MatTabGroup, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵa21, MatTabBase as ɵf21, _MatTabMixinBase as ɵg21, MatTabHeaderBase as ɵb21, _MatTabHeaderMixinBase as ɵc21, MatTabLabelWrapperBase as ɵd21, _MatTabLabelWrapperMixinBase as ɵe21, MatTabLinkBase as ɵj21, MatTabNavBase as ɵh21, _MatTabLinkMixinBase as ɵk21, _MatTabNavMixinBase as ɵi21 };","map":{"version":3,"sources":["../../../src/lib/tabs/ink-bar.ts","../../../src/lib/tabs/tab-content.ts","../../../src/lib/tabs/tab-label.ts","../../../src/lib/tabs/tab.ts","../../../src/lib/tabs/tabs-animations.ts","../../../src/lib/tabs/tab-body.ts","../../../src/lib/tabs/tab-label-wrapper.ts","../../../src/lib/tabs/tab-header.ts","../../../src/lib/tabs/tab-group.ts","../../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../../src/lib/tabs/tabs-module.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject, timer, fromEvent} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\n\n\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions =\n    normalizePassiveListenerOptions({passive: true}) as EventListenerOptions;\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n  @ViewChild('nextPaginator') _nextPaginator: ElementRef<HTMLElement>;\n  @ViewChild('previousPaginator') _previousPaginator: ElementRef<HTMLElement>;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  /** Cached text content of the header. */\n  private _currentTextContent: string;\n\n  /** Stream that will stop the automated scrolling. */\n  private _stopScrolling = new Subject<void>();\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n  private _selectedIndex: number = 0;\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` and `_platforms` parameters to be made required.\n              private _ngZone?: NgZone,\n              private _platform?: Platform) {\n    super();\n\n    const element = _elementRef.nativeElement;\n    const bindEvent = () => {\n      fromEvent(element, 'mouseleave')\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => {\n          this._stopInterval();\n        });\n    };\n\n    // @breaking-change 8.0.0 remove null check once _ngZone is made into a required parameter.\n    if (_ngZone) {\n      // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n      _ngZone.runOutsideAngular(bindEvent);\n    } else {\n      bindEvent();\n    }\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Handles keyboard events on the header. */\n  _handleKeydown(event: KeyboardEvent) {\n    // We don't handle any key bindings with a modifier key.\n    if (hasModifierKey(event)) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngAfterViewInit() {\n    // We need to handle these events manually, because we want to bind passive event listeners.\n    fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('before');\n      });\n\n    fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._handlePaginatorPress('after');\n      });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._stopScrolling.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const textContent = this._elementRef.nativeElement.textContent;\n\n    // We need to diff the text content of the header, because the MutationObserver callback\n    // will fire even if the text content didn't change which is inefficient and is prone\n    // to infinite loops if a poorly constructed expression is passed in (see #14249).\n    if (textContent !== this._currentTextContent) {\n      this._currentTextContent = textContent;\n\n      const zoneCallback = () => {\n        this.updatePagination();\n        this._alignInkBarToSelectedTab();\n        this._changeDetectorRef.markForCheck();\n      };\n\n      // The content observer runs outside the `NgZone` by default, which\n      // means that we need to bring the callback back in ourselves.\n      // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n      this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n    }\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const platform = this._platform;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    // We round the `transform` here, because transforms with sub-pixel precision cause some\n    // browsers to blur the content of the element.\n    this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n    // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n    // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n    // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n    // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n    // @breaking-change 8.0.0 Remove null check for `platform`.\n    if (platform && (platform.TRIDENT || platform.EDGE)) {\n      this._tabListContainer.nativeElement.scrollLeft = 0;\n    }\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(value: number) {\n    this._scrollTo(value);\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(direction: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n\n    return this._scrollTo(this._scrollDistance + scrollAmount);\n  }\n\n  /** Handles click events on the pagination arrows. */\n  _handlePaginatorClick(direction: ScrollDirection) {\n    this._stopInterval();\n    this._scrollHeader(direction);\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n\n  /** Stops the currently-running paginator interval.  */\n  _stopInterval() {\n    this._stopScrolling.next();\n  }\n\n  /**\n   * Handles the user pressing down on one of the paginators.\n   * Starts scrolling the header after a certain amount of time.\n   * @param direction In which direction the paginator should be scrolled.\n   */\n  _handlePaginatorPress(direction: ScrollDirection) {\n    // Avoid overlapping timers.\n    this._stopInterval();\n\n    // Start a timer after the delay and keep firing based on the interval.\n    timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n      // Keep the timer going until something tells it to stop or the component is destroyed.\n      .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n      .subscribe(() => {\n        const {maxScrollDistance, distance} = this._scrollHeader(direction);\n\n        // Stop the timer if we've reached the start or the end.\n        if (distance === 0 || distance >= maxScrollDistance) {\n          this._stopInterval();\n        }\n      });\n  }\n\n  /**\n   * Scrolls the header to a given position.\n   * @param position Position to which to scroll.\n   * @returns Information on the current scroll distance and the maximum.\n   */\n  private _scrollTo(position: number) {\n    const maxScrollDistance = this._getMaxScrollDistance();\n    this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n\n    return {maxScrollDistance, distance: this._scrollDistance};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n  @Input()\n  get animationDuration(): string { return this._animationDuration; }\n  set animationDuration(value: string) {\n    this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n  }\n  private _animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the tab link ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction.\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      !!this.rippleConfig.disabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n    this.rippleConfig = globalRippleOptions || {};\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n"]},"metadata":{},"sourceType":"module"}