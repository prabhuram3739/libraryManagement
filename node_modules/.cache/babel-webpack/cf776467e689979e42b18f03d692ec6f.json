{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, Inject, isDevMode, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatToolbar.\n\n/**\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nvar _c1 = [\"*\", \"mat-toolbar-row\"];\n\nvar MatToolbarBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatToolbarBase(_elementRef) {\n  _classCallCheck(this, MatToolbarBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\nvar MatToolbarRow = function MatToolbarRow() {\n  _classCallCheck(this, MatToolbarRow);\n};\n\nMatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) {\n  return new (t || MatToolbarRow)();\n};\n\nMatToolbarRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatToolbarRow,\n  selectors: [[\"mat-toolbar-row\"]],\n  hostAttrs: [1, \"mat-toolbar-row\"],\n  exportAs: [\"matToolbarRow\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatToolbarRow, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-toolbar-row',\n      exportAs: 'matToolbarRow',\n      host: {\n        'class': 'mat-toolbar-row'\n      }\n    }]\n  }], null, null);\n})();\n\nvar MatToolbar = /*#__PURE__*/function (_MatToolbarMixinBase2) {\n  _inherits(MatToolbar, _MatToolbarMixinBase2);\n\n  var _super = _createSuper(MatToolbar);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _platform\n   * @param {?=} document\n   */\n  function MatToolbar(elementRef, _platform, document) {\n    var _this;\n\n    _classCallCheck(this, MatToolbar);\n\n    _this = _super.call(this, elementRef);\n    _this._platform = _platform; // TODO: make the document a required param when doing breaking changes.\n\n    _this._document = document;\n    return _this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatToolbar, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      if (!isDevMode() || !this._platform.isBrowser) {\n        return;\n      }\n\n      this._checkToolbarMixedModes();\n\n      this._toolbarRows.changes.subscribe(function () {\n        return _this2._checkToolbarMixedModes();\n      });\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkToolbarMixedModes\",\n    value: function _checkToolbarMixedModes() {\n      var _this3 = this;\n\n      if (!this._toolbarRows.length) {\n        return;\n      } // Check if there are any other DOM nodes that can display content but aren't inside of\n      // a <mat-toolbar-row> element.\n\n      /** @type {?} */\n\n\n      var isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(function (node) {\n        return !(node.classList && node.classList.contains('mat-toolbar-row'));\n      }).filter(function (node) {\n        return node.nodeType !== (_this3._document ? _this3._document.COMMENT_NODE : 8);\n      }).some(function (node) {\n        return !!(node.textContent && node.textContent.trim());\n      });\n\n      if (isCombinedUsage) {\n        throwToolbarMixedModesError();\n      }\n    }\n  }]);\n\n  return MatToolbar;\n}(_MatToolbarMixinBase);\n\nMatToolbar.ɵfac = function MatToolbar_Factory(t) {\n  return new (t || MatToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatToolbar.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatToolbar,\n  selectors: [[\"mat-toolbar\"]],\n  contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatToolbarRow, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-toolbar\"],\n  hostVars: 4,\n  hostBindings: function MatToolbar_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  exportAs: [\"matToolbar\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 0,\n  template: function MatToolbar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵprojection(1, 1);\n    }\n  },\n  styles: [\"@media (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatToolbar.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nMatToolbar.propDecorators = {\n  _toolbarRows: [{\n    type: ContentChildren,\n    args: [MatToolbarRow]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatToolbar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-toolbar',\n      exportAs: 'matToolbar',\n      template: \"<ng-content></ng-content><ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\",\n      styles: [\"@media (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\"],\n      inputs: ['color'],\n      host: {\n        'class': 'mat-toolbar',\n        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    _toolbarRows: [{\n      type: ContentChildren,\n      args: [MatToolbarRow]\n    }]\n  });\n})();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatToolbarModule = function MatToolbarModule() {\n  _classCallCheck(this, MatToolbarModule);\n};\n\nMatToolbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatToolbarModule\n});\nMatToolbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatToolbarModule_Factory(t) {\n    return new (t || MatToolbarModule)();\n  },\n  imports: [[MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatToolbarModule, {\n    declarations: function declarations() {\n      return [MatToolbar, MatToolbarRow];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatToolbar, MatToolbarRow, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatToolbarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n      declarations: [MatToolbar, MatToolbarRow]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatToolbarModule, throwToolbarMixedModesError, MatToolbarBase, _MatToolbarMixinBase, MatToolbarRow, MatToolbar };","map":{"version":3,"sources":["../../../src/lib/toolbar/toolbar.ts","../../../src/lib/toolbar/toolbar-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n"]},"metadata":{},"sourceType":"module"}