{"ast":null,"code":"import _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { HAMMER_LOADER, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by MatTooltip.\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nvar matTooltipAnimations = {\n  /**\n   * Animation that transitions a tooltip in and out.\n   */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Time in ms to throttle repositioning after scroll events.\n * @type {?}\n */\n\nvar SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @type {?}\n */\n\nvar TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(\"Tooltip position \\\"\".concat(position, \"\\\" is invalid.\"));\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n * @type {?}\n */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  };\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n * @type {?}\n */\n\nvar MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nvar MatTooltip = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} _elementRef\n   * @param {?} _scrollDispatcher\n   * @param {?} _viewContainerRef\n   * @param {?} _ngZone\n   * @param {?} platform\n   * @param {?} _ariaDescriber\n   * @param {?} _focusMonitor\n   * @param {?} scrollStrategy\n   * @param {?} _dir\n   * @param {?} _defaultOptions\n   * @param {?=} hammerLoader\n   */\n  function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, hammerLoader) {\n    var _this = this;\n\n    _classCallCheck(this, MatTooltip);\n\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    /**\n     * The default delay in ms before showing the tooltip after show is called\n     */\n\n    this.showDelay = this._defaultOptions.showDelay;\n    /**\n     * The default delay in ms before hiding the tooltip after hide is called\n     */\n\n    this.hideDelay = this._defaultOptions.hideDelay;\n    this._message = '';\n    this._manualListeners = new Map();\n    /**\n     * Emits when the component is destroyed.\n     */\n\n    this._destroyed = new Subject();\n    this._scrollStrategy = scrollStrategy;\n    /** @type {?} */\n\n    var element = _elementRef.nativeElement;\n    /** @type {?} */\n\n    var elementStyle =\n    /** @type {?} */\n    element.style;\n    /** @type {?} */\n\n    var hasGestures = typeof window === 'undefined' ||\n    /** @type {?} */\n    window.Hammer || hammerLoader; // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners.set('mouseenter', function () {\n        return _this.show();\n      }).set('mouseleave', function () {\n        return _this.hide();\n      });\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', function () {\n        return _this.show();\n      });\n    }\n\n    this._manualListeners.forEach(function (listener, event) {\n      return element.addEventListener(event, listener);\n    });\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    } // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n\n\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(function () {\n          return _this.hide(0);\n        });\n      } else if (origin === 'keyboard') {\n        _ngZone.run(function () {\n          return _this.show();\n        });\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n  /**\n   * Allows the user to define the position of the tooltip relative to the parent element\n   * @return {?}\n   */\n\n\n  _createClass(MatTooltip, [{\n    key: \"ngOnDestroy\",\n\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    value: function ngOnDestroy() {\n      var _this2 = this;\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._tooltipInstance = null;\n      } // Clean up the event listeners set in the constructor\n\n\n      this._manualListeners.forEach(function (listener, event) {\n        _this2._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this3 = this;\n\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;\n\n      if (this.disabled || !this.message || this._isTooltipVisible() && !\n      /** @type {?} */\n      this._tooltipInstance._showTimeoutId && !\n      /** @type {?} */\n      this._tooltipInstance._hideTimeoutId) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var overlayRef = this._createOverlay();\n\n      this._detach();\n\n      this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n      this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n      this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this3._detach();\n      });\n\n      this._setTooltipClass(this._tooltipClass);\n\n      this._updateTooltipMessage();\n\n      /** @type {?} */\n      this._tooltipInstance.show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;\n\n      if (this._tooltipInstance) {\n        this._tooltipInstance.hide(delay);\n      }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isTooltipVisible\",\n    value: function _isTooltipVisible() {\n      return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Handles the keydown events on the host element.\n     * @param {?} e\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(e) {\n      if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n        e.stopPropagation();\n        this.hide(0);\n      }\n    }\n    /**\n     * Handles the touchend events on the host element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleTouchend\",\n    value: function _handleTouchend() {\n      this.hide(this._defaultOptions.touchendHideDelay);\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this4 = this;\n\n      if (this._overlayRef) {\n        return this._overlayRef;\n      }\n      /** @type {?} */\n\n\n      var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n      /** @type {?} */\n\n\n      var strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n\n      strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n        if (_this4._tooltipInstance) {\n          if (change.scrollableViewProperties.isOverlayClipped && _this4._tooltipInstance.isVisible()) {\n            // After position changes occur and the overlay is clipped by\n            // a parent scrollable then close the tooltip.\n            _this4._ngZone.run(function () {\n              return _this4.hide(0);\n            });\n          }\n        }\n      });\n      this._overlayRef = this._overlay.create({\n        direction: this._dir,\n        positionStrategy: strategy,\n        panelClass: TOOLTIP_PANEL_CLASS,\n        scrollStrategy: this._scrollStrategy()\n      });\n\n      this._updatePosition();\n\n      this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this4._detach();\n      });\n\n      return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n      }\n\n      this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updatePosition\",\n    value: function _updatePosition() {\n      /** @type {?} */\n      var position =\n      /** @type {?} */\n\n      /** @type {?} */\n      this._overlayRef.getConfig().positionStrategy;\n      /** @type {?} */\n\n\n      var origin = this._getOrigin();\n      /** @type {?} */\n\n\n      var overlay = this._getOverlayPosition();\n\n      position.withPositions([Object.assign({}, origin.main, overlay.main), Object.assign({}, origin.fallback, overlay.fallback)]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOrigin\",\n    value: function _getOrigin() {\n      /** @type {?} */\n      var isLtr = !this._dir || this._dir.value == 'ltr';\n      /** @type {?} */\n\n      var position = this.position;\n      /** @type {?} */\n\n      var originPosition;\n\n      if (position == 'above' || position == 'below') {\n        originPosition = {\n          originX: 'center',\n          originY: position == 'above' ? 'top' : 'bottom'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        originPosition = {\n          originX: 'start',\n          originY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        originPosition = {\n          originX: 'end',\n          originY: 'center'\n        };\n      } else {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),\n          x = _this$_invertPosition.x,\n          y = _this$_invertPosition.y;\n\n      return {\n        main: originPosition,\n        fallback: {\n          originX: x,\n          originY: y\n        }\n      };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      /** @type {?} */\n      var isLtr = !this._dir || this._dir.value == 'ltr';\n      /** @type {?} */\n\n      var position = this.position;\n      /** @type {?} */\n\n      var overlayPosition;\n\n      if (position == 'above') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'bottom'\n        };\n      } else if (position == 'below') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'top'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'end',\n          overlayY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'start',\n          overlayY: 'center'\n        };\n      } else {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),\n          x = _this$_invertPosition2.x,\n          y = _this$_invertPosition2.y;\n\n      return {\n        main: overlayPosition,\n        fallback: {\n          overlayX: x,\n          overlayY: y\n        }\n      };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTooltipMessage\",\n    value: function _updateTooltipMessage() {\n      var _this5 = this;\n\n      // Must wait for the message to be painted to the tooltip so that the overlay can properly\n      // calculate the correct positioning based on the size of the text.\n      if (this._tooltipInstance) {\n        this._tooltipInstance.message = this.message;\n\n        this._tooltipInstance._markForCheck();\n\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n          if (_this5._tooltipInstance) {\n            /** @type {?} */\n            _this5._overlayRef.updatePosition();\n          }\n        });\n      }\n    }\n    /**\n     * Updates the tooltip class\n     * @private\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTooltipClass\",\n    value: function _setTooltipClass(tooltipClass) {\n      if (this._tooltipInstance) {\n        this._tooltipInstance.tooltipClass = tooltipClass;\n\n        this._tooltipInstance._markForCheck();\n      }\n    }\n    /**\n     * Inverts an overlay position.\n     * @private\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n\n  }, {\n    key: \"_invertPosition\",\n    value: function _invertPosition(x, y) {\n      if (this.position === 'above' || this.position === 'below') {\n        if (y === 'top') {\n          y = 'bottom';\n        } else if (y === 'bottom') {\n          y = 'top';\n        }\n      } else {\n        if (x === 'end') {\n          x = 'start';\n        } else if (x === 'start') {\n          x = 'end';\n        }\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value !== this._position) {\n        this._position = value;\n\n        if (this._overlayRef) {\n          this._updatePosition();\n\n          if (this._tooltipInstance) {\n            /** @type {?} */\n            this._tooltipInstance.show(0);\n          }\n\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n      if (this._disabled) {\n        this.hide(0);\n      }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n\n  }, {\n    key: \"message\",\n    get: function get() {\n      return this._message;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.\n\n\n      this._message = value != null ? \"\".concat(value).trim() : '';\n\n      if (!this._message && this._isTooltipVisible()) {\n        this.hide(0);\n      } else {\n        this._updateTooltipMessage();\n\n        this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n      }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"tooltipClass\",\n    get: function get() {\n      return this._tooltipClass;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._tooltipClass = value;\n\n      if (this._tooltipInstance) {\n        this._setTooltipClass(this._tooltipClass);\n      }\n    }\n  }]);\n\n  return MatTooltip;\n}();\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(HAMMER_LOADER, 8));\n};\n\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostBindings: function MatTooltip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"longpress\", function MatTooltip_longpress_HostBindingHandler() {\n        return ctx.show();\n      })(\"keydown\", function MatTooltip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"touchend\", function MatTooltip_touchend_HostBindingHandler() {\n        return ctx._handleTouchend();\n      });\n    }\n  },\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  },\n  exportAs: [\"matTooltip\"]\n});\n/** @nocollapse */\n\nMatTooltip.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: AriaDescriber\n  }, {\n    type: FocusMonitor\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [HAMMER_LOADER]\n    }]\n  }];\n};\n\nMatTooltip.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        '(longpress)': 'show()',\n        '(keydown)': '_handleKeydown($event)',\n        '(touchend)': '_handleTouchend()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [HAMMER_LOADER]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\n\n\nvar TooltipComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _breakpointObserver\n   */\n  function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n    _classCallCheck(this, TooltipComponent);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /**\n     * Property watched by the animation framework to show or hide the tooltip\n     */\n\n    this._visibility = 'initial';\n    /**\n     * Whether interactions on the page should close the tooltip\n     */\n\n    this._closeOnInteraction = false;\n    /**\n     * Subject for notifying that the tooltip has been hidden from the view\n     */\n\n    this._onHide = new Subject();\n    /**\n     * Stream that emits whether the user has a handset-sized display.\n     */\n\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n   * @return {?}\n   */\n\n\n  _createClass(TooltipComponent, [{\n    key: \"show\",\n    value: function show(delay) {\n      var _this6 = this;\n\n      // Cancel the delayed hide if it is scheduled\n      if (this._hideTimeoutId) {\n        clearTimeout(this._hideTimeoutId);\n        this._hideTimeoutId = null;\n      } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n      this._closeOnInteraction = true;\n      this._showTimeoutId = setTimeout(function () {\n        _this6._visibility = 'visible';\n        _this6._showTimeoutId = null; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        _this6._markForCheck();\n      }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide(delay) {\n      var _this7 = this;\n\n      // Cancel the delayed show if it is scheduled\n      if (this._showTimeoutId) {\n        clearTimeout(this._showTimeoutId);\n        this._showTimeoutId = null;\n      }\n\n      this._hideTimeoutId = setTimeout(function () {\n        _this7._visibility = 'hidden';\n        _this7._hideTimeoutId = null; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        _this7._markForCheck();\n      }, delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterHidden\",\n    value: function afterHidden() {\n      return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._onHide.complete();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_animationStart\",\n    value: function _animationStart() {\n      this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_animationDone\",\n    value: function _animationDone(event) {\n      /** @type {?} */\n      var toState =\n      /** @type {?} */\n      event.toState;\n\n      if (toState === 'hidden' && !this.isVisible()) {\n        this._onHide.next();\n      }\n\n      if (toState === 'visible' || toState === 'hidden') {\n        this._closeOnInteraction = true;\n      }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleBodyInteraction\",\n    value: function _handleBodyInteraction() {\n      if (this._closeOnInteraction) {\n        this.hide(0);\n      }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return TooltipComponent;\n}();\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\n\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var tmp_0_0 = null;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  directives: [ɵngcc7.NgClass],\n  pipes: [ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nTooltipComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: BreakpointObserver\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\",\n      styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        '(body:click)': 'this._handleBodyInteraction()',\n        'aria-hidden': 'true'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatTooltipModule = function MatTooltipModule() {\n  _classCallCheck(this, MatTooltipModule);\n};\n\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatTooltipModule_Factory(t) {\n    return new (t || MatTooltipModule)();\n  },\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: GestureConfig\n  }],\n  imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function declarations() {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function imports() {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatTooltip, TooltipComponent, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: GestureConfig\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations };","map":{"version":3,"sources":["../../../src/lib/tooltip/tooltip-animations.ts","../../../src/lib/tooltip/tooltip.ts","../../../src/lib/tooltip/tooltip-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n\n    if (_defaultOptions && _defaultOptions.position) {\n      this.position = _defaultOptions.position;\n    }\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n"]},"metadata":{},"sourceType":"module"}