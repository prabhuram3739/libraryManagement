{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar MatDialogConfig = function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /**\n   * The ARIA role of the dialog element.\n   */\n  this.role = 'dialog';\n  /**\n   * Custom class for the overlay pane.\n   */\n\n  this.panelClass = '';\n  /**\n   * Whether the dialog has a backdrop.\n   */\n\n  this.hasBackdrop = true;\n  /**\n   * Custom class for the backdrop,\n   */\n\n  this.backdropClass = '';\n  /**\n   * Whether the user can use escape or clicking on the backdrop to close the modal.\n   */\n\n  this.disableClose = false;\n  /**\n   * Width of the dialog.\n   */\n\n  this.width = '';\n  /**\n   * Height of the dialog.\n   */\n\n  this.height = '';\n  /**\n   * Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw\n   */\n\n  this.maxWidth = '80vw';\n  /**\n   * Data being injected into the child component.\n   */\n\n  this.data = null;\n  /**\n   * ID of the element that describes the dialog.\n   */\n\n  this.ariaDescribedBy = null;\n  /**\n   * Aria label to assign to the dialog element\n   */\n\n  this.ariaLabel = null;\n  /**\n   * Whether the dialog should focus the first focusable element on open.\n   */\n\n  this.autoFocus = true;\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar animationBody = [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n// specifying the transform explicitly, causes IE both to blur the dialog content and\n// decimate the animation performance. Leaving it as `none` solves both issues.\nstate('void, exit', style({\n  opacity: 0,\n  transform: 'scale(0.7)'\n})), state('enter', style({\n  transform: 'none'\n})), transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({\n  transform: 'none',\n  opacity: 1\n}))), transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n  opacity: 0\n})))];\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\n\nvar matDialogAnimations = {\n  /**\n   * Animation that is applied on the dialog container by defalt.\n   */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /**\n   * @deprecated \\@breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead.\n   */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\n\n\nvar MatDialogContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(MatDialogContainer, _BasePortalOutlet);\n\n  var _super = _createSuper(MatDialogContainer);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _changeDetectorRef\n   * @param {?} _document\n   * @param {?} _config\n   */\n  function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n    var _this;\n\n    _classCallCheck(this, MatDialogContainer);\n\n    _this = _super.call(this);\n    _this._elementRef = _elementRef;\n    _this._focusTrapFactory = _focusTrapFactory;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._document = _document;\n    _this._config = _config;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     */\n\n    _this._elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * State of the dialog animation.\n     */\n\n    _this._state = 'enter';\n    /**\n     * Emits when an animation state changes.\n     */\n\n    _this._animationStateChanged = new EventEmitter();\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     */\n\n    _this._ariaLabelledBy = null;\n    return _this;\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @template T\n   * @param {?} portal Portal to be attached as the dialog content.\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogContainer, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached()) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      this._savePreviouslyFocusedElement();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      if (this._portalOutlet.hasAttached()) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      this._savePreviouslyFocusedElement();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trapFocus\",\n    value: function _trapFocus() {\n      if (!this._focusTrap) {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      } // If were to attempt to focus immediately, then the content of the dialog would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty.\n\n\n      if (this._config.autoFocus) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_restoreFocus\",\n    value: function _restoreFocus() {\n      /** @type {?} */\n      var toFocus = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n        toFocus.focus();\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /**\n     * Saves a reference to the element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_savePreviouslyFocusedElement\",\n    value: function _savePreviouslyFocusedElement() {\n      var _this2 = this;\n\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened =\n        /** @type {?} */\n        this._document.activeElement; // Note that there is no focus method when rendering on the server.\n\n        if (this._elementRef.nativeElement.focus) {\n          // Move focus onto the dialog immediately in order to prevent the user from accidentally\n          // opening multiple dialogs at the same time. Needs to be async, because the element\n          // may not be focusable immediately.\n          Promise.resolve().then(function () {\n            return _this2._elementRef.nativeElement.focus();\n          });\n        }\n      }\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAnimationDone\",\n    value: function _onAnimationDone(event) {\n      if (event.toState === 'enter') {\n        this._trapFocus();\n      } else if (event.toState === 'exit') {\n        this._restoreFocus();\n      }\n\n      this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAnimationStart\",\n    value: function _onAnimationStart(event) {\n      this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_startExitAnimation\",\n    value: function _startExitAnimation() {\n      this._state = 'exit'; // Mark the container for check so it can react if the\n      // view container is using OnPush change detection.\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatDialogContainer;\n}(BasePortalOutlet);\n\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig));\n};\n\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  viewQuery: function MatDialogContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkPortalOutlet, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n  hostVars: 6,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  directives: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n/** @nocollapse */\n\nMatDialogContainer.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusTrapFactory\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: MatDialogConfig\n  }];\n};\n\nMatDialogContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\",\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button+.mat-button,.mat-dialog-actions .mat-button+.mat-raised-button,.mat-dialog-actions .mat-raised-button+.mat-button,.mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-button+.mat-raised-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-button,[dir=rtl] .mat-dialog-actions .mat-raised-button+.mat-raised-button{margin-left:0;margin-right:8px}\"],\n      encapsulation: ViewEncapsulation.None,\n      // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        'aria-modal': 'true',\n        '[attr.id]': '_id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': '_state',\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusTrapFactory\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n/** @type {?} */\n\n\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlayRef\n   * @param {?} _containerInstance\n   * @param {?=} _location\n   * @param {?=} id\n   */\n  function MatDialogRef(_overlayRef, _containerInstance, // @breaking-change 8.0.0 `_location` parameter to be removed.\n  _location) {\n    var _this3 = this;\n\n    var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"mat-dialog-\".concat(uniqueId++);\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /**\n     * Whether the user is allowed to close the dialog.\n     */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     */\n\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     */\n\n    this._afterClosed = new Subject();\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     */\n\n    this._beforeClosed = new Subject(); // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'enter';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.phaseName === 'done' && event.toState === 'exit';\n    }), take(1)).subscribe(function () {\n      return _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._afterClosed.next(_this3._result);\n\n      _this3._afterClosed.complete();\n\n      _this3.componentInstance =\n      /** @type {?} */\n      null;\n\n      _this3._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose;\n    })).subscribe(function () {\n      return _this3.close();\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param {?=} dialogResult Optional result to return to the dialog opener.\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.phaseName === 'start';\n      }), take(1)).subscribe(function () {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._overlayRef.detachBackdrop();\n      });\n\n      this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} position New dialog position.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      /** @type {?} */\n      var strategy =\n      /** @type {?} */\n      this._getPositionStrategy();\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      /** @type {?} */\n      this._overlayRef.updatePosition();\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      /** @type {?} */\n      this._getPositionStrategy().width(width).height(height);\n\n      /** @type {?} */\n      this._overlayRef.updatePosition();\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      /** @type {?} */\n      this._overlayRef.addPanelClass(classes);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      /** @type {?} */\n      this._overlayRef.removePanelClass(classes);\n\n      return (\n        /** @type {?} */\n        this\n      );\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpen\",\n    value: function afterOpen() {\n      return this.afterOpened();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @deprecated Use `beforeClosed` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"beforeClose\",\n    value: function beforeClose() {\n      return this.beforeClosed();\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPositionStrategy\",\n    value: function _getPositionStrategy() {\n      return (\n        /** @type {?} */\n        this._overlayRef.getConfig().positionStrategy\n      );\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\n\n\nvar MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\n\nvar MatDialog = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} _injector\n   * @param {?} _location\n   * @param {?} _defaultOptions\n   * @param {?} scrollStrategy\n   * @param {?} _parentDialog\n   * @param {?} _overlayContainer\n   */\n  function MatDialog(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n    var _this5 = this;\n\n    _classCallCheck(this, MatDialog);\n\n    this._overlay = _overlay;\n    this._injector = _injector;\n    this._location = _location;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._overlayContainer = _overlayContainer;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._ariaHiddenElements = new Map();\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(function () {\n      return _this5.openDialogs.length ? _this5._afterAllClosed : _this5._afterAllClosed.pipe(startWith(undefined));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Keeps track of the currently-open dialogs.\n   * @return {?}\n   */\n\n\n  _createClass(MatDialog, [{\n    key: \"open\",\n\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    value: function open(componentOrTemplateRef, config) {\n      var _this6 = this;\n\n      config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n      if (config.id && this.getDialogById(config.id)) {\n        throw Error(\"Dialog with id \\\"\".concat(config.id, \"\\\" exists already. The dialog id must be unique.\"));\n      }\n      /** @type {?} */\n\n\n      var overlayRef = this._createOverlay(config);\n      /** @type {?} */\n\n\n      var dialogContainer = this._attachDialogContainer(overlayRef, config);\n      /** @type {?} */\n\n\n      var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n      if (!this.openDialogs.length) {\n        this._hideNonDialogContentFromAssistiveTechnology();\n      }\n\n      this.openDialogs.push(dialogRef);\n      dialogRef.afterClosed().subscribe(function () {\n        return _this6._removeOpenDialog(dialogRef);\n      });\n      this.afterOpened.next(dialogRef);\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDialogById\",\n    value: function getDialogById(id) {\n      return this.openDialogs.find(function (dialog) {\n        return dialog.id === id;\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // Only close the dialogs at this level on destroy\n      // since the parent service may still be active.\n      this._closeDialogs(this._openDialogsAtThisLevel);\n\n      this._afterAllClosedAtThisLevel.complete();\n\n      this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(config) {\n      /** @type {?} */\n      var overlayConfig = this._getOverlayConfig(config);\n\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig(dialogConfig) {\n      /** @type {?} */\n      var state$$1 = new OverlayConfig({\n        positionStrategy: this._overlay.position().global(),\n        scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n        panelClass: dialogConfig.panelClass,\n        hasBackdrop: dialogConfig.hasBackdrop,\n        direction: dialogConfig.direction,\n        minWidth: dialogConfig.minWidth,\n        minHeight: dialogConfig.minHeight,\n        maxWidth: dialogConfig.maxWidth,\n        maxHeight: dialogConfig.maxHeight,\n        disposeOnNavigation: dialogConfig.closeOnNavigation\n      });\n\n      if (dialogConfig.backdropClass) {\n        state$$1.backdropClass = dialogConfig.backdropClass;\n      }\n\n      return state$$1;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n\n  }, {\n    key: \"_attachDialogContainer\",\n    value: function _attachDialogContainer(overlay, config) {\n      /** @type {?} */\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      /** @type {?} */\n\n      var injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatDialogConfig, config]]));\n      /** @type {?} */\n\n      var containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n      /** @type {?} */\n\n      var containerRef = overlay.attach(containerPortal);\n      return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n\n  }, {\n    key: \"_attachDialogContent\",\n    value: function _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n      // Create a reference to the dialog we're creating in order to give the user a handle\n      // to modify and close it.\n\n      /** @type {?} */\n      var dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id); // When the dialog backdrop is clicked, we want to close it.\n\n      if (config.hasBackdrop) {\n        overlayRef.backdropClick().subscribe(function () {\n          if (!dialogRef.disableClose) {\n            dialogRef.close();\n          }\n        });\n      }\n\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef,\n        /** @type {?} */\n        null,\n        /** @type {?} */\n        {\n          $implicit: config.data,\n          dialogRef: dialogRef\n        }));\n      } else {\n        /** @type {?} */\n        var injector = this._createInjector(config, dialogRef, dialogContainer);\n        /** @type {?} */\n\n\n        var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\n        dialogRef.componentInstance = contentRef.instance;\n      }\n\n      dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n      return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, dialogRef, dialogContainer) {\n      /** @type {?} */\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n      // content are created out of the same ViewContainerRef and as such, are siblings for injector\n      // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n      // added to the injection tokens.\n\n      /** @type {?} */\n\n      var injectionTokens = new WeakMap([[MatDialogContainer, dialogContainer], [MAT_DIALOG_DATA, config.data], [MatDialogRef, dialogRef]]);\n\n      if (config.direction && (!userInjector || !userInjector.get(Directionality, null))) {\n        injectionTokens.set(Directionality, {\n          value: config.direction,\n          change: of()\n        });\n      }\n\n      return new PortalInjector(userInjector || this._injector, injectionTokens);\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeOpenDialog\",\n    value: function _removeOpenDialog(dialogRef) {\n      /** @type {?} */\n      var index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n        // to a the siblings and emit to the `afterAllClosed` stream.\n\n        if (!this.openDialogs.length) {\n          this._ariaHiddenElements.forEach(function (previousValue, element) {\n            if (previousValue) {\n              element.setAttribute('aria-hidden', previousValue);\n            } else {\n              element.removeAttribute('aria-hidden');\n            }\n          });\n\n          this._ariaHiddenElements.clear();\n\n          this._afterAllClosed.next();\n        }\n      }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hideNonDialogContentFromAssistiveTechnology\",\n    value: function _hideNonDialogContentFromAssistiveTechnology() {\n      /** @type {?} */\n      var overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n      if (overlayContainer.parentElement) {\n        /** @type {?} */\n        var siblings = overlayContainer.parentElement.children;\n\n        for (var i = siblings.length - 1; i > -1; i--) {\n          /** @type {?} */\n          var sibling = siblings[i];\n\n          if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n            sibling.setAttribute('aria-hidden', 'true');\n          }\n        }\n      }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_closeDialogs\",\n    value: function _closeDialogs(dialogs) {\n      /** @type {?} */\n      var i = dialogs.length;\n\n      while (i--) {\n        // The `_openDialogs` property isn't updated after close until the rxjs subscription\n        // runs on the next microtask, in addition to modifying the array as we're going\n        // through it. We loop through all of them and call close without assuming that\n        // they'll be removed from the list instantaneously.\n        dialogs[i].close();\n      }\n    }\n  }, {\n    key: \"openDialogs\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpened\",\n    get: function get() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @deprecated Use `afterOpened` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpen\",\n    get: function get() {\n      return this.afterOpened;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_afterAllClosed\",\n    get: function get() {\n      /** @type {?} */\n      var parent = this._parentDialog;\n      return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n  }]);\n\n  return MatDialog;\n}();\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer));\n};\n\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n/** @nocollapse */\n\nMatDialog.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: Injector\n  }, {\n    type: Location,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatDialogConfig,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DIALOG_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DIALOG_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: MatDialog,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: OverlayContainer\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc4.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc3.OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\n\n\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nvar MatDialogClose = /*#__PURE__*/function () {\n  /**\n   * @param {?} dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  function MatDialogClose(dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogClose);\n\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogClose, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (!this.dialogRef) {\n        // When this directive is included in a dialog via TemplateRef (rather than being\n        // in a Component), the DialogRef isn't available via injection because embedded\n        // views cannot be given a custom injector. Instead, we look up the DialogRef by\n        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n        // be resolved at constructor time.\n        this.dialogRef =\n        /** @type {?} */\n        getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n      if (proxiedChange) {\n        this.dialogResult = proxiedChange.currentValue;\n      }\n    }\n  }]);\n\n  return MatDialogClose;\n}();\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"button\", \"mat-dialog-close\", \"\"], [\"button\", \"matDialogClose\", \"\"]],\n  hostAttrs: [\"type\", \"button\"],\n  hostVars: 1,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() {\n        return ctx.dialogRef.close(ctx.dialogResult);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null);\n    }\n  },\n  inputs: {\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatDialogClose.ctorParameters = function () {\n  return [{\n    type: MatDialogRef,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: MatDialog\n  }];\n};\n\nMatDialogClose.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  dialogResult: [{\n    type: Input,\n    args: ['mat-dialog-close']\n  }],\n  _matDialogClose: [{\n    type: Input,\n    args: ['matDialogClose']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: \"button[mat-dialog-close], button[matDialogClose]\",\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': 'dialogRef.close(dialogResult)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        'type': 'button'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nvar MatDialogTitle = /*#__PURE__*/function () {\n  /**\n   * @param {?} _dialogRef\n   * @param {?} _elementRef\n   * @param {?} _dialog\n   */\n  function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\n    _classCallCheck(this, MatDialogTitle);\n\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatDialogTitle, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this7 = this;\n\n      if (!this._dialogRef) {\n        this._dialogRef =\n        /** @type {?} */\n        getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n\n      if (this._dialogRef) {\n        Promise.resolve().then(function () {\n          /** @type {?} */\n          var container = _this7._dialogRef._containerInstance;\n\n          if (container && !container._ariaLabelledBy) {\n            container._ariaLabelledBy = _this7.id;\n          }\n        });\n      }\n    }\n  }]);\n\n  return MatDialogTitle;\n}();\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n/** @nocollapse */\n\nMatDialogTitle.ctorParameters = function () {\n  return [{\n    type: MatDialogRef,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: MatDialog\n  }];\n};\n\nMatDialogTitle.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nvar MatDialogContent = function MatDialogContent() {\n  _classCallCheck(this, MatDialogContent);\n};\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nvar MatDialogActions = function MatDialogActions() {\n  _classCallCheck(this, MatDialogActions);\n};\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n      host: {\n        'class': 'mat-dialog-actions'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  /** @type {?} */\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id ===\n    /** @type {?} */\n    parent.id;\n  }) : null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatDialogModule = function MatDialogModule() {\n  _classCallCheck(this, MatDialogModule);\n};\n\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatDialogModule_Factory(t) {\n    return new (t || MatDialogModule)();\n  },\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [[CommonModule, OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, {\n    declarations: function declarations() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\n    },\n    imports: function imports() {\n      return [CommonModule, OverlayModule, PortalModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n      entryComponents: [MatDialogContainer]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };","map":{"version":3,"sources":["../../../src/lib/dialog/dialog-config.ts","../../../src/lib/dialog/dialog-animations.ts","../../../src/lib/dialog/dialog-container.ts","../../../src/lib/dialog/dialog-ref.ts","../../../src/lib/dialog/dialog.ts","../../../src/lib/dialog/dialog-content-directives.ts","../../../src/lib/dialog/dialog-module.ts"],"names":["state","observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n"]},"metadata":{},"sourceType":"module"}