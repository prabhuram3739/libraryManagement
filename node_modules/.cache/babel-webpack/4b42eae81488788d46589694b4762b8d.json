{"ast":null,"code":"import _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nvar _c0 = [\"button\"];\nvar _c1 = [\"*\"];\nvar MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatButtonToggleGroup;\n  }),\n  multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\n\nvar MatButtonToggleGroupMultiple = function MatButtonToggleGroupMultiple() {\n  _classCallCheck(this, MatButtonToggleGroupMultiple);\n};\n/** @type {?} */\n\n\nvar _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\n\nvar MatButtonToggleChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatButtonToggleChange(source, value) {\n  _classCallCheck(this, MatButtonToggleChange);\n\n  this.source = source;\n  this.value = value;\n};\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\n\n\nvar MatButtonToggleGroup = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetector\n   * @param {?=} defaultOptions\n   */\n  function MatButtonToggleGroup(_changeDetector, defaultOptions) {\n    _classCallCheck(this, MatButtonToggleGroup);\n\n    this._changeDetector = _changeDetector;\n    this._vertical = false;\n    this._multiple = false;\n    this._disabled = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n\n    this._controlValueAccessorChangeFn = function () {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     */\n\n\n    this._onTouched = function () {};\n\n    this._name = \"mat-button-toggle-group-\".concat(_uniqueIdCounter++);\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * \\@docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * Event emitted when the group's value changes.\n     */\n\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /**\n   * `name` attribute for the underlying `input` element.\n   * @return {?}\n   */\n\n\n  _createClass(MatButtonToggleGroup, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this$_selectionModel;\n\n      (_this$_selectionModel = this._selectionModel).select.apply(_this$_selectionModel, _toConsumableArray(this._buttonToggles.filter(function (toggle) {\n        return toggle.checked;\n      })));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      /** @type {?} */\n      var selected = this.selected;\n      /** @type {?} */\n\n      var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      /** @type {?} */\n\n      var event = new MatButtonToggleChange(\n      /** @type {?} */\n      source, this.value);\n\n      this._controlValueAccessorChangeFn(event.value);\n\n      this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncButtonToggle\",\n    value: function _syncButtonToggle(toggle, select) {\n      var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      // Deselect the currently-selected toggle, if we're in single-selection\n      // mode and the button being toggled isn't selected at the moment.\n      if (!this.multiple && this.selected && !toggle.checked) {\n        /** @type {?} */\n        this.selected.checked = false;\n      }\n\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      } // Only emit the change event for user input.\n\n\n      if (isUserInput) {\n        this._emitChangeEvent();\n      } // Note: we emit this one no matter whether it was a user interaction, because\n      // it is used by Angular to sync up the two-way data binding.\n\n\n      this.valueChange.emit(this.value);\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSelected\",\n    value: function _isSelected(toggle) {\n      return this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isPrechecked\",\n    value: function _isPrechecked(toggle) {\n      if (typeof this._rawValue === 'undefined') {\n        return false;\n      }\n\n      if (this.multiple && Array.isArray(this._rawValue)) {\n        return this._rawValue.some(function (value) {\n          return toggle.value != null && value === toggle.value;\n        });\n      }\n\n      return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this = this;\n\n      this._rawValue = value;\n\n      if (!this._buttonToggles) {\n        return;\n      }\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value)) {\n          throw Error('Value must be an array in multiple-selection mode.');\n        }\n\n        this._clearSelection();\n\n        value.forEach(function (currentValue) {\n          return _this._selectValue(currentValue);\n        });\n      } else {\n        this._clearSelection();\n\n        this._selectValue(value);\n      }\n    }\n    /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection() {\n      this._selectionModel.clear();\n\n      this._buttonToggles.forEach(function (toggle) {\n        return toggle.checked = false;\n      });\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      /** @type {?} */\n      var correspondingOption = this._buttonToggles.find(function (toggle) {\n        return toggle.value != null && toggle.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption.checked = true;\n\n        this._selectionModel.select(correspondingOption);\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var _this2 = this;\n\n      this._name = value;\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(function (toggle) {\n          toggle.name = _this2._name;\n\n          toggle._markForCheck();\n        });\n      }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n\n  }, {\n    key: \"vertical\",\n    get: function get() {\n      return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      /** @type {?} */\n      var selected = this._selectionModel ? this._selectionModel.selected : [];\n\n      if (this.multiple) {\n        return selected.map(function (toggle) {\n          return toggle.value;\n        });\n      }\n\n      return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      this._setSelectionByValue(newValue);\n\n      this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      /** @type {?} */\n      var selected = this._selectionModel.selected;\n      return this.multiple ? selected : selected[0] || null;\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(function (toggle) {\n          return toggle._markForCheck();\n        });\n      }\n    }\n  }]);\n\n  return MatButtonToggleGroup;\n}();\n\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n  return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\n\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatButtonToggleGroup,\n  selectors: [[\"mat-button-toggle-group\"]],\n  contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n  hostVars: 5,\n  hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    appearance: \"appearance\",\n    name: \"name\",\n    vertical: \"vertical\",\n    value: \"value\",\n    multiple: \"multiple\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggleGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n    provide: MatButtonToggleGroupMultiple,\n    useExisting: MatButtonToggleGroup\n  }])]\n});\n/** @nocollapse */\n\nMatButtonToggleGroup.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatButtonToggleGroup.propDecorators = {\n  _buttonToggles: [{\n    type: ContentChildren,\n    args: [forwardRef(function () {\n      return MatButtonToggle;\n    })]\n  }],\n  appearance: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-button-toggle-group',\n      providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n        provide: MatButtonToggleGroupMultiple,\n        useExisting: MatButtonToggleGroup\n      }],\n      host: {\n        'role': 'group',\n        'class': 'mat-button-toggle-group',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.mat-button-toggle-vertical]': 'vertical',\n        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n      },\n      exportAs: 'matButtonToggleGroup'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    valueChange: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    appearance: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    _buttonToggles: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return MatButtonToggle;\n      })]\n    }]\n  });\n})(); // Boilerplate for applying mixins to the MatButtonToggle class.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatButtonToggleBase = function MatButtonToggleBase() {\n  _classCallCheck(this, MatButtonToggleBase);\n};\n/** @type {?} */\n\n\nvar _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\n\n\nvar MatButtonToggle = /*#__PURE__*/function (_MatButtonToggleMixin) {\n  _inherits(MatButtonToggle, _MatButtonToggleMixin);\n\n  var _super = _createSuper(MatButtonToggle);\n\n  /**\n   * @param {?} toggleGroup\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   * @param {?} defaultTabIndex\n   * @param {?=} defaultOptions\n   */\n  function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n  defaultTabIndex, defaultOptions) {\n    var _this3;\n\n    _classCallCheck(this, MatButtonToggle);\n\n    _this3 = _super.call(this);\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._elementRef = _elementRef;\n    _this3._focusMonitor = _focusMonitor;\n    _this3._isSingleSelector = false;\n    _this3._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    _this3.ariaLabelledby = null;\n    _this3._disabled = false;\n    /**\n     * Event emitted when the group value changes.\n     */\n\n    _this3.change = new EventEmitter();\n    /** @type {?} */\n\n    var parsedTabIndex = Number(defaultTabIndex);\n    _this3.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    _this3.buttonToggleGroup = toggleGroup;\n    _this3.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    return _this3;\n  }\n  /**\n   * Unique ID for the underlying `button` element.\n   * @return {?}\n   */\n\n\n  _createClass(MatButtonToggle, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n      this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n      this.id = this.id || \"mat-button-toggle-\".concat(_uniqueIdCounter++);\n\n      if (this._isSingleSelector) {\n        this.name = this.buttonToggleGroup.name;\n      }\n\n      if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n        this.checked = true;\n      }\n\n      this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this4 = this;\n\n      /** @type {?} */\n      var group = this.buttonToggleGroup;\n\n      this._focusMonitor.stopMonitoring(this._elementRef); // Remove the toggle from the selection once it's destroyed. Needs to happen\n      // on the next tick in order to avoid \"changed after checked\" errors.\n\n\n      if (group && group._isSelected(this)) {\n        Promise.resolve().then(function () {\n          return group._syncButtonToggle(_this4, false);\n        });\n      }\n    }\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._buttonElement.nativeElement.focus();\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onButtonClick\",\n    value: function _onButtonClick() {\n      /** @type {?} */\n      var newChecked = this._isSingleSelector ? true : !this._checked;\n\n      if (newChecked !== this._checked) {\n        this._checked = newChecked;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n\n          this.buttonToggleGroup._onTouched();\n        }\n      } // Emit a change event when it's the single selector\n\n\n      this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      // When the group value changes, the button will not be notified.\n      // Use `markForCheck` to explicit update button toggle's status.\n      this._changeDetectorRef.markForCheck();\n    }\n  }, {\n    key: \"buttonId\",\n    get: function get() {\n      return \"\".concat(this.id, \"-button\");\n    }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"appearance\",\n    get: function get() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._checked) {\n        this._checked = newValue;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatButtonToggle;\n}(_MatButtonToggleMixinBase);\n\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n  return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\n\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatButtonToggle,\n  selectors: [[\"mat-button-toggle\"]],\n  viewQuery: function MatButtonToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-button-toggle\"],\n  hostVars: 10,\n  hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() {\n        return ctx.focus();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    tabIndex: \"tabIndex\",\n    appearance: \"appearance\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    id: \"id\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggle\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 9,\n  consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n  template: function MatButtonToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n        return ctx._onButtonClick();\n      });\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(4, \"div\", 3);\n      ɵngcc0.ɵɵelement(5, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    }\n  },\n  directives: [ɵngcc2.MatRipple],\n  styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatButtonToggle.ctorParameters = function () {\n  return [{\n    type: MatButtonToggleGroup,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatButtonToggle.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  _buttonElement: [{\n    type: ViewChild,\n    args: ['button']\n  }],\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  appearance: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-button-toggle',\n      template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n      styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matButtonToggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disableRipple'],\n      host: {\n        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mat-button-toggle-checked]': 'checked',\n        '[class.mat-button-toggle-disabled]': 'disabled',\n        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n        'class': 'mat-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.id]': 'id',\n        '(focus)': 'focus()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatButtonToggleGroup,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _buttonElement: [{\n      type: ViewChild,\n      args: ['button']\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatButtonToggleModule = function MatButtonToggleModule() {\n  _classCallCheck(this, MatButtonToggleModule);\n};\n\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatButtonToggleModule\n});\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatButtonToggleModule_Factory(t) {\n    return new (t || MatButtonToggleModule)();\n  },\n  imports: [[MatCommonModule, MatRippleModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, {\n    declarations: function declarations() {\n      return [MatButtonToggleGroup, MatButtonToggle];\n    },\n    imports: function imports() {\n      return [MatCommonModule, MatRippleModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule],\n      exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n      declarations: [MatButtonToggleGroup, MatButtonToggle]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleBase, _MatButtonToggleMixinBase, MatButtonToggle, MatButtonToggleModule };","map":{"version":3,"sources":["../../../src/lib/button-toggle/button-toggle.ts","../../../src/lib/button-toggle/button-toggle-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      Promise.resolve().then(() => group._syncButtonToggle(this, false));\n    }\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n"]},"metadata":{},"sourceType":"module"}