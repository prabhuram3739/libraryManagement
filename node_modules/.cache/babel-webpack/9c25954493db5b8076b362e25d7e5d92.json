{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { DOWN_ARROW, END, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinColor, mixinDisabled, mixinTabIndex, GestureConfig, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\nvar _c0 = [\"sliderWrapper\"];\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n * @type {?}\n */\n\nvar DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n * @type {?}\n */\n\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n * @type {?}\n */\n\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_SLIDER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatSlider;\n  }),\n  multi: true\n};\n/**\n * A simple change event emitted by the MatSlider component.\n */\n\nvar MatSliderChange = function MatSliderChange() {\n  _classCallCheck(this, MatSliderChange);\n}; // Boilerplate for applying mixins to MatSlider.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSliderBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatSliderBase(_elementRef) {\n  _classCallCheck(this, MatSliderBase);\n\n  this._elementRef = _elementRef;\n};\n/** @type {?} */\n\n\nvar _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n\n\nvar MatSlider = /*#__PURE__*/function (_MatSliderMixinBase2) {\n  _inherits(MatSlider, _MatSliderMixinBase2);\n\n  var _super = _createSuper(MatSlider);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?} _dir\n   * @param {?} tabIndex\n   * @param {?=} _animationMode\n   */\n  function MatSlider(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _animationMode) {\n    var _this;\n\n    _classCallCheck(this, MatSlider);\n\n    _this = _super.call(this, elementRef);\n    _this._focusMonitor = _focusMonitor;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._dir = _dir;\n    _this._animationMode = _animationMode;\n    _this._invert = false;\n    _this._max = 100;\n    _this._min = 0;\n    _this._step = 1;\n    _this._thumbLabel = false;\n    _this._tickInterval = 0;\n    _this._value = null;\n    _this._vertical = false;\n    /**\n     * Event emitted when the slider value has changed.\n     */\n\n    _this.change = new EventEmitter();\n    /**\n     * Event emitted when the slider thumb moves.\n     */\n\n    _this.input = new EventEmitter();\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     */\n\n    _this.onTouched = function () {};\n\n    _this._percent = 0;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     */\n\n    _this._isSliding = false;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     */\n\n    _this._isActive = false;\n    /**\n     * The size of a tick interval as a percentage of the size of the track.\n     */\n\n    _this._tickIntervalPercent = 0;\n    /**\n     * The dimensions of the slider.\n     */\n\n    _this._sliderDimensions = null;\n\n    _this._controlValueAccessorChangeFn = function () {};\n    /**\n     * Subscription to the Directionality change EventEmitter.\n     */\n\n\n    _this._dirChangeSubscription = Subscription.EMPTY;\n    _this.tabIndex = parseInt(tabIndex) || 0;\n    return _this;\n  }\n  /**\n   * Whether the slider is inverted.\n   * @return {?}\n   */\n\n\n  _createClass(MatSlider, [{\n    key: \"focus\",\n\n    /**\n     * set focus to the host element\n     * @return {?}\n     */\n    value: function focus() {\n      this._focusHostElement();\n    }\n    /**\n     * blur the host element\n     * @return {?}\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this._blurHostElement();\n    }\n    /**\n     * The percentage of the slider that coincides with the value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldInvertMouseCoords\",\n\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     * @private\n     * @return {?}\n     */\n    value: function _shouldInvertMouseCoords() {\n      return this._getDirection() == 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n    }\n    /**\n     * The language direction for this slider element.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDirection\",\n    value: function _getDirection() {\n      return this._dir && this._dir.value == 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(function (origin) {\n        _this2._isActive = !!origin && origin !== 'keyboard';\n\n        _this2._changeDetectorRef.detectChanges();\n      });\n\n      if (this._dir) {\n        this._dirChangeSubscription = this._dir.change.subscribe(function () {\n          _this2._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._dirChangeSubscription.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onMouseenter\",\n    value: function _onMouseenter() {\n      if (this.disabled) {\n        return;\n      } // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n\n\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onMousedown\",\n    value: function _onMousedown(event) {\n      // Don't do anything if the slider is disabled or the\n      // user is using anything other than the main mouse button.\n      if (this.disabled || event.button !== 0) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var oldValue = this.value;\n      this._isSliding = false;\n\n      this._focusHostElement();\n\n      this._updateValueFromPosition({\n        x: event.clientX,\n        y: event.clientY\n      }); // Emit a change and input event if the value changed.\n\n\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n\n        this._emitChangeEvent();\n      }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onSlide\",\n    value: function _onSlide(event) {\n      if (this.disabled) {\n        return;\n      } // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n      // state, call the slide start handler manually.\n\n\n      if (!this._isSliding) {\n        this._onSlideStart(null);\n      } // Prevent the slide from selecting anything else.\n\n\n      event.preventDefault();\n      /** @type {?} */\n\n      var oldValue = this.value;\n\n      this._updateValueFromPosition({\n        x: event.center.x,\n        y: event.center.y\n      }); // Native range elements always emit `input` events when the value changed while sliding.\n\n\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n      }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onSlideStart\",\n    value: function _onSlideStart(event) {\n      if (this.disabled || this._isSliding) {\n        return;\n      } // Simulate mouseenter in case this is a mobile device.\n\n\n      this._onMouseenter();\n\n      this._isSliding = true;\n\n      this._focusHostElement();\n\n      this._valueOnSlideStart = this.value;\n\n      if (event) {\n        this._updateValueFromPosition({\n          x: event.center.x,\n          y: event.center.y\n        });\n\n        event.preventDefault();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onSlideEnd\",\n    value: function _onSlideEnd() {\n      this._isSliding = false;\n\n      if (this._valueOnSlideStart != this.value && !this.disabled) {\n        this._emitChangeEvent();\n      }\n\n      this._valueOnSlideStart = null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      this.onTouched();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeydown\",\n    value: function _onKeydown(event) {\n      if (this.disabled || hasModifierKey(event)) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var oldValue = this.value;\n\n      switch (event.keyCode) {\n        case PAGE_UP:\n          this._increment(10);\n\n          break;\n\n        case PAGE_DOWN:\n          this._increment(-10);\n\n          break;\n\n        case END:\n          this.value = this.max;\n          break;\n\n        case HOME:\n          this.value = this.min;\n          break;\n\n        case LEFT_ARROW:\n          // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n          // inverted slider the thumb moves in that direction. However for a blind user, nothing\n          // about the slider indicates that it is inverted. They will expect left to be decrement,\n          // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n          // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n          // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n          // sighted users, therefore we do not swap the meaning.\n          this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n\n          break;\n\n        case UP_ARROW:\n          this._increment(1);\n\n          break;\n\n        case RIGHT_ARROW:\n          // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n          this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n\n          break;\n\n        case DOWN_ARROW:\n          this._increment(-1);\n\n          break;\n\n        default:\n          // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n          // it.\n          return;\n      }\n\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n\n        this._emitChangeEvent();\n      }\n\n      this._isSliding = true;\n      event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeyup\",\n    value: function _onKeyup() {\n      this._isSliding = false;\n    }\n    /**\n     * Increments the slider by the given number of steps (negative number decrements).\n     * @private\n     * @param {?} numSteps\n     * @return {?}\n     */\n\n  }, {\n    key: \"_increment\",\n    value: function _increment(numSteps) {\n      this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /**\n     * Calculate the new value from the new physical location. The value will always be snapped.\n     * @private\n     * @param {?} pos\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateValueFromPosition\",\n    value: function _updateValueFromPosition(pos) {\n      if (!this._sliderDimensions) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n      /** @type {?} */\n\n      var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      /** @type {?} */\n\n      var posComponent = this.vertical ? pos.y : pos.x; // The exact value is calculated from the event and used to find the closest snap value.\n\n      /** @type {?} */\n\n      var percent = this._clamp((posComponent - offset) / size);\n\n      if (this._shouldInvertMouseCoords()) {\n        percent = 1 - percent;\n      } // Since the steps may not divide cleanly into the max value, if the user\n      // slid to 0 or 100 percent, we jump to the min/max value. This approach\n      // is slightly more intuitive than using `Math.ceil` below, because it\n      // follows the user's pointer closer.\n\n\n      if (percent === 0) {\n        this.value = this.min;\n      } else if (percent === 1) {\n        this.value = this.max;\n      } else {\n        /** @type {?} */\n        var exactValue = this._calculateValue(percent); // This calculation finds the closest step by finding the closest\n        // whole number divisible by the step relative to the min.\n\n        /** @type {?} */\n\n\n        var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min; // The value needs to snap to the min and max.\n\n        this.value = this._clamp(closestValue, this.min, this.max);\n      }\n    }\n    /**\n     * Emits a change event if the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this._controlValueAccessorChangeFn(this.value);\n\n      this.valueChange.emit(this.value);\n      this.change.emit(this._createChangeEvent());\n    }\n    /**\n     * Emits an input event when the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitInputEvent\",\n    value: function _emitInputEvent() {\n      this.input.emit(this._createChangeEvent());\n    }\n    /**\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTickIntervalPercent\",\n    value: function _updateTickIntervalPercent() {\n      if (!this.tickInterval || !this._sliderDimensions) {\n        return;\n      }\n\n      if (this.tickInterval == 'auto') {\n        /** @type {?} */\n        var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        /** @type {?} */\n\n        var pixelsPerStep = trackSize * this.step / (this.max - this.min);\n        /** @type {?} */\n\n        var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n        /** @type {?} */\n\n        var pixelsPerTick = stepsPerTick * this.step;\n        this._tickIntervalPercent = pixelsPerTick / trackSize;\n      } else {\n        this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n      }\n    }\n    /**\n     * Creates a slider change object from the specified value.\n     * @private\n     * @param {?=} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createChangeEvent\",\n    value: function _createChangeEvent() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n\n      /** @type {?} */\n      var event = new MatSliderChange();\n      event.source = this;\n      event.value = value;\n      return event;\n    }\n    /**\n     * Calculates the percentage of the slider that a value is.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculatePercentage\",\n    value: function _calculatePercentage(value) {\n      return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /**\n     * Calculates the value a percentage of the slider corresponds to.\n     * @private\n     * @param {?} percentage\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateValue\",\n    value: function _calculateValue(percentage) {\n      return this.min + percentage * (this.max - this.min);\n    }\n    /**\n     * Return a number between two numbers.\n     * @private\n     * @param {?} value\n     * @param {?=} min\n     * @param {?=} max\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clamp\",\n    value: function _clamp(value) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSliderDimensions\",\n    value: function _getSliderDimensions() {\n      return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusHostElement\",\n    value: function _focusHostElement() {\n      this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Blurs the native element.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blurHostElement\",\n    value: function _blurHostElement() {\n      this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n  }, {\n    key: \"invert\",\n    get: function get() {\n      return this._invert;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._invert = coerceBooleanProperty(value);\n    }\n    /**\n     * The maximum value that the slider can have.\n     * @return {?}\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._max;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._max = coerceNumberProperty(v, this._max);\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The minimum value that the slider can have.\n     * @return {?}\n     */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._min;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._min = coerceNumberProperty(v, this._min); // If the value wasn't explicitly set by the user, set it to the min.\n\n      if (this._value === null) {\n        this.value = this._min;\n      }\n\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The values at which the thumb will snap.\n     * @return {?}\n     */\n\n  }, {\n    key: \"step\",\n    get: function get() {\n      return this._step;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._step = coerceNumberProperty(v, this._step);\n\n      if (this._step % 1 !== 0) {\n        this._roundToDecimal =\n        /** @type {?} */\n        this._step.toString().split('.').pop().length;\n      } // Since this could modify the label, we need to notify the change detection.\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether or not to show the thumb label.\n     * @return {?}\n     */\n\n  }, {\n    key: \"thumbLabel\",\n    get: function get() {\n      return this._thumbLabel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._thumbLabel = coerceBooleanProperty(value);\n    }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     * @return {?}\n     */\n\n  }, {\n    key: \"tickInterval\",\n    get: function get() {\n      return this._tickInterval;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value === 'auto') {\n        this._tickInterval = 'auto';\n      } else if (typeof value === 'number' || typeof value === 'string') {\n        this._tickInterval = coerceNumberProperty(value,\n        /** @type {?} */\n        this._tickInterval);\n      } else {\n        this._tickInterval = 0;\n      }\n    }\n    /**\n     * Value of the slider.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      // If the value needs to be read and it is still uninitialized, initialize it to the min.\n      if (this._value === null) {\n        this.value = this._min;\n      }\n\n      return this._value;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      if (v !== this._value) {\n        /** @type {?} */\n        var value = coerceNumberProperty(v); // While incrementing by a decimal we can end up with values like 33.300000000000004.\n        // Truncate it to ensure that it matches the label and to make it easier to work with.\n\n        if (this._roundToDecimal) {\n          value = parseFloat(value.toFixed(this._roundToDecimal));\n        }\n\n        this._value = value;\n        this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the slider is vertical.\n     * @return {?}\n     */\n\n  }, {\n    key: \"vertical\",\n    get: function get() {\n      return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * The value to be used for display purposes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"displayValue\",\n    get: function get() {\n      if (this.displayWith) {\n        return this.displayWith(this.value);\n      } // Note that this could be improved further by rounding something like 0.999 to 1 or\n      // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n      // every change detection cycle.\n\n\n      if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n        return this.value.toFixed(this._roundToDecimal);\n      }\n\n      return this.value || 0;\n    }\n  }, {\n    key: \"percent\",\n    get: function get() {\n      return this._clamp(this._percent);\n    }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_invertAxis\",\n    get: function get() {\n      // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n      // top. However from a y-axis standpoint this is inverted.\n      return this.vertical ? !this.invert : this.invert;\n    }\n    /**\n     * Whether the slider is at its minimum value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isMinValue\",\n    get: function get() {\n      return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_thumbGap\",\n    get: function get() {\n      if (this.disabled) {\n        return DISABLED_THUMB_GAP;\n      }\n\n      if (this._isMinValue && !this.thumbLabel) {\n        return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n      }\n\n      return 0;\n    }\n    /**\n     * CSS styles for the track background element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trackBackgroundStyles\",\n    get: function get() {\n      /** @type {?} */\n      var axis = this.vertical ? 'Y' : 'X';\n      /** @type {?} */\n\n      var scale = this.vertical ? \"1, \".concat(1 - this.percent, \", 1\") : \"\".concat(1 - this.percent, \", 1, 1\");\n      /** @type {?} */\n\n      var sign = this._shouldInvertMouseCoords() ? '-' : '';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: \"translate\".concat(axis, \"(\").concat(sign).concat(this._thumbGap, \"px) scale3d(\").concat(scale, \")\")\n      };\n    }\n    /**\n     * CSS styles for the track fill element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trackFillStyles\",\n    get: function get() {\n      /** @type {?} */\n      var axis = this.vertical ? 'Y' : 'X';\n      /** @type {?} */\n\n      var scale = this.vertical ? \"1, \".concat(this.percent, \", 1\") : \"\".concat(this.percent, \", 1, 1\");\n      /** @type {?} */\n\n      var sign = this._shouldInvertMouseCoords() ? '' : '-';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: \"translate\".concat(axis, \"(\").concat(sign).concat(this._thumbGap, \"px) scale3d(\").concat(scale, \")\")\n      };\n    }\n    /**\n     * CSS styles for the ticks container element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_ticksContainerStyles\",\n    get: function get() {\n      /** @type {?} */\n      var axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the ticks container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      /** @type {?} */\n\n      var sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n      /** @type {?} */\n\n      var offset = this._tickIntervalPercent / 2 * 100;\n      return {\n        'transform': \"translate\".concat(axis, \"(\").concat(sign).concat(offset, \"%)\")\n      };\n    }\n    /**\n     * CSS styles for the ticks element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_ticksStyles\",\n    get: function get() {\n      /** @type {?} */\n      var tickSize = this._tickIntervalPercent * 100;\n      /** @type {?} */\n\n      var backgroundSize = this.vertical ? \"2px \".concat(tickSize, \"%\") : \"\".concat(tickSize, \"% 2px\");\n      /** @type {?} */\n\n      var axis = this.vertical ? 'Y' : 'X'; // Depending on the direction we pushed the ticks container, push the ticks the opposite\n      // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n      // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n\n      /** @type {?} */\n\n      var sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n      /** @type {?} */\n\n      var rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n      /** @type {?} */\n\n      var styles = {\n        'backgroundSize': backgroundSize,\n        // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n        'transform': \"translateZ(0) translate\".concat(axis, \"(\").concat(sign).concat(tickSize / 2, \"%)\").concat(rotate)\n      };\n\n      if (this._isMinValue && this._thumbGap) {\n        /** @type {?} */\n        var side = this.vertical ? this._invertAxis ? 'Bottom' : 'Top' : this._invertAxis ? 'Right' : 'Left';\n        styles[\"padding\".concat(side)] = \"\".concat(this._thumbGap, \"px\");\n      }\n\n      return styles;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_thumbContainerStyles\",\n    get: function get() {\n      /** @type {?} */\n      var axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the thumb container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      /** @type {?} */\n\n      var invertOffset = this._getDirection() == 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n      /** @type {?} */\n\n      var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n      return {\n        'transform': \"translate\".concat(axis, \"(-\").concat(offset, \"%)\")\n      };\n    }\n  }]);\n\n  return MatSlider;\n}(_MatSliderMixinBase);\n\nMatSlider.ɵfac = function MatSlider_Factory(t) {\n  return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSlider,\n  selectors: [[\"mat-slider\"]],\n  viewQuery: function MatSlider_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\"],\n  hostVars: 26,\n  hostBindings: function MatSlider_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSlider_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      })(\"mousedown\", function MatSlider_mousedown_HostBindingHandler($event) {\n        return ctx._onMousedown($event);\n      })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      })(\"keyup\", function MatSlider_keyup_HostBindingHandler() {\n        return ctx._onKeyup();\n      })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() {\n        return ctx._onMouseenter();\n      })(\"slide\", function MatSlider_slide_HostBindingHandler($event) {\n        return ctx._onSlide($event);\n      })(\"slideend\", function MatSlider_slideend_HostBindingHandler() {\n        return ctx._onSlideEnd();\n      })(\"slidestart\", function MatSlider_slidestart_HostBindingHandler($event) {\n        return ctx._onSlideStart($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n      ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n      ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._invertAxis)(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue)(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue && ctx._thumbGap && ctx._invertAxis)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    invert: \"invert\",\n    max: \"max\",\n    min: \"min\",\n    value: \"value\",\n    step: \"step\",\n    thumbLabel: \"thumbLabel\",\n    tickInterval: \"tickInterval\",\n    vertical: \"vertical\",\n    displayWith: \"displayWith\"\n  },\n  outputs: {\n    change: \"change\",\n    input: \"input\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matSlider\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 13,\n  vars: 6,\n  consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]],\n  template: function MatSlider_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵelement(3, \"div\", 3);\n      ɵngcc0.ɵɵelement(4, \"div\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n      ɵngcc0.ɵɵelement(6, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelement(9, \"div\", 9);\n      ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n      ɵngcc0.ɵɵtext(12);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackBackgroundStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackFillStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksContainerStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._thumbContainerStyles);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    }\n  },\n  directives: [ɵngcc3.NgStyle],\n  styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb-label{cursor:-webkit-grab;cursor:grab}.mat-slider-sliding:not(.mat-slider-disabled) .mat-slider-thumb,.mat-slider-sliding:not(.mat-slider-disabled) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb-label:active,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb:active{cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}@media (-ms-high-contrast:active){.mat-slider-thumb-label{outline:solid 1px}}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}@media (-ms-high-contrast:active){.mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}@media (-ms-high-contrast:active){.mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-track-fill{transition:none}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSlider.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }];\n};\n\nMatSlider.propDecorators = {\n  invert: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  step: [{\n    type: Input\n  }],\n  thumbLabel: [{\n    type: Input\n  }],\n  tickInterval: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  input: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  _sliderWrapper: [{\n    type: ViewChild,\n    args: ['sliderWrapper']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slider',\n      exportAs: 'matSlider',\n      providers: [MAT_SLIDER_VALUE_ACCESSOR],\n      host: {\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(mousedown)': '_onMousedown($event)',\n        '(keydown)': '_onKeydown($event)',\n        '(keyup)': '_onKeyup()',\n        '(mouseenter)': '_onMouseenter()',\n        '(slide)': '_onSlide($event)',\n        '(slideend)': '_onSlideEnd()',\n        '(slidestart)': '_onSlideStart($event)',\n        'class': 'mat-slider',\n        'role': 'slider',\n        '[tabIndex]': 'tabIndex',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.aria-valuemax]': 'max',\n        '[attr.aria-valuemin]': 'min',\n        '[attr.aria-valuenow]': 'value',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mat-slider-disabled]': 'disabled',\n        '[class.mat-slider-has-ticks]': 'tickInterval',\n        '[class.mat-slider-horizontal]': '!vertical',\n        '[class.mat-slider-axis-inverted]': '_invertAxis',\n        '[class.mat-slider-sliding]': '_isSliding',\n        '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n        '[class.mat-slider-vertical]': 'vertical',\n        '[class.mat-slider-min-value]': '_isMinValue',\n        '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper><div class=\\\"mat-slider-track-wrapper\\\"><div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div><div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div></div><div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\"><div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div></div><div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\"><div class=\\\"mat-slider-focus-ring\\\"></div><div class=\\\"mat-slider-thumb\\\"></div><div class=\\\"mat-slider-thumb-label\\\"><span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span></div></div></div>\",\n      styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb-label{cursor:-webkit-grab;cursor:grab}.mat-slider-sliding:not(.mat-slider-disabled) .mat-slider-thumb,.mat-slider-sliding:not(.mat-slider-disabled) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb-label:active,.mat-slider:not(.mat-slider-disabled) .mat-slider-thumb:active{cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}@media (-ms-high-contrast:active){.mat-slider-thumb-label{outline:solid 1px}}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}@media (-ms-high-contrast:active){.mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}@media (-ms-high-contrast:active){.mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-track-fill{transition:none}\"],\n      inputs: ['disabled', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    change: [{\n      type: Output\n    }],\n    input: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    invert: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    thumbLabel: [{\n      type: Input\n    }],\n    tickInterval: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    displayWith: [{\n      type: Input\n    }],\n    _sliderWrapper: [{\n      type: ViewChild,\n      args: ['sliderWrapper']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatSliderModule = function MatSliderModule() {\n  _classCallCheck(this, MatSliderModule);\n};\n\nMatSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSliderModule\n});\nMatSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatSliderModule_Factory(t) {\n    return new (t || MatSliderModule)();\n  },\n  providers: [{\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: GestureConfig\n  }],\n  imports: [[CommonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, {\n    declarations: function declarations() {\n      return [MatSlider];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatSlider, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule],\n      exports: [MatSlider, MatCommonModule],\n      declarations: [MatSlider],\n      providers: [{\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: GestureConfig\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatSliderModule, MAT_SLIDER_VALUE_ACCESSOR, MatSliderChange, MatSliderBase, _MatSliderMixinBase, MatSlider };","map":{"version":3,"sources":["../../../src/lib/slider/slider.ts","../../../src/lib/slider/slider-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || event.button !== 0) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n"]},"metadata":{},"sourceType":"module"}