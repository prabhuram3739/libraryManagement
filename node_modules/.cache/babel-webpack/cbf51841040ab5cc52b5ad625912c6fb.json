{"ast":null,"code":"import _createForOfIteratorHelper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Optional, ViewEncapsulation, ChangeDetectorRef, Attribute, EventEmitter, forwardRef, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { MatLine, setLines, mixinDisableRipple, MatCommonModule, MatLineModule, MatPseudoCheckboxModule, MatRippleModule } from '@angular/material/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A, hasModifierKey } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MatDividerModule } from '@angular/material/divider';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatList.\n\n/**\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/core';\nvar _c0 = [\"*\"];\nvar _c1 = \".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}\";\nvar _c2 = [[[\"\", \"mat-list-avatar\", \"\"], [\"\", \"mat-list-icon\", \"\"], [\"\", \"matListAvatar\", \"\"], [\"\", \"matListIcon\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nvar _c3 = [\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\", \"[mat-line], [matLine]\", \"*\"];\nvar _c4 = [\"text\"];\nvar _c5 = [\"*\", [[\"\", \"mat-list-avatar\", \"\"], [\"\", \"mat-list-icon\", \"\"], [\"\", \"matListAvatar\", \"\"], [\"\", \"matListIcon\", \"\"]]];\nvar _c6 = [\"*\", \"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\"];\n\nvar MatListBase = function MatListBase() {\n  _classCallCheck(this, MatListBase);\n};\n/** @type {?} */\n\n\nvar _MatListMixinBase = mixinDisableRipple(MatListBase); // Boilerplate for applying mixins to MatListItem.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatListItemBase = function MatListItemBase() {\n  _classCallCheck(this, MatListItemBase);\n};\n/** @type {?} */\n\n\nvar _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\nvar MatNavList = /*#__PURE__*/function (_MatListMixinBase2) {\n  _inherits(MatNavList, _MatListMixinBase2);\n\n  var _super = _createSuper(MatNavList);\n\n  function MatNavList() {\n    var _this;\n\n    _classCallCheck(this, MatNavList);\n\n    _this = _super.apply(this, arguments);\n    /**\n     * Emits when the state of the list changes.\n     */\n\n    _this._stateChanges = new Subject();\n    return _this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatNavList, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n  }]);\n\n  return MatNavList;\n}(_MatListMixinBase);\n\nMatNavList.ɵfac = function MatNavList_Factory(t) {\n  return ɵMatNavList_BaseFactory(t || MatNavList);\n};\n\nMatNavList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatNavList,\n  selectors: [[\"mat-nav-list\"]],\n  hostAttrs: [\"role\", \"navigation\", 1, \"mat-nav-list\", \"mat-list-base\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matNavList\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatNavList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [_c1],\n  encapsulation: 2,\n  changeDetection: 0\n});\nvar ɵMatNavList_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatNavList);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatNavList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-nav-list',\n      exportAs: 'matNavList',\n      host: {\n        'role': 'navigation',\n        'class': 'mat-nav-list mat-list-base'\n      },\n      template: \"<ng-content></ng-content>\",\n      styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}\"],\n      inputs: ['disableRipple'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\n\nvar MatList = /*#__PURE__*/function (_MatListMixinBase3) {\n  _inherits(MatList, _MatListMixinBase3);\n\n  var _super2 = _createSuper(MatList);\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * \\@breaking-change 8.0.0\n   * @param {?=} _elementRef\n   */\n  function MatList(_elementRef) {\n    var _this2;\n\n    _classCallCheck(this, MatList);\n\n    _this2 = _super2.call(this);\n    _this2._elementRef = _elementRef;\n    /**\n     * Emits when the state of the list changes.\n     */\n\n    _this2._stateChanges = new Subject();\n\n    if (_this2._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n\n    return _this2;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatList, [{\n    key: \"_getListType\",\n    value: function _getListType() {\n      /** @type {?} */\n      var elementRef = this._elementRef; // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n\n      if (elementRef) {\n        /** @type {?} */\n        var nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n        if (nodeName === 'mat-list') {\n          return 'list';\n        }\n\n        if (nodeName === 'mat-action-list') {\n          return 'action-list';\n        }\n      }\n\n      return null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n  }]);\n\n  return MatList;\n}(_MatListMixinBase);\n\nMatList.ɵfac = function MatList_Factory(t) {\n  return new (t || MatList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatList,\n  selectors: [[\"mat-list\"], [\"mat-action-list\"]],\n  hostAttrs: [1, \"mat-list\", \"mat-list-base\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matList\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [_c1],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-list, mat-action-list',\n      exportAs: 'matList',\n      template: \"<ng-content></ng-content>\",\n      host: {\n        'class': 'mat-list mat-list-base'\n      },\n      styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}\"],\n      inputs: ['disableRipple'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatListAvatarCssMatStyler = function MatListAvatarCssMatStyler() {\n  _classCallCheck(this, MatListAvatarCssMatStyler);\n};\n\nMatListAvatarCssMatStyler.ɵfac = function MatListAvatarCssMatStyler_Factory(t) {\n  return new (t || MatListAvatarCssMatStyler)();\n};\n\nMatListAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatListAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-list-avatar\", \"\"], [\"\", \"matListAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-list-avatar\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-list-avatar], [matListAvatar]',\n      host: {\n        'class': 'mat-list-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatListIconCssMatStyler = function MatListIconCssMatStyler() {\n  _classCallCheck(this, MatListIconCssMatStyler);\n};\n\nMatListIconCssMatStyler.ɵfac = function MatListIconCssMatStyler_Factory(t) {\n  return new (t || MatListIconCssMatStyler)();\n};\n\nMatListIconCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatListIconCssMatStyler,\n  selectors: [[\"\", \"mat-list-icon\", \"\"], [\"\", \"matListIcon\", \"\"]],\n  hostAttrs: [1, \"mat-list-icon\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListIconCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-list-icon], [matListIcon]',\n      host: {\n        'class': 'mat-list-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatListSubheaderCssMatStyler = function MatListSubheaderCssMatStyler() {\n  _classCallCheck(this, MatListSubheaderCssMatStyler);\n};\n\nMatListSubheaderCssMatStyler.ɵfac = function MatListSubheaderCssMatStyler_Factory(t) {\n  return new (t || MatListSubheaderCssMatStyler)();\n};\n\nMatListSubheaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatListSubheaderCssMatStyler,\n  selectors: [[\"\", \"mat-subheader\", \"\"], [\"\", \"matSubheader\", \"\"]],\n  hostAttrs: [1, \"mat-subheader\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListSubheaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-subheader], [matSubheader]',\n      host: {\n        'class': 'mat-subheader'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * An item within a Material Design list.\n */\n\n\nvar MatListItem = /*#__PURE__*/function (_MatListItemMixinBase2) {\n  _inherits(MatListItem, _MatListItemMixinBase2);\n\n  var _super3 = _createSuper(MatListItem);\n\n  /**\n   * @param {?} _element\n   * @param {?=} navList\n   * @param {?=} list\n   * @param {?=} _changeDetectorRef\n   */\n  function MatListItem(_element, navList, list, // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n  _changeDetectorRef) {\n    var _this3;\n\n    _classCallCheck(this, MatListItem);\n\n    _this3 = _super3.call(this);\n    _this3._element = _element;\n    _this3._isInteractiveList = false;\n    _this3._destroyed = new Subject();\n    _this3._isInteractiveList = !!(navList || list && list._getListType() === 'action-list');\n    _this3._list = navList || list; // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n\n    /** @type {?} */\n\n    var element = _this3._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    } // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n\n\n    if (_this3._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      _this3._list._stateChanges.pipe(takeUntil(_this3._destroyed)).subscribe(function () {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n\n    return _this3;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatListItem, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return !this._isInteractiveList || this.disableRipple || !!(this._list && this._list.disableRipple);\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getHostElement\",\n    value: function _getHostElement() {\n      return this._element.nativeElement;\n    }\n  }]);\n\n  return MatListItem;\n}(_MatListItemMixinBase);\n\nMatListItem.ɵfac = function MatListItem_Factory(t) {\n  return new (t || MatListItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatNavList, 8), ɵngcc0.ɵɵdirectiveInject(MatList, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatListItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatListItem,\n  selectors: [[\"mat-list-item\"], [\"a\", \"mat-list-item\", \"\"], [\"button\", \"mat-list-item\", \"\"]],\n  contentQueries: function MatListItem_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListAvatarCssMatStyler, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListIconCssMatStyler, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-list-item\"],\n  hostVars: 4,\n  hostBindings: function MatListItem_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-list-item-avatar\", ctx._avatar || ctx._icon)(\"mat-list-item-with-avatar\", ctx._avatar || ctx._icon);\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matListItem\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 6,\n  vars: 2,\n  consts: [[1, \"mat-list-item-content\"], [\"mat-ripple\", \"\", 1, \"mat-list-item-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-list-text\"]],\n  template: function MatListItem_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelement(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵprojection(4, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(5, 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx._isRippleDisabled());\n    }\n  },\n  directives: [ɵngcc1.MatRipple],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatListItem.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: MatNavList,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatList,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nMatListItem.propDecorators = {\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine]\n  }],\n  _avatar: [{\n    type: ContentChild,\n    args: [MatListAvatarCssMatStyler]\n  }],\n  _icon: [{\n    type: ContentChild,\n    args: [MatListIconCssMatStyler]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListItem, [{\n    type: Component,\n    args: [{\n      selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n      exportAs: 'matListItem',\n      host: {\n        'class': 'mat-list-item',\n        // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n        '[class.mat-list-item-avatar]': '_avatar || _icon',\n        '[class.mat-list-item-with-avatar]': '_avatar || _icon'\n      },\n      inputs: ['disableRipple'],\n      template: \"<div class=\\\"mat-list-item-content\\\"><div class=\\\"mat-list-item-ripple\\\" mat-ripple [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div><ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\"></ng-content><div class=\\\"mat-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content></div>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatNavList,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatList,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine]\n    }],\n    _avatar: [{\n      type: ContentChild,\n      args: [MatListAvatarCssMatStyler]\n    }],\n    _icon: [{\n      type: ContentChild,\n      args: [MatListIconCssMatStyler]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSelectionListBase = function MatSelectionListBase() {\n  _classCallCheck(this, MatSelectionListBase);\n};\n/** @type {?} */\n\n\nvar _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n/**\n * \\@docs-private\n */\n\n\nvar MatListOptionBase = function MatListOptionBase() {\n  _classCallCheck(this, MatListOptionBase);\n};\n/** @type {?} */\n\n\nvar _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_SELECTION_LIST_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatSelectionList;\n  }),\n  multi: true\n};\n/**\n * Change event that is being fired whenever the selected state of an option changes.\n */\n\nvar MatSelectionListChange =\n/**\n * @param {?} source\n * @param {?} option\n */\nfunction MatSelectionListChange(source, option) {\n  _classCallCheck(this, MatSelectionListChange);\n\n  this.source = source;\n  this.option = option;\n};\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n\n\nvar MatListOption = /*#__PURE__*/function (_MatListOptionMixinBa) {\n  _inherits(MatListOption, _MatListOptionMixinBa);\n\n  var _super4 = _createSuper(MatListOption);\n\n  /**\n   * @param {?} _element\n   * @param {?} _changeDetector\n   * @param {?} selectionList\n   */\n  function MatListOption(_element, _changeDetector, selectionList) {\n    var _this4;\n\n    _classCallCheck(this, MatListOption);\n\n    _this4 = _super4.call(this);\n    _this4._element = _element;\n    _this4._changeDetector = _changeDetector;\n    _this4.selectionList = selectionList;\n    _this4._selected = false;\n    _this4._disabled = false;\n    _this4._hasFocus = false;\n    /**\n     * Whether the label should appear before or after the checkbox. Defaults to 'after'\n     */\n\n    _this4.checkboxPosition = 'after';\n    return _this4;\n  }\n  /**\n   * Value of the option\n   * @return {?}\n   */\n\n\n  _createClass(MatListOption, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      var _this5 = this;\n\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n\n      /** @type {?} */\n      var wasSelected = this._selected;\n      Promise.resolve().then(function () {\n        if (_this5._selected || wasSelected) {\n          _this5.selected = true;\n\n          _this5._changeDetector.markForCheck();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this6 = this;\n\n      if (this.selected) {\n        // We have to delay this until the next tick in order\n        // to avoid changed after checked errors.\n        Promise.resolve().then(function () {\n          return _this6.selected = false;\n        });\n      }\n      /** @type {?} */\n\n\n      var hadFocus = this._hasFocus;\n      /** @type {?} */\n\n      var newActiveItem = this.selectionList._removeOptionFromList(this); // Only move focus if this option was focused at the time it was destroyed.\n\n\n      if (hadFocus && newActiveItem) {\n        newActiveItem.focus();\n      }\n    }\n    /**\n     * Toggles the selection state of the option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.selected = !this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._element.nativeElement.focus();\n    }\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getLabel\",\n    value: function getLabel() {\n      return this._text ? this._text.nativeElement.textContent || '' : '';\n    }\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      if (!this.disabled) {\n        this.toggle(); // Emit a change event if the selected state of the option changed through user interaction.\n\n        this.selectionList._emitChangeEvent(this);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      this.selectionList._setFocusedOption(this);\n\n      this._hasFocus = true;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleBlur\",\n    value: function _handleBlur() {\n      this.selectionList._onTouched();\n\n      this._hasFocus = false;\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getHostElement\",\n    value: function _getHostElement() {\n      return this._element.nativeElement;\n    }\n    /**\n     * Sets the selected state of the option. Returns whether the value has changed.\n     * @param {?} selected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelected\",\n    value: function _setSelected(selected) {\n      if (selected === this._selected) {\n        return false;\n      }\n\n      this._selected = selected;\n\n      if (selected) {\n        this.selectionList.selectedOptions.select(this);\n      } else {\n        this.selectionList.selectedOptions.deselect(this);\n      }\n\n      this._changeDetector.markForCheck();\n\n      return true;\n    }\n    /**\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n     * used to trigger an update of the list option if the disabled state of the selection list\n     * changed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      this._changeDetector.markForCheck();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      if (this.selected && newValue !== this.value) {\n        this.selected = false;\n      }\n\n      this._value = newValue;\n    }\n    /**\n     * Whether the option is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.selectionList && this.selectionList.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._disabled) {\n        this._disabled = newValue;\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /**\n     * Whether the option is selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.selectionList.selectedOptions.isSelected(this);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var isSelected = coerceBooleanProperty(value);\n\n      if (isSelected !== this._selected) {\n        this._setSelected(isSelected);\n\n        this.selectionList._reportValueChange();\n      }\n    }\n  }]);\n\n  return MatListOption;\n}(_MatListOptionMixinBase);\n\nMatListOption.ɵfac = function MatListOption_Factory(t) {\n  return new (t || MatListOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n    return MatSelectionList;\n  })));\n};\n\nMatListOption.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatListOption,\n  selectors: [[\"mat-list-option\"]],\n  contentQueries: function MatListOption_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListAvatarCssMatStyler, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListIconCssMatStyler, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  viewQuery: function MatListOption_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c4, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._text = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", \"tabindex\", \"-1\", 1, \"mat-list-item\", \"mat-list-option\"],\n  hostVars: 6,\n  hostBindings: function MatListOption_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatListOption_focus_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatListOption_blur_HostBindingHandler() {\n        return ctx._handleBlur();\n      })(\"click\", function MatListOption_click_HostBindingHandler() {\n        return ctx._handleClick();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-selected\", ctx.selected.toString())(\"aria-disabled\", ctx.disabled.toString());\n      ɵngcc0.ɵɵclassProp(\"mat-list-item-disabled\", ctx.disabled)(\"mat-list-item-with-avatar\", ctx._avatar || ctx._icon);\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    checkboxPosition: \"checkboxPosition\",\n    value: \"value\",\n    selected: \"selected\",\n    disabled: \"disabled\"\n  },\n  exportAs: [\"matListOption\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c6,\n  decls: 7,\n  vars: 6,\n  consts: [[1, \"mat-list-item-content\"], [\"mat-ripple\", \"\", 1, \"mat-list-item-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [3, \"state\", \"disabled\"], [1, \"mat-list-text\"], [\"text\", \"\"]],\n  template: function MatListOption_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c5);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelement(1, \"div\", 1);\n      ɵngcc0.ɵɵelement(2, \"mat-pseudo-checkbox\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n      ɵngcc0.ɵɵprojection(5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(6, 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-list-item-content-reverse\", ctx.checkboxPosition == \"after\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx._isRippleDisabled());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"state\", ctx.selected ? \"checked\" : \"unchecked\")(\"disabled\", ctx.disabled);\n    }\n  },\n  directives: [ɵngcc1.MatRipple, ɵngcc1.MatPseudoCheckbox],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatListOption.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: MatSelectionList,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(function () {\n        return MatSelectionList;\n      })]\n    }]\n  }];\n};\n\nMatListOption.propDecorators = {\n  _avatar: [{\n    type: ContentChild,\n    args: [MatListAvatarCssMatStyler]\n  }],\n  _icon: [{\n    type: ContentChild,\n    args: [MatListIconCssMatStyler]\n  }],\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine]\n  }],\n  _text: [{\n    type: ViewChild,\n    args: ['text']\n  }],\n  checkboxPosition: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListOption, [{\n    type: Component,\n    args: [{\n      selector: 'mat-list-option',\n      exportAs: 'matListOption',\n      inputs: ['disableRipple'],\n      host: {\n        'role': 'option',\n        'class': 'mat-list-item mat-list-option',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()',\n        'tabindex': '-1',\n        '[class.mat-list-item-disabled]': 'disabled',\n        '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n        '[attr.aria-selected]': 'selected.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()'\n      },\n      template: \"<div class=\\\"mat-list-item-content\\\" [class.mat-list-item-content-reverse]=\\\"checkboxPosition == 'after'\\\"><div mat-ripple class=\\\"mat-list-item-ripple\\\" [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div><mat-pseudo-checkbox [state]=\\\"selected ? 'checked' : 'unchecked'\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox><div class=\\\"mat-list-text\\\" #text><ng-content></ng-content></div><ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\"></ng-content></div>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSelectionList,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return MatSelectionList;\n        })]\n      }]\n    }];\n  }, {\n    checkboxPosition: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    _avatar: [{\n      type: ContentChild,\n      args: [MatListAvatarCssMatStyler]\n    }],\n    _icon: [{\n      type: ContentChild,\n      args: [MatListIconCssMatStyler]\n    }],\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine]\n    }],\n    _text: [{\n      type: ViewChild,\n      args: ['text']\n    }]\n  });\n})();\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n\n\nvar MatSelectionList = /*#__PURE__*/function (_MatSelectionListMixi) {\n  _inherits(MatSelectionList, _MatSelectionListMixi);\n\n  var _super5 = _createSuper(MatSelectionList);\n\n  /**\n   * @param {?} _element\n   * @param {?} tabIndex\n   */\n  function MatSelectionList(_element, tabIndex) {\n    var _this7;\n\n    _classCallCheck(this, MatSelectionList);\n\n    _this7 = _super5.call(this);\n    _this7._element = _element;\n    /**\n     * Emits a change event whenever the selected state of an option changes.\n     */\n\n    _this7.selectionChange = new EventEmitter();\n    /**\n     * Tabindex of the selection list.\n     */\n\n    _this7.tabIndex = 0;\n    _this7._disabled = false;\n    /**\n     * The currently selected options.\n     */\n\n    _this7.selectedOptions = new SelectionModel(true);\n    /**\n     * View to model callback that should be called whenever the selected options change.\n     */\n\n    _this7._onChange = function (_) {};\n    /**\n     * Subscription to sync value changes in the SelectionModel back to the SelectionList.\n     */\n\n\n    _this7._modelChanges = Subscription.EMPTY;\n    /**\n     * View to model callback that should be called if the list or its options lost focus.\n     */\n\n    _this7._onTouched = function () {};\n\n    _this7.tabIndex = parseInt(tabIndex) || 0;\n    return _this7;\n  }\n  /**\n   * Whether the selection list is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(MatSelectionList, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      this._keyManager = new FocusKeyManager(this.options).withWrap().withTypeAhead() // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(function () {\n        return false;\n      }).withAllowedModifierKeys(['shiftKey']);\n\n      if (this._tempValues) {\n        this._setOptionsFromValues(this._tempValues);\n\n        this._tempValues = null;\n      } // Sync external changes to the model back to the options.\n\n\n      this._modelChanges = this.selectedOptions.onChange.subscribe(function (event) {\n        if (event.added) {\n          var _iterator = _createForOfIteratorHelper(event.added),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var item = _step.value;\n              item.selected = true;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        if (event.removed) {\n          var _iterator2 = _createForOfIteratorHelper(event.removed),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _item = _step2.value;\n              _item.selected = false;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var disableRippleChanges = changes.disableRipple;\n\n      if (disableRippleChanges && !disableRippleChanges.firstChange) {\n        this._markOptionsForCheck();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._modelChanges.unsubscribe();\n    }\n    /**\n     * Focuses the selection list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._element.nativeElement.focus();\n    }\n    /**\n     * Selects all of the options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      this._setAllOptionsSelected(true);\n    }\n    /**\n     * Deselects all of the options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"deselectAll\",\n    value: function deselectAll() {\n      this._setAllOptionsSelected(false);\n    }\n    /**\n     * Sets the focused option of the selection-list.\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setFocusedOption\",\n    value: function _setFocusedOption(option) {\n      this._keyManager.updateActiveItem(option);\n    }\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @param {?} option\n     * @return {?} Currently-active item.\n     */\n\n  }, {\n    key: \"_removeOptionFromList\",\n    value: function _removeOptionFromList(option) {\n      /** @type {?} */\n      var optionIndex = this._getOptionIndex(option);\n\n      if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n        // Check whether the option is the last item\n        if (optionIndex > 0) {\n          this._keyManager.updateActiveItem(optionIndex - 1);\n        } else if (optionIndex === 0 && this.options.length > 1) {\n          this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n        }\n      }\n\n      return this._keyManager.activeItem;\n    }\n    /**\n     * Passes relevant key presses to our key manager.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var manager = this._keyManager;\n      /** @type {?} */\n\n      var previousFocusIndex = manager.activeItemIndex;\n      /** @type {?} */\n\n      var hasModifier = hasModifierKey(event);\n\n      switch (keyCode) {\n        case SPACE:\n        case ENTER:\n          if (!hasModifier) {\n            this._toggleFocusedOption(); // Always prevent space from scrolling the page since the list has focus\n\n\n            event.preventDefault();\n          }\n\n          break;\n\n        case HOME:\n        case END:\n          if (!hasModifier) {\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            event.preventDefault();\n          }\n\n          break;\n\n        case A:\n          if (hasModifierKey(event, 'ctrlKey')) {\n            this.options.find(function (option) {\n              return !option.selected;\n            }) ? this.selectAll() : this.deselectAll();\n            event.preventDefault();\n          }\n\n          break;\n\n        default:\n          manager.onKeydown(event);\n      }\n\n      if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey && manager.activeItemIndex !== previousFocusIndex) {\n        this._toggleFocusedOption();\n      }\n    }\n    /**\n     * Reports a value change to the ControlValueAccessor\n     * @return {?}\n     */\n\n  }, {\n    key: \"_reportValueChange\",\n    value: function _reportValueChange() {\n      if (this.options) {\n        this._onChange(this._getSelectedOptionValues());\n      }\n    }\n    /**\n     * Emits a change event if the selected state of an option changed.\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent(option) {\n      this.selectionChange.emit(new MatSelectionListChange(this, option));\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(values) {\n      if (this.options) {\n        this._setOptionsFromValues(values || []);\n      } else {\n        this._tempValues = values;\n      }\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Sets the selected options based on the specified values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOptionsFromValues\",\n    value: function _setOptionsFromValues(values) {\n      var _this8 = this;\n\n      this.options.forEach(function (option) {\n        return option._setSelected(false);\n      });\n      values.forEach(function (value) {\n        /** @type {?} */\n        var correspondingOption = _this8.options.find(function (option) {\n          // Skip options that are already in the model. This allows us to handle cases\n          // where the same primitive value is selected multiple times.\n          if (option.selected) {\n            return false;\n          }\n\n          return _this8.compareWith ? _this8.compareWith(option.value, value) : option.value === value;\n        });\n\n        if (correspondingOption) {\n          correspondingOption._setSelected(true);\n        }\n      });\n    }\n    /**\n     * Returns the values of the selected options.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSelectedOptionValues\",\n    value: function _getSelectedOptionValues() {\n      return this.options.filter(function (option) {\n        return option.selected;\n      }).map(function (option) {\n        return option.value;\n      });\n    }\n    /**\n     * Toggles the state of the currently focused option if enabled.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleFocusedOption\",\n    value: function _toggleFocusedOption() {\n      /** @type {?} */\n      var focusedIndex = this._keyManager.activeItemIndex;\n\n      if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n        /** @type {?} */\n        var focusedOption = this.options.toArray()[focusedIndex];\n\n        if (focusedOption && !focusedOption.disabled) {\n          focusedOption.toggle(); // Emit a change event because the focused option changed its state through user\n          // interaction.\n\n          this._emitChangeEvent(focusedOption);\n        }\n      }\n    }\n    /**\n     * Sets the selected state on all of the options\n     * and emits an event if anything changed.\n     * @private\n     * @param {?} isSelected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setAllOptionsSelected\",\n    value: function _setAllOptionsSelected(isSelected) {\n      // Keep track of whether anything changed, because we only want to\n      // emit the changed event when something actually changed.\n\n      /** @type {?} */\n      var hasChanged = false;\n      this.options.forEach(function (option) {\n        if (option._setSelected(isSelected)) {\n          hasChanged = true;\n        }\n      });\n\n      if (hasChanged) {\n        this._reportValueChange();\n      }\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of options.\n     */\n\n  }, {\n    key: \"_isValidIndex\",\n    value: function _isValidIndex(index) {\n      return index >= 0 && index < this.options.length;\n    }\n    /**\n     * Returns the index of the specified list option.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOptionIndex\",\n    value: function _getOptionIndex(option) {\n      return this.options.toArray().indexOf(option);\n    }\n    /**\n     * Marks all the options to be checked in the next change detection run.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markOptionsForCheck\",\n    value: function _markOptionsForCheck() {\n      if (this.options) {\n        this.options.forEach(function (option) {\n          return option._markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n      // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n      // changed its state. Since we know that a change to `disabled` property of the list affects\n      // the state of the options, we manually mark each option for check.\n\n      this._markOptionsForCheck();\n    }\n  }]);\n\n  return MatSelectionList;\n}(_MatSelectionListMixinBase);\n\nMatSelectionList.ɵfac = function MatSelectionList_Factory(t) {\n  return new (t || MatSelectionList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatSelectionList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSelectionList,\n  selectors: [[\"mat-selection-list\"]],\n  contentQueries: function MatSelectionList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListOption, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"listbox\", \"aria-multiselectable\", \"true\", 1, \"mat-selection-list\", \"mat-list-base\"],\n  hostVars: 2,\n  hostBindings: function MatSelectionList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"blur\", function MatSelectionList_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"keydown\", function MatSelectionList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n      ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled.toString());\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    disabled: \"disabled\",\n    compareWith: \"compareWith\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\"\n  },\n  exportAs: [\"matSelectionList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SELECTION_LIST_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatSelectionList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [_c1],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSelectionList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatSelectionList.propDecorators = {\n  options: [{\n    type: ContentChildren,\n    args: [MatListOption, {\n      descendants: true\n    }]\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSelectionList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-selection-list',\n      exportAs: 'matSelectionList',\n      inputs: ['disableRipple'],\n      host: {\n        'role': 'listbox',\n        '[tabIndex]': 'tabIndex',\n        'class': 'mat-selection-list mat-list-base',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_keydown($event)',\n        'aria-multiselectable': 'true',\n        '[attr.aria-disabled]': 'disabled.toString()'\n      },\n      template: '<ng-content></ng-content>',\n      styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}\"],\n      encapsulation: ViewEncapsulation.None,\n      providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatListOption, {\n        descendants: true\n      }]\n    }],\n    compareWith: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatListModule = function MatListModule() {\n  _classCallCheck(this, MatListModule);\n};\n\nMatListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatListModule\n});\nMatListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatListModule_Factory(t) {\n    return new (t || MatListModule)();\n  },\n  imports: [[MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule], MatLineModule, MatCommonModule, MatPseudoCheckboxModule, MatDividerModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatListModule, {\n    declarations: function declarations() {\n      return [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatSelectionList, MatListOption];\n    },\n    imports: function imports() {\n      return [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatLineModule, MatCommonModule, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatPseudoCheckboxModule, MatSelectionList, MatListOption, MatDividerModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n      exports: [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatLineModule, MatCommonModule, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatPseudoCheckboxModule, MatSelectionList, MatListOption, MatDividerModule],\n      declarations: [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatSelectionList, MatListOption]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatListModule, MatListBase, _MatListMixinBase, MatListItemBase, _MatListItemMixinBase, MatNavList, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatListItem, MatSelectionListBase, _MatSelectionListMixinBase, MatListOptionBase, _MatListOptionMixinBase, MAT_SELECTION_LIST_VALUE_ACCESSOR, MatSelectionListChange, MatListOption, MatSelectionList };","map":{"version":3,"sources":["../../../src/lib/list/list.ts","../../../src/lib/list/selection-list.ts","../../../src/lib/list/list-module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmCA,W;;;AACA;;;AAAA,IAAa,iBAAiB,GAC1B,kBAAkB,CADtB,WACsB,CADtB,C,CAAC;;AAAmD;;;;;IAKpD,e;;;AACA;;;AAAA,IAAa,qBAAqB,GAC9B,kBAAkB,CADtB,eACsB,CADtB;;IAiBa,U;;;;;AAdb,wBAAA;AAAA;;AAAA;;AAAE,+BAAA,SAAA;AACgB;;;;AAgBlB,UAAA,aAAA,GAAkB,IAAI,OAAJ,EAAlB;AAjBA;AA0BC;AACD;;;;;;;kCARA;AACI,WAAK,aAAL,CAAmB,IAAnB;AACD;AACH;;;;;;kCACA;AACI,WAAK,aAAL,CAAmB,QAAnB;AACD;;;;EAXH,iB;;2BAdA,kB,CAAC,C,EAAD;AAAA,SAAA,uBAAA,CAAA,CAAA,IAAA,UAAA,CAAA;AACE,C;;AAAQ,UAAE,CAAA,IAAF,GAAV,MAAA,CAAA,iBAAA,CACA;AAAA,EAAA,IAAA,EAAA,UAAA;AAAA,EAAA,SACA,EAAA,CAAA,CAAA,cAAA,CAAA,CADA;AACA,EAAA,SAAA,EAAA,CACA,MADA,EACA,YADA,EACA,CADA,EACA,cADA,EACA,eADA,CADA;AAGA,EAAA,MAAA,EAAA;AAAA,IAAA,aACA,EAAA;AADA,GAHA;AAIA,EAAA,QAAA,EAAA,CAAA,YAAA,CAJA;AAKA,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA,EAAA,MAAA,CAAA,oBAAA,CALA;AAKA,EAAA,kBAAA,EAAA,GALA;AAKA,EAAA,KAAA,EAAA,CALA;AAKA,EAAA,IAAA,EAAA,CALA;AAKA,EAAA,QAAA,EAAA,SAAA,mBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;GALA;eAAA;kBAAA;;AAAA,CADA,CAAU;;;;;;;;;;;;;;;eAMV,svZ;;;;;;AAKA,C;;IAKA,O;;;;;AAAE;;;;;AAO4B,mBAAA,WAAA,EAAA;AAAA;;AAAA;;AAKxB;AAoBN,WAAA,WAAA,GAAA,WAAA;AAAC;;;;AAGA,WAAA,aAAA,GAAA,IAAA,OAAA,EAAA;;AAA4C,QAAA,OAAA,YAAA,OAAA,aAAA,IAAA,WAAA,EAAA;AAT7C,MAAA,WAAA,CAAA,aAAA,CAAA,SAAA,CAAA,GAAA,CAAA,iBAAA;AASA;;AA5B8B;AA6B9B;AAAC;;;;;;;mCAAmC;AAAqB;AAIzD,UAAA,UAAA,GAAA,KAAA,WAAA,CAJoC,CAInC;;AACD,UAAA,UAAA,EAAoB;AAAE;AAGd,YAAR,QAAA,GAAA,UAAA,CAAA,aAAA,CAAA,QAAA,CAAA,WAAA,EAAQ;;AAAP,YAAA,QAAA,KAAA,UAAA,EAAA;AACD,iBAAA,MAAA;AAEA;;AACA,YAAQ,QAAR,KAAA,iBAAA,EAAA;AACA,iBAAA,aAAA;AAEA;AACA;;AACA,aAAA,IAAA;AACA;AAAC;;;;;;kCAKM;AACE,WAAA,aAAA,CAAA,IAAA;AADT;AAAC;;;;;;kCACiB;AAGhB,WAAA,aAAA,CAAA,QAAA;AAAF;;;;EA/DA,iB;;AAiEA,OAAA,CAAA,IAAA,GAAA,SAAA,eAAA,CAAA,CAAA,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,OAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,CAAA;AAAA,CAAA;;sBAtDA,iB,CAAA;AAAA,EAAA,IAAA,EAAA,OAAA;AAAA,EAAA,SAAA,EAAA,CAAA,CAAA,UAAA,CAAA,EACE,CAAF,iBAAE,CADF,CAAA;AACA,EAAA,SACA,EAAA,CAAA,CAAA,EAAA,UAAA,EAAA,eAAA,CAFA;AAEuC,EAAA,MAAA,EAAA;AACvC,IAAA,aAAA,EAAA;AADuC,GAFvC;AAIA,EAAA,QAAA,EAAA,CAAA,SAAA,CAJA;AAIA,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA,EAAA,MAAA,CAAA,oBAAA,CAJA;AAIA,EAAA,kBAAA,EAAA,GAJA;AAIA,EAAA,KAAA,EAAA,CAJA;AAIA,EAAA,IAAA,EAAA,CAJA;AAIA,EAAA,QAAA,EAAA,SAAA,gBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;GAJA;eAAA;kBAAA;mBASA;AATA,C;AASC;;AAED,OAAA,CAAA,cAAA,GAAA;AAAA,SAAiB,CACjB;AAAA,IAAA,IAAA,EAAA;AAAA,GADiB,CAAjB;AAAA,CAAA;;;;;;;;;;;;;;eAPA,svZ;;;;;;;;;;AASA,C;AAAC;;;;;;IACG,yB;;;;;SAmDJ,KAAA,CAAA,IAAA,yBAAA,G;AAAA,C;;AAAA,yBAAA,CAAA,IAAA,GAAA,MAAA,CAAA,iBAAA,CAAA;AAAA,EAAA,IAAA,EAJA,yBAIA;AAJA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,EAAA,iBAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,eAAA,EAAA,EAAA,CAAA,CAIA;AAJA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,iBAAA;AAIA,CAAA,CAAA;;;;;;;;;;;;;AAJA,C;AAAC;;;;;;IAID,uB;;;;;SAUA,KAAA,CAAA,IAAA,uBAAA,G;AAAA,C;;AAAA,uBAAA,CAAA,IAAA,GAAA,MAAA,CAAA,iBAAA,CAAA;AAAA,EAAA,IAAA,EAJA,uBAIA;AAJA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,EAAA,eAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,aAAA,EAAA,EAAA,CAAA,CAIA;AAJA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,eAAA;AAIA,CAAA,CAAA;;;;;;;;;;;;;AAJA,C;AAAC;;;;;;IAIK,4B;;;;;AAUN,SAAA,KAAA,CAAA,IAAA,4BAAA,GAAA;AAAA,C;;;MAJA,EAAA,4B;AAAA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,EAAA,eAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,cAAA,EAAA,EAAA,CAAA,C;AAAA,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,eAAA;;;;;;;;;;;;;;AAAA,C;AAAC;;;;;IACqC,W;;;;;AAGnC;;;;;;AAKI,uBAAA,QAAA,EAAA,OAAA,EAAA,IAAA,EAA0C;AAIhD,EAAA,kBAJM,EAIN;AAAA;;AAAA;;AAA0B;AAmB3B,WAAA,QAAA,GAAA,QAAA;AAGA,WAAA,kBAAA,GAAA,KAAA;AACA,WAAA,UAAA,GAAA,IAAA,OAAA,EAAA;AACA,WAAA,kBAAA,GAAA,CAAA,EAAA,OAAA,IAAA,IAAA,IAAA,IAAA,CAAA,YAAA,OAAA,aAAA,CAAA;AALA,WAAA,KAAA,GAA8B,OAA9B,IAAA,IAAA,CAnBC,CAmBA;AACuB;;AACiB;;AAKrC,QAAJ,OAAiB,GAAjB,OAAA,eAAA,EAAI;;AAAH,QAAA,OAAA,CAAA,QAAA,CAAA,WAAA,OAAA,QAAA,IAAA,CAAA,OAAA,CAAA,YAAA,CAAA,MAAA,CAAA,EAAA;AAEyD,MAAA,OAAA,CAAA,YAAA,CAAA,MAAA,EAAA,QAAA;AACxB,KA7BjC,CA6B2C;;;AAGxC,QAAJ,OAAA,KAAA,IAAA,kBAAI,EAAJ;AAAE;AAAsE;AAIxE,aAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CAAA,OAAA,UAAA,CAAA,EAAA,SAAA,CAAA,YAAA;AACY,QAAA,kBAAZ,CAAA,YAAY;AACZ,OAFA;AAGA;;AAvCC;AAwCD;AAAC;;;;;;;yCAID;AAAE,MAAA,QAAA,CAAA,KAAA,MAAA,EAAA,KAAA,QAAA,CAAA;AAGgB;AAAM;;;;;;kCACxB;AAAE,WAAA,UAAA,CAAA,IAAA;;AAGS,WAAA,UAAA,CAAA,QAAA;AACQ;AAAM;;;;;;;wCAIJ;AACE,aAAA,CAAA,KAAA,kBAAA,IAAA,KAAA,aAAA,IACI,CAAA,EAAA,KAAA,KAAA,IAAA,KAAA,KAAA,CAAA,aAAA,CADJ;AAIA;AAAM;;;;;;;sCAEF;AAGtB,aAAA,KAAA,QAAA,CAAA,aAAA;AAA4C;;;;EA9EX,qB;;AA0EtC,WAAA,CAAA,IAAA,GAAA,SAAA,mBAAA,CACA,CADA,EACA;AAAA,SAAA,KAAA,CAAA,IAAA,WAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,CACA,UADA,EACA,CADA,CAAA,EACA,MAAA,CAAA,iBAAA,CAAA,OAAA,EAAA,CAAA,CADA,EACA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,iBAAA,CADA,CAAA;AACA,CAFA;;;;uCAnEA,e,EAAA,E,GAAA,CAAA,QAAA,EAAA,eAAA,EAAA,EAAA,C;AAAA,EAAA,cAAA,EAAA,SACA,0BADA,CACA,EADA,EACA,GADA,EACA,QADA,EACA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AACA,MAAA,MAAA,CAAA,cAAA,CACA,QADA,EACA,yBADA,EACA,IADA;AAEA,MAAA,MAAA,CAAA,cAAA,CAAA,QAAA,EAAA,uBAAA,EAAA,IAAA;;;;;;;;;wEAAA,E;;;;;gBAEA,SAAA,wBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AACA,MAAA,MACA,CAAA,WADA,CACA,sBADA,EACA,GAAA,CAAA,OAAA,IAAA,GAAA,CAAA,KADA,EACA,2BADA,EACA,GAAA,CAAA,OAAA,IAAA,GAAA,CAAA,KADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBACA;;AAAC;;AAED,WAAA,CAAA,cAAA,GAAe;AAAA,SAAf,CACA;AAAA,IAAA,IAAA,EAAA;AAAA,GADA,EAEA;AAAA,IAAA,IAAA,EAAA,UAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GAFA,EAGA;AAAA,IAAA,IAAA,EAAA,OAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA;AAAA,GAHA,EAGE;AAAA,IAAA,IAAA,EAAA;AAAA,GAHF,CAAe;AAAA,CAAf;;AAIkC,WAAA,CAAA,cAAA,GAAA;AAjKlC,EAAA,MAAA,EAAE,CAAF;AAAA,IAAA,IAAA,EAAA,eAAA;AAAA,IAAA,IAAA,EAAA,CAAA,OAAA;AAAA,GAAE,CAiKgC;AAWlC,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,YAAA;AAAA,IAAA,IAAA,EAAA,CAAA,yBAAA;AAAA,GAAA,CAXkC;AAYlC,EAAA,KAAA,EAAA,CAAiC;AAAjC,IAAA,IAAA,EAAA,YAAiC;AAAjC,IAAA,IAAA,EAAA,CAAA,uBAAA;AAAiC,GAAjC;AAZkC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3JlC,C;AAAE;;;;;AAQA;;;;;IC0BF,oB;;;AACA;;;AAAA,IAAa,0BAA0B,GACnC,kBAAkB,CADtB,oBACsB,CADtB;AAAC;;;;;IAID,iB;;;AACA;;;AAAA,IAAa,uBAAuB,GAChC,kBAAkB,CADtB,iBACsB,CADtB;AAAC;;;;;;AAID,IAAa,iCAAiC,GAAQ;AACpD,EAAA,OAAO,EAAE,iBAD2C;AAEpD,EAAA,WAAW,EAAE,UAAU,CAAC;AAAA,WAAM,gBAAN;AAAA,GAAD,CAF6B;AAGpD,EAAA,KAAK,EAAE;AAH6C,CAAtD;AAIC;;;;IAGD,sB;AAAE;;;;AACF,gCAEW,MAFX,EAIW,MAJX,EAAA;AAAA;;AAEA,OAAA,MAAA,GAAW,MAAX;AAEA,OAAA,MAAA,GAAW,MAAX;AAAoC,C;AAEpC;;;;;;;IA2Ba,a;;;;;AAAX;;;;;AAqDF,yBAAsB,QAAtB,EACsB,eADtB,EAGiE,aAHjE,EAAA;AAAA;;AAAA;;AAII;AAJJ,WAAA,QAAA,GAAsB,QAAtB;AACA,WAAA,eAAA,GAAsB,eAAtB;AAEA,WAAA,aAAA,GAAiE,aAAjE;AArDA,WAAA,SAAA,GAAsB,KAAtB;AACA,WAAA,SAAA,GAAsB,KAAtB;AACA,WAAA,SAAA,GAAsB,KAAtB;AACA;;;;AASA,WAAA,gBAAA,GAAkD,OAAlD;AAsCA;AAKG;AACH;;;;;;;;;AAPA;;;+BAQA;AAAA;;AAAE;AACoF;AACC;AACQ;AAE5F;;AACI;AAAP,UAAU,WAAW,GAAG,KAAxB,SAAA;AAEI,MAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAA3B;AACM,YAAI,MAAI,CAAC,SAAL,IAAkB,WAAtB,EAAmC;AACjC,UAAA,MAAI,CAAC,QAAL,GAAgB,IAAhB;;AACA,UAAA,MAAI,CAAC,eAAL,CAAqB,YAArB;AACD;AACF,OALD;AAMD;AACH;;;;;;yCACA;AACI,MAAA,QAAQ,CAAC,KAAK,MAAN,EAAc,KAAK,QAAnB,CAAR;AACD;AACH;;;;;;kCACA;AAAA;;AACI,UAAI,KAAK,QAAT,EAAmB;AACvB;AACM;AACA,QAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB;AAAA,iBAAM,MAAI,CAAC,QAAL,GAAgB,KAAtB;AAAA,SAAvB;AACD;AACL;;;AACA,UAAU,QAAQ,GAAG,KAArB,SAAA;AAAC;;AACD,UAAU,aAAa,GAAG,KAAK,aAAL,CAAmB,qBAAnB,CAA1B,IAA0B,CAA1B,CARA,CAQC;;;AAGG,UAAI,QAAQ,IAAI,aAAhB,EAA+B;AAC7B,QAAA,aAAa,CAAC,KAAd;AACD;AACF;AACH;;;;;;;6BAEA;AACI,WAAK,QAAL,GAAgB,CAAC,KAAK,QAAtB;AACD;AACH;;;;;;;4BAEA;AACI,WAAK,QAAL,CAAc,aAAd,CAA4B,KAA5B;AACD;AACH;;;;;;;;+BAKA;AACI,aAAO,KAAK,KAAL,GAAc,KAAK,KAAL,CAAW,aAAX,CAAyB,WAAzB,IAAwC,EAAtD,GAA4D,EAAnE;AACD;AACH;;;;;;;wCAEA;AACI,aAAO,KAAK,QAAL,IAAiB,KAAK,aAAtB,IAAuC,KAAK,aAAL,CAAmB,aAAjE;AACD;AACH;;;;;;mCACA;AACI,UAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,aAAK,MAAL,GADkB,CAExB;;AAEM,aAAK,aAAL,CAAmB,gBAAnB,CAAoC,IAApC;AACD;AACF;AACH;;;;;;mCACA;AACI,WAAK,aAAL,CAAmB,iBAAnB,CAAqC,IAArC;;AACA,WAAK,SAAL,GAAiB,IAAjB;AACD;AACH;;;;;;kCACA;AACI,WAAK,aAAL,CAAmB,UAAnB;;AACA,WAAK,SAAL,GAAiB,KAAjB;AACD;AACH;;;;;;;sCAEA;AACI,aAAO,KAAK,QAAL,CAAc,aAArB;AACD;AACH;;;;;;;;iCAEe,Q,EAAf;AACI,UAAI,QAAQ,KAAK,KAAK,SAAtB,EAAiC;AAC/B,eAAO,KAAP;AACD;;AAED,WAAK,SAAL,GAAiB,QAAjB;;AAEA,UAAI,QAAJ,EAAc;AACZ,aAAK,aAAL,CAAmB,eAAnB,CAAmC,MAAnC,CAA0C,IAA1C;AACD,OAFD,MAEO;AACL,aAAK,aAAL,CAAmB,eAAnB,CAAmC,QAAnC,CAA4C,IAA5C;AACD;;AAED,WAAK,eAAL,CAAqB,YAArB;;AACA,aAAO,IAAP;AACD;AACH;;;;;;;;;oCAMA;AACI,WAAK,eAAL,CAAqB,YAArB;AACD;;;wBAtJH;AACqB,aAAO,KAAK,MAAZ;AAAqB;AAC1C;;;;;sBAAY,Q,EAAZ;AACI,UAAI,KAAK,QAAL,IAAiB,QAAQ,KAAK,KAAK,KAAvC,EAA8C;AAC5C,aAAK,QAAL,GAAgB,KAAhB;AACD;;AAED,WAAK,MAAL,GAAc,QAAd;AACD;AACH;;;;;;;wBAGA;AACmB,aAAO,KAAK,SAAL,IAAmB,KAAK,aAAL,IAAsB,KAAK,aAAL,CAAmB,QAAnE;AAA+E;AAClG;;;;;sBAAe,K,EAAf;AAAE;AACF,UAAU,QAAQ,GAAG,qBAAqB,CAA1C,KAA0C,CAA1C;;AAEI,UAAI,QAAQ,KAAK,KAAK,SAAtB,EAAiC;AAC/B,aAAK,SAAL,GAAiB,QAAjB;;AACA,aAAK,eAAL,CAAqB,YAArB;AACD;AACF;AACH;;;;;;;wBAEA;AAC4B,aAAO,KAAK,aAAL,CAAmB,eAAnB,CAAmC,UAAnC,CAA8C,IAA9C,CAAP;AAA6D;AACzF;;;;;sBAAe,K,EAAf;AAAE;AACF,UAAU,UAAU,GAAG,qBAAqB,CAA5C,KAA4C,CAA5C;;AAEI,UAAI,UAAU,KAAK,KAAK,SAAxB,EAAmC;AACjC,aAAK,YAAL,CAAkB,UAAlB;;AACA,aAAK,aAAL,CAAmB,kBAAnB;AACD;AACF;;;;EAnDH,uB;;8BArBA,qB,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,aAAA,EAAA,MAAA,CAAA,iBAAA,CACU,MAAE,CAAZ,UADA,CAAA,EACA,MAAA,CAAA,iBAAA,CACA,MAAA,CAAA,iBADA,CADA,EAEA,MACE,CAAF,iBADA,CACA,UACA,CAAA;AAAA,WAAA,gBAAA;AAAA,GAAA,CAFA,CAFA,CAAA;AAIA,C;;AACA,aAAA,CAAA,IAAA,GAAA,MAAA,CAAA,iBAAA,CAAA;AAAA,EAAA,IAAA,EAAA,aAAA;AACA,EAAA,SAAA,EAAA,CAAA,CAAA,iBAAA,CAAA,CADA;AACA,EAAA,cACI,EAAJ,SAAA,4BAAA,CAAA,EAAA,EAAA,GAAA,EACI,QADJ,EACe;AAAA,QAAA,EAAA,GAAA,CAAA,EAAgB;aAC3B,c,CAAJ,Q,EAAA,yB,EACI,I;aAAJ,c,CAAA,Q,EAAA,uB,EACI,I;AAAJ,MAAA,MAAA,CAAA,cAAA,CAAA,QAAA,EAAA,OAAA,EAAA,KAAA;;;;AACA,UAAA,EAAA;;AAAA,MAAA,MAAA,CAAA,cAAA,CACI,EAAA,GAAA,MAAA,CAAJ,WAAI,EADJ,MACA,GAAA,CAAA,OAAA,GAAA,EAAA,CAAA,KADA;AAEA,MAAA,MAAA,CAAA,cAAA,CACA,EAAA,GAAA,MAAA,CAAA,WAAA,EADA,MACA,GAAA,CAAA,KAAA,GAAA,EAAA,CAAA,KADA;;;GATA;;;;;;;;;;;GAAA;wFAAA;aAAA;;QAUA,EAAA,GAAA,C,EAAA;AACA,MAAA,MAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,sCAAA,GACA;AAAA,eAAA,GAAA,CAAA,YAAA,EAAA;AAAA,OADA,EACA,MADA,EAEA,SACA,qCADA,GACA;AAAA,eAAA,GAAA,CAAA,WAAA,EAAA;AAAA,OAHA,EAGA,OAHA,EAGA,SAAA,sCAAA,GAAA;AAAA,eAAA,GAAA,CAAA,YAAA,EAAA;AAAA,OAHA;;;;;;;GAXA;;;;;;;GAAA;6BAAA;+CAAA;yBAAA;UAAA;SAAA;iMAAA;;;;;;;;;;;;;;;;;;;;;GAAA;0DAAA;kBAAA;mBAcA;AAdA,CAAA,CAAA;AAcC;;AAAmB,aAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAEf;AAAA,IAAA,IAAA,EAAA;AAAA,GAFe,EAEW;AAAA,IAAA,IAAA,EAAA;AAAA,GAFX,EA3EpB;AAAA,IAAA,IAAA,EAAA,gBAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA,CAAA,UAAA,CAAA;AAAA,eAAA,gBAAA;AAAA,OAAA,CAAA;AAAA,KAAA;AAAA,GA2EoB,CAAA;AAAA,CAAA;;AA0DpB,aAAA,CAAA,cAAA,GAAA;AAAE,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,YAAA;AAAA,IAAA,IAAA,EAAA,CAAA,yBAAA;AAAA,GAAA,CAAF;AAA6E,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,YAAA;AAAA,IAAA,IAAA,EAAA,CAAA,uBAAA;AAAA,GAAA,CAA7E;AAjDA,EAAA,MAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,eAAA;AAAA,IAAA,IAAA,EAAA,CAAA,OAAA;AAAA,GAAA,CAiDA;AAhDA,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,IAAA,EAAA,CAAA,MAAA;AAAA,GAAA,CAgDA;AA/CA,EAAA,gBAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA+CA;AA5CA,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CA4CA;AAzCA,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAyCA;AAtCA,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA;AAsCA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1BA,C;AA0BA;;;;;IACI,gB;;;;;AAI2B;;;;AACzB,4BAAA,QAAA,EAAA,QAAA,EAAA;AAAA;;AAAA;;AAAsC;AAyL5C,WAAA,QAAA,GAAA,QAAA;AAAC;;;;AACM,WAAA,eAAA,GAAA,IAAA,YAAA,EAAA;AAEP;;;;AAG+B,WAAA,QAAA,GAAA,CAAA;AAA2B,WAAA,SAAA,GAAA,KAAA;AAE1D;;;;AAC4C,WAAA,eAAA,GAAA,IAAA,cAAA,CAAA,IAAA,CAAA;AACzC;;;;AAEA,WAAA,SAAA,GAAA,UAAA,CAAA,EAAA,CAAA,CAAA;AAAqC;;;;;AAKvC,WAAA,aAAA,GAAA,YAAA,CAAA,KAAA;AAE0C;;;;AAEpB,WAAA,UAAA,GAAA,YAAA,CAAA,CAAA;;AACY,WAAA,QAAA,GAAA,QAAA,CAAA,QAAA,CAAA,IAAA,CAAA;AA/M7B;AAuLN;AAAC;;;;;;;;;AAlBA;;;yCAAmC;AAA2B,WAAA,WAAA,GAAA,IAAA,eAAA,CAAA,KAAA,OAAA,EAyB/D,QAzB+D,GA0B/D,aA1B+D,GA0B9D;AAEc;AA5BgD,OA6B/D,aA7B+D,CA6B/D;AAAA,eAAA,KAAA;AAAA,OA7B+D,EA8B/D,uBA9B+D,CA8B/D,CAAA,UAAA,CA9B+D,CAAA;;AA+B/D,UAAA,KAAA,WAAA,EAAwB;AACxB,aAAA,qBAAA,CAAA,KAAA,WAAA;;AAEQ,aAAK,WAAL,GAAR,IAAQ;AACR,OAnCoC,CAmCnC;;;AAED,WAAA,aAAA,GAAA,KAAA,eAAA,CAAA,QAAA,CAAA,SAAA,CAAA,UAAA,KAAA,EAAA;AAEA,YAAA,KAAA,CAAA,KAAA,EAAA;AAAA,qDAC6B,KAA7B,CAAA,KADA;AAAA;;AAAA;AACA,gEAAA;AAAA,kBAAA,IAAA;AACA,cAAA,IAAA,CAAA,QAAA,GAAA,IAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAIA;;AACA,YAAA,KAAA,CAAA,OAAA,EAAA;AAAA,sDACA,KAAA,CAAA,OADA;AAAA;;AAAA;AACA,mEAAA;AAAA,kBAAA,KAAA;AAEA,cAAA,KAAA,CAAA,QAAA,GAAA,KAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA,OAbA,CAAA;AAcA;AAAC;;;;;;;gCAKA,O,EAAA;AAA2B;AAD5B,UAAA,oBAAA,GAAA,OAAA,CAAA,aAAA;;AAAC,UAAA,oBAAA,IAAA,CAAA,oBAAA,CAAA,WAAA,EAAA;AACD,aAAA,oBAAA;AAEA;AACA;AAAC;;;;;;kCACA;AAGS,WAAA,aAAA,CAAA,WAAA;AAAV;AAAC;;;;;;;4BAIS;AAAc,WAAA,QAAA,CAAA,aAAA,CAAA,KAAA;AACxB;AAAC;;;;;;;gCAIY;AAAkB,WAAA,sBAAA,CAAA,IAAA;AAC/B;AAAC;;;;;;;kCAIY;AAAoB,WAAA,sBAAA,CAAA,KAAA;AACjC;AAAC;;;;;;;;sCAImD,M,EAAA;AACxB,WAAA,WAAA,CAAA,gBAAA,CAAA,MAAA;AAA5B;AAAC;;;;;;;;0CAK0D,M,EAAA;AACxC;AAEnB,UAAA,WAAuB,GAAvB,KAAA,eAAA,CAAA,MAAA,CAAA;;AAAC,UAAA,WAAA,GAAA,CAAA,CAAA,IAAA,KAAA,WAAA,CAAA,eAAA,KAAA,WAAA,EAAA;AACa;AAEN,YAAR,WAAuB,GAAvB,CAAQ,EAAR;AACA,eAAA,WAAA,CAAA,gBAAA,CAAA,WAAA,GAAA,CAAA;AACA,SAFQ,MAGR,IAAa,WAAW,KAAxB,CAAa,IAAb,KAAA,OAAA,CAAA,MAAA,GAAwD,CAAxD,EAA2D;AAC3D,eAAA,WAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,WAAA,GAAA,CAAA,EAAA,KAAA,OAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AAAA;AACA;;AACA,aAAA,KAAA,WAAA,CAAA,UAAA;AACA;AAAC;;;;;;;;6BAMK,K,EAAA;AAAsB;AAA5B,UAAA,OAAA,GAAA,KAAA,CAAA,OAAA;AAAC;;AACD,UAAU,OAAO,GAAjB,KAAA,WAAA;AAAC;;AACD,UAAU,kBAAV,GAAA,OAAA,CAAA,eAAA;AAAC;;AACD,UAAU,WAAV,GAAA,cAAsC,CAAtC,KAAsC,CAAtC;;AAAC,cAAA,OAAA;AACD,aAAA,KAAA;AAEA,aAAA,KAAA;AACA,cAAA,CAAA,WAAA,EAAA;AACA,iBAAA,oBAAA,GADA,CACC;;;AAES,YAAA,KAAK,CAAf,cAAU;AACV;;AACA;;AACA,aAAA,IAAA;AACA,aAAA,GAAA;AACA,cAAA,CAAA,WAAA,EAAA;AACc,YAAA,OAAd,KAAA,IAAc,GAAd,OAAA,CAAA,kBAAA,EAAc,GAAd,OAAA,CAAA,iBAAA,EAAc;AACF,YAAA,KAAZ,CAAA,cAAY;AACZ;;AACA;;AACA,aAAA,CAAA;AACQ,cAAR,cAAA,CAAA,KAAA,EAAA,SAAA,CAAQ,EAAR;AACA,iBAAA,OAAA,CAAA,IAAA,CAAA,UAAA,MAAA;AAAA,qBAAA,CAAA,MAAA,CAAA,QAAA;AAAA,aAAA,IAAA,KAAA,SAAA,EAAA,GAAA,KAAA,WAAA,EAAA;AACY,YAAA,KAAZ,CAAA,cAAY;AACZ;;AACA;;AACA;AACQ,UAAA,OAAR,CAAA,SAAQ,CAAR,KAAQ;AAxBP;;AA0BD,UAAA,CAAA,OAAA,KAAA,QAAA,IAAA,OAAA,KAAA,UAAA,KAAA,KAAA,CAAA,QAAA,IACA,OAAA,CAAA,eAAA,KAAA,kBADA,EACA;AAEA,aAAA,oBAAA;AACA;AACA;AAAC;;;;;;;yCAI+C;AACjC,UAAA,KAAA,OAAA,EAAA;AAAf,aAAA,SAAA,CAAA,KAAA,wBAAA,EAAA;AACA;AACA;AAAC;;;;;;;;qCAIkE,M,EAAA;AAC3C,WAAA,eAAA,CAAA,IAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,EAAA,MAAA,CAAA;AAAxB;AAAC;;;;;;;;+BACoE,M,EAAA;AAGrD,UAAA,KAAA,OAAA,EAAA;AAChB,aAAA,qBAAA,CAAA,MAAA,IAAA,EAAA;AACA,OAFgB,MAGhB;AACA,aAAA,WAAA,GAAA,MAAA;AAAA;AACA;AAAC;;;;;;;;qCAKkB,U,EAAA;AACb,WAAA,QAAA,GAAA,UAAA;AADN;AAAC;;;;;;;;qCAIuB,E,EAAA;AAA2B,WAAA,SAAA,GAAA,EAAA;AACnD;AAAC;;;;;;;;sCAIyB,E,EAAA;AAC1B,WAAA,UAAA,GAAA,EAAA;AAAA;AAAC;;;;;;;;;0CAKD,M,EAAA;AAAA;;AAAoC,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA;AAAA,eAAA,MAAA,CAAA,YAAA,CAAA,KAAA,CAAA;AAAA,OAAA;AAApC,MAAA,MAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAgD;AAAE;AAGlD,YAAA,mBAAA,GAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,UAAA,MAAA,EAAA;AAAE;AAEA;AAAM,cAAR,MAAA,CAAA,QAAQ,EAAR;AACA,mBAAA,KAAA;AACA;;AACA,iBAAA,MAAiB,CAAjB,WAAA,GAAA,MAAA,CAAA,WAAA,CAAA,MAAA,CAAA,KAAA,EAAA,KAAA,CAAA,GAAA,MAAA,CAAA,KAAA,KAAA,KAAA;AACA,SANA,CAAA;;AAQA,YAAA,mBAAA,EAAA;AACA,UAAA,mBAAA,CAAA,YAAA,CAAA,IAAA;AAEA;AACA,OAfA;AAgBA;AAAC;;;;;;;;+CAK4B;AAChB,aAAA,KAAA,OAAA,CAAA,MAAA,CAAA,UAAA,MAAA;AAAA,eAAA,MAAA,CAAA,QAAA;AAAA,OAAA,EAAA,GAAA,CAAA,UAAA,MAAA;AAAA,eAAA,MAAA,CAAA,KAAA;AAAA,OAAA,CAAA;AADb;AAAC;;;;;;;;2CACuE;AAG/D;AACT,UAAA,YAA8B,GAA9B,KAAA,WAAA,CAAA,eAAA;;AAAC,UAAA,YAAA,IAAA,IAAA,IAAA,KAAA,aAAA,CAAA,YAAA,CAAA,EAAA;AAC+B;AAExB,YAAR,aAAA,GAA4B,KAA5B,OAA4B,CAA5B,OAA4B,GAA5B,YAA4B,CAApB;;AAAP,YAAA,aAAA,IAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACS,UAAA,aAAa,CAAvB,MAAU,GADT,CACA;AAEiB;;AAGlB,eAAA,gBAAA,CAAA,aAAA;AACA;AACA;AACA;AAAC;;;;;;;;;;2CAQqD,U,EAAA;AACf;AACI;;AAGzB;AACZ,UAAA,UAAA,GAAA,KAAA;AAAgC,WAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AAH9B,YAAR,MAAkB,CAAlB,YAAA,CAAA,UAAA,CAAQ,EAAR;AAEA,UAAA,UAAA,GAAA,IAAA;AACA;AACA,OADsC;;AAEtC,UAAA,UAAA,EAAA;AACA,aAAA,kBAAA;AAEA;AACA;AAAC;;;;;;;;;kCAO6D,K,EAAA;AAE7C,aAAA,KAAA,IAAA,CAAA,IAAA,KAAA,GAAA,KAAA,OAAA,CAAA,MAAA;AAAjB;AAAC;;;;;;;;;oCAIsB,M,EAAA;AAA8B,aAAA,KAAA,OAAA,CAAA,OAAA,GAAA,OAAA,CAAA,MAAA,CAAA;AACrD;AAAC;;;;;;;;2CAIa;AAA6B,UAAA,KAAA,OAAA,EAAA;AAC3C,aAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA;AAAA,iBAAA,MAAA,CAAA,aAAA,EAAA;AAAA,SAAA;AACA;AACA;;;wBAjP6C;AAAA,aAAA,KAAA,SAAA;AAAA;AAA8C;;;;;sBAEtD,K,EAAA;AAGxB,WAAA,SAAA,GAAA,qBAAA,CAAA,KAAA,CAAA,CAHwB,CAIA;AAGnB;AACE;AAEjB;;AAjCH,WAAA,oBAAA;AACA;;;;EA1KI,0B;;AAibJ,gBAAA,CAAA,IAAA,GAAA,SAAA,wBAAA,CAAA,CAAA,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,gBAAA,EAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,EAAA,MAAA,CA3TA,iBA2TA,CA3TA,UA2TA,CAAA,CAAA;AA3TA,CA2TA;;AA1TE,gBAAA,CAAF,IAAE,GAAF,MAAA,CAAA,iBAAA,CACY;AAAZ,EAAA,IAAA,EAAA,gBAAY;AAAZ,EAAA,SACA,EAAA,CAAA,CAAA,oBAAA,CAAA,CADY;AACkB,EAAA,cAAA,EAC9B,SAAA,+BAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA;AAAA,QACM,EAAA,GAAN,CADA,EACA;AAAA,MAAA,MAAA,CAAA,cAAA,CAAA,QAAA,EACA,aADA,EACA,IADA;AACA;;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AACI,UAAA,EAAA;;AAAJ,MAAA,MAA4B,CAA5B,cAAA,CAAA,EAAA,GAAA,MAAA,CACI,WADJ,EAAA,MACI,GAAJ,CAAA,OAAI,GAAJ,EADA;;AACA,GANY;AAMZ,EAAA,SAAA,EAAA,CAAA,MAAA,EACA,SADA,EACA,sBADA,EAEA,MAFA,EAEA,CAFA,EAEA,oBAFA,EAEA,eAFA,CANY;AASZ,EAAA,QAAA,EAAA,CATY;AASZ,EAAA,YAAA,EAAA,SAAA,6BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;;;GATY;;;;;;GAAA;;;GAAA;gCAAA;4IAAA;yBAAA;UAAA;SAAA;;;;;;GAAA;eAAA;kBAAA;mBAcZ;AAdY,CADZ,CAAE;AAeD;;AAED,gBAAE,CAAF,cAAA,GAAA;AAAA,SAAA,CACA;AAAA,IAAA,IAAA,EAAA;AAAA,GADA,EACE;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA,SAAA;AAAA,MAAA,IAAA,EAAA,CAAA,UAAA;AAAA,KAAA;AAAA,GADF,CAAA;AAAA,CAAA;;AAE+E,gBAAA,CAAA,cAAA,GAAA;AAhR/E,EAAA,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA,eAAA;AAAA,IAAA,IAAA,EAAA,CAAA,aAAA,EAAA;AAAA,MAAA,WAAA,EAAA;AAAA,KAAA;AAAA,GAAA,CAgR+E;AAoD/E,EAAA,eAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CApD+E;AAoD7E,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CApD6E;AAoD5C,EAAA,WAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CApD4C;AAO/E,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA;AAP+E,CAAA;;;;;;;;;;;;;;;;;;;;eAT/E,svZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,C;AAAE;;;;;;IChQF,a;;;;4BA3BA,gB,CAAC;AAAA,EAAA,IAAD,EAAA;AAAC,C;AACC,aAAO,CAAE,IAAT,GAAU,MAAA,CAAa,gBAAb,CAA8B;AAAE,EAAA,OAAA,EAAA,SAAiB,qBAAjB,CAAwC,CAAxC,EAA0C;AAAA,WAAA,KAAa,CAAA,IAAA,aAAb,GAAA;AAC7E,GADiC;AAC/B,EAAA,OAAA,EAAA,CAAA,CAAA,aAAA,EACP,eADO,EACA,eADA,EAEG,uBAFH,EAGP,YAHO,CAAA,EAGI,aAHJ,EAIP,eAJO,EAIkB,uBAJlB,EAKM,gBALN;AAD+B,CAA9B,CAAV;;CAOiB,YAAA;AAAA,GAAA,OAAA,SAAA,KACf,WADe,IACf,SADe,KACQ,MAAA,CAAA,kBAAA,CACvB,aADuB,EACK;AAAA,IAAA,YAAA,EAAA,wBAC5B;AAAA,aAAA,CAAA,OAAA,EAAuB,UAAvB,EAAuB,WAAvB,EACA,yBADA,EACgB,uBADhB,EAEa,4BAFb,EAGgB,gBAHhB,EAID,aAJC,CAAA;AAKF,KAN8B;AAM9B,IAAA,OAAA,EAAA,mBAAc;AAAA,aAAA,CAAA,aAAA,EACL,eADK,EAEZ,eAFY,EAEF,uBAFE,EAGZ,YAHY,CAAA;AAGD,KATiB;AASjB,IAAA,OACX,EAAA,mBAAA;AAAA,aAAyB,CAAA,OAAA,EAAA,UAAA,EACzB,WADyB,EACzB,yBADyB,EACF,aADE,EAEG,eAFH,EAEG,uBAFH,EAGzB,4BAHyB,EAIzB,uBAJyB,EAIZ,gBAJY,EAK1B,aAL0B,EAM7B,gBAN6B,CAAzB;AAMJ;AAhBgC,GADL,CADR;AAkBnB,C;;;;;;;;;;;;;AACC,C;AAAE;;;;;AACkH;;;;;;AAAgJ,SAAA,aAAA,EAAA,WAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,qBAAA,EAAA,UAAA,EAAA,OAAA,EAAA,yBAAA,EAAA,uBAAA,EAAA,4BAAA,EAAA,WAAA,EAAA,oBAAA,EAAA,0BAAA,EAAA,iBAAA,EAAA,uBAAA,EAAA,iCAAA,EAAA,sBAAA,EAAA,aAAA,EAAA,gBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list' && _elementRef) {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList,\n              // @breaking-change 8.0.0 `_changeDetectorRef` to be made into a required parameter.\n              _changeDetectorRef?: ChangeDetectorRef) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    // @breaking-change 8.0.0 Remove null check for _changeDetectorRef.\n    if (this._list && _changeDetectorRef) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes.disableRipple;\n\n    if (disableRippleChanges && !disableRippleChanges.firstChange) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n"]},"metadata":{},"sourceType":"module"}