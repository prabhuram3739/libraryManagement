{"ast":null,"code":"import _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, map, startWith, take, takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by the Material drawers.\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\nvar _c0 = [\"*\"];\n\nfunction MatDrawerContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nvar _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\n\nfunction MatSidenavContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nvar _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nvar _c5 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\";\nvar matDrawerAnimations = {\n  /**\n   * Animation that slides a drawer in and out.\n   */\n  transformDrawer: trigger('transform', [// We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), state('void', style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), transition('void => open-instant', animate('0ms')), transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\n\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(\"A drawer was already declared for 'position=\\\"\".concat(position, \"\\\"'\"));\n}\n/**\n * Configures whether drawers should use auto sizing by default.\n * @type {?}\n */\n\n\nvar MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\n\nvar MatDrawerContent = /*#__PURE__*/function (_CdkScrollable) {\n  _inherits(MatDrawerContent, _CdkScrollable);\n\n  var _super = _createSuper(MatDrawerContent);\n\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _container\n   * @param {?} elementRef\n   * @param {?} scrollDispatcher\n   * @param {?} ngZone\n   */\n  function MatDrawerContent(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n    var _this;\n\n    _classCallCheck(this, MatDrawerContent);\n\n    _this = _super.call(this, elementRef, scrollDispatcher, ngZone);\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._container = _container;\n    return _this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatDrawerContent, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._container._contentMarginChanges.subscribe(function () {\n        _this2._changeDetectorRef.markForCheck();\n      });\n    }\n  }]);\n\n  return MatDrawerContent;\n}(CdkScrollable);\n\nMatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) {\n  return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n    return MatDrawerContainer;\n  })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nMatDrawerContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDrawerContent,\n  selectors: [[\"mat-drawer-content\"]],\n  hostAttrs: [1, \"mat-drawer-content\"],\n  hostVars: 4,\n  hostBindings: function MatDrawerContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatDrawerContent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDrawerContent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: MatDrawerContainer,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(function () {\n        return MatDrawerContainer;\n      })]\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDrawerContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer-content',\n      template: '<ng-content></ng-content>',\n      host: {\n        'class': 'mat-drawer-content',\n        '[style.margin-left.px]': '_container._contentMargins.left',\n        '[style.margin-right.px]': '_container._contentMargins.right'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatDrawerContainer,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return MatDrawerContainer;\n        })]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n\n\nvar MatDrawer = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _focusMonitor\n   * @param {?} _platform\n   * @param {?} _ngZone\n   * @param {?} _doc\n   */\n  function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatDrawer);\n\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._focusMonitor = _focusMonitor;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._doc = _doc;\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    /**\n     * Whether the drawer is initialized. Used for disabling the initial animation.\n     */\n\n    this._enableAnimations = false;\n    this._position = 'start';\n    this._mode = 'over';\n    this._disableClose = false;\n    this._autoFocus = true;\n    /**\n     * Emits whenever the drawer has started animating.\n     */\n\n    this._animationStarted = new Subject();\n    /**\n     * Emits whenever the drawer is done animating.\n     */\n\n    this._animationEnd = new Subject();\n    /**\n     * Current state of the sidenav animation.\n     */\n\n    this._animationState = 'void';\n    /**\n     * Event emitted when the drawer open state is changed.\n     */\n\n    this.openedChange = // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter(\n    /* isAsync */\n    true);\n    /**\n     * Emits when the component is destroyed.\n     */\n\n    this._destroyed = new Subject();\n    /**\n     * Event emitted when the drawer's position changes.\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onPositionChanged = new EventEmitter();\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n\n    this._modeChanged = new Subject();\n    this._opened = false;\n    this.openedChange.subscribe(function (opened) {\n      if (opened) {\n        if (_this3._doc) {\n          _this3._elementFocusedBeforeDrawerWasOpened =\n          /** @type {?} */\n          _this3._doc.activeElement;\n        }\n\n        if (_this3._isFocusTrapEnabled && _this3._focusTrap) {\n          _this3._trapFocus();\n        }\n      } else {\n        _this3._restoreFocus();\n      }\n    });\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n\n    this._ngZone.runOutsideAngular(function () {\n      fromEvent(_this3._elementRef.nativeElement, 'keydown').pipe(filter(function (event) {\n        return event.keyCode === ESCAPE && !_this3.disableClose;\n      }), takeUntil(_this3._destroyed)).subscribe(function (event) {\n        return _this3._ngZone.run(function () {\n          _this3.close();\n\n          event.stopPropagation();\n        });\n      });\n    }); // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n\n    this._animationEnd.pipe(distinctUntilChanged(function (x, y) {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(function (event) {\n      var fromState = event.fromState,\n          toState = event.toState;\n\n      if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n        _this3.openedChange.emit(_this3._opened);\n      }\n    });\n  }\n  /**\n   * The side that the drawer is attached to.\n   * @return {?}\n   */\n\n\n  _createClass(MatDrawer, [{\n    key: \"_trapFocus\",\n\n    /**\n     * Traps focus inside the drawer.\n     * @private\n     * @return {?}\n     */\n    value: function _trapFocus() {\n      var _this4 = this;\n\n      if (!this.autoFocus) {\n        return;\n      }\n\n      this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n        // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n        // still works. We need to check that `focus` is a function due to Universal.\n        if (!hasMovedFocus && typeof _this4._elementRef.nativeElement.focus === 'function') {\n          _this4._elementRef.nativeElement.focus();\n        }\n      });\n    }\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_restoreFocus\",\n    value: function _restoreFocus() {\n      if (!this.autoFocus) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var activeEl = this._doc && this._doc.activeElement;\n\n      if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n        if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n          this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n        } else {\n          this._elementRef.nativeElement.blur();\n        }\n      }\n\n      this._elementFocusedBeforeDrawerWasOpened = null;\n      this._openedVia = null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n      // drawers that are open by default. When we're on the server, we shouldn't enable the\n      // animations, because we don't want the drawer to animate the first time the user sees\n      // the page.\n      if (this._platform.isBrowser) {\n        this._enableAnimations = true;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n\n      this._animationStarted.complete();\n\n      this._animationEnd.complete();\n\n      this._modeChanged.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n\n    /**\n     * Open the drawer.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    value: function open(openedVia) {\n      return this.toggle(true, openedVia);\n    }\n    /**\n     * Close the drawer.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.toggle(false);\n    }\n    /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      var _this5 = this;\n\n      var isOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.opened;\n      var openedVia = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'program';\n      this._opened = isOpen;\n\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n        this._openedVia = openedVia;\n      } else {\n        this._animationState = 'void';\n\n        this._restoreFocus();\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.enabled = this._isFocusTrapEnabled;\n      }\n\n      return new Promise(function (resolve) {\n        _this5.openedChange.pipe(take(1)).subscribe(function (open) {\n          return resolve(open ? 'open' : 'close');\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      // Make sure we have a valid value.\n      value = value === 'end' ? 'end' : 'start';\n\n      if (value != this._position) {\n        this._position = value;\n        this.onPositionChanged.emit();\n      }\n    }\n    /**\n     * Mode of the drawer; one of 'over', 'push' or 'side'.\n     * @return {?}\n     */\n\n  }, {\n    key: \"mode\",\n    get: function get() {\n      return this._mode;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._mode = value;\n\n      this._modeChanged.next();\n    }\n    /**\n     * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disableClose\",\n    get: function get() {\n      return this._disableClose;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disableClose = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * @return {?}\n     */\n\n  }, {\n    key: \"autoFocus\",\n    get: function get() {\n      return this._autoFocus;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._autoFocus = coerceBooleanProperty(value);\n    }\n    /**\n     * Event emitted when the drawer has been opened.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openedStream\",\n    get: function get() {\n      return this.openedChange.pipe(filter(function (o) {\n        return o;\n      }), map(function () {}));\n    }\n    /**\n     * Event emitted when the drawer has started opening.\n     * @return {?}\n     */\n\n  }, {\n    key: \"openedStart\",\n    get: function get() {\n      return this._animationStarted.pipe(filter(function (e) {\n        return e.fromState !== e.toState && e.toState.indexOf('open') === 0;\n      }), map(function () {}));\n    }\n    /**\n     * Event emitted when the drawer has been closed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_closedStream\",\n    get: function get() {\n      return this.openedChange.pipe(filter(function (o) {\n        return !o;\n      }), map(function () {}));\n    }\n    /**\n     * Event emitted when the drawer has started closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"closedStart\",\n    get: function get() {\n      return this._animationStarted.pipe(filter(function (e) {\n        return e.fromState !== e.toState && e.toState === 'void';\n      }), map(function () {}));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isFocusTrapEnabled\",\n    get: function get() {\n      // The focus trap is only enabled when the drawer is open in any mode other than side.\n      return this.opened && this.mode !== 'side';\n    }\n  }, {\n    key: \"opened\",\n    get: function get() {\n      return this._opened;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.toggle(coerceBooleanProperty(value));\n    }\n  }, {\n    key: \"_width\",\n    get: function get() {\n      return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n    }\n  }]);\n\n  return MatDrawer;\n}();\n\nMatDrawer.ɵfac = function MatDrawer_Factory(t) {\n  return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\n\nMatDrawer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDrawer,\n  selectors: [[\"mat-drawer\"]],\n  hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"],\n  hostVars: 10,\n  hostBindings: function MatDrawer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) {\n        return ctx._animationStarted.next($event);\n      })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) {\n        return ctx._animationEnd.next($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"align\", null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n      ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\");\n    }\n  },\n  inputs: {\n    position: \"position\",\n    mode: \"mode\",\n    disableClose: \"disableClose\",\n    autoFocus: \"autoFocus\",\n    opened: \"opened\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    onPositionChanged: \"positionChanged\",\n    _openedStream: \"opened\",\n    openedStart: \"openedStart\",\n    _closedStream: \"closed\",\n    closedStart: \"closedStart\"\n  },\n  exportAs: [\"matDrawer\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-drawer-inner-container\"]],\n  template: function MatDrawer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2,\n  data: {\n    animation: [matDrawerAnimations.transformDrawer]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDrawer.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusTrapFactory\n  }, {\n    type: FocusMonitor\n  }, {\n    type: Platform\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nMatDrawer.propDecorators = {\n  position: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  disableClose: [{\n    type: Input\n  }],\n  autoFocus: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  openedStart: [{\n    type: Output\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  closedStart: [{\n    type: Output\n  }],\n  onPositionChanged: [{\n    type: Output,\n    args: ['positionChanged']\n  }],\n  opened: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDrawer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer',\n      exportAs: 'matDrawer',\n      template: \"<div class=\\\"mat-drawer-inner-container\\\"><ng-content></ng-content></div>\",\n      animations: [matDrawerAnimations.transformDrawer],\n      host: {\n        'class': 'mat-drawer',\n        '[@transform]': '_animationState',\n        '(@transform.start)': '_animationStarted.next($event)',\n        '(@transform.done)': '_animationEnd.next($event)',\n        // must prevent the browser from aligning text based on value\n        '[attr.align]': 'null',\n        '[class.mat-drawer-end]': 'position === \"end\"',\n        '[class.mat-drawer-over]': 'mode === \"over\"',\n        '[class.mat-drawer-push]': 'mode === \"push\"',\n        '[class.mat-drawer-side]': 'mode === \"side\"',\n        'tabIndex': '-1'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.FocusTrapFactory\n    }, {\n      type: ɵngcc2.FocusMonitor\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    openedChange: [{\n      type: Output\n    }],\n    onPositionChanged: [{\n      type: Output,\n      args: ['positionChanged']\n    }],\n    position: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    disableClose: [{\n      type: Input\n    }],\n    autoFocus: [{\n      type: Input\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    openedStart: [{\n      type: Output\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    closedStart: [{\n      type: Output\n    }],\n    opened: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n\n\nvar MatDrawerContainer = /*#__PURE__*/function () {\n  /**\n   * @param {?} _dir\n   * @param {?} _element\n   * @param {?} _ngZone\n   * @param {?} _changeDetectorRef\n   * @param {?=} defaultAutosize\n   * @param {?=} _animationMode\n   * @param {?=} viewportRuler\n   */\n  function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef) {\n    var _this6 = this;\n\n    var defaultAutosize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    var _animationMode = arguments.length > 5 ? arguments[5] : undefined;\n\n    var\n    /**\n     * @deprecated viewportRuler to become a required parameter.\n     * @breaking-change 8.0.0\n     */\n    viewportRuler = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, MatDrawerContainer);\n\n    this._dir = _dir;\n    this._element = _element;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    /**\n     * Event emitted when the drawer backdrop is clicked.\n     */\n\n    this.backdropClick = new EventEmitter();\n    /**\n     * Emits when the component is destroyed.\n     */\n\n    this._destroyed = new Subject();\n    /**\n     * Emits on every ngDoCheck. Used for debouncing reflows.\n     */\n\n    this._doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n\n    this._contentMargins = {\n      left: null,\n      right: null\n    };\n    this._contentMarginChanges = new Subject(); // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n        _this6._validateDrawers();\n\n        _this6._updateContentMargins();\n      });\n    } // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n\n\n    if (viewportRuler) {\n      viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this6._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n  /**\n   * The drawer child with the `start` position.\n   * @return {?}\n   */\n\n\n  _createClass(MatDrawerContainer, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this7 = this;\n\n      this._drawers.changes.pipe(startWith(null)).subscribe(function () {\n        _this7._validateDrawers();\n\n        _this7._drawers.forEach(function (drawer) {\n          _this7._watchDrawerToggle(drawer);\n\n          _this7._watchDrawerPosition(drawer);\n\n          _this7._watchDrawerMode(drawer);\n        });\n\n        if (!_this7._drawers.length || _this7._isDrawerOpen(_this7._start) || _this7._isDrawerOpen(_this7._end)) {\n          _this7._updateContentMargins();\n        }\n\n        _this7._changeDetectorRef.markForCheck();\n      });\n\n      this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)).subscribe(function () {\n        return _this7._updateContentMargins();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._contentMarginChanges.complete();\n\n      this._doCheckSubject.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      this._drawers.forEach(function (drawer) {\n        return drawer.open();\n      });\n    }\n    /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._drawers.forEach(function (drawer) {\n        return drawer.close();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      var _this8 = this;\n\n      // If users opted into autosizing, do a check every change detection cycle.\n      if (this._autosize && this._isPushed()) {\n        // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(function () {\n          return _this8._doCheckSubject.next();\n        });\n      }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n\n  }, {\n    key: \"_watchDrawerToggle\",\n    value: function _watchDrawerToggle(drawer) {\n      var _this9 = this;\n\n      drawer._animationStarted.pipe(filter(function (event) {\n        return event.fromState !== event.toState;\n      }), takeUntil(this._drawers.changes)).subscribe(function (event) {\n        // Set the transition class on the container so that the animations occur. This should not\n        // be set initially because animations should only be triggered via a change in state.\n        if (event.toState !== 'open-instant' && _this9._animationMode !== 'NoopAnimations') {\n          _this9._element.nativeElement.classList.add('mat-drawer-transition');\n        }\n\n        _this9._updateContentMargins();\n\n        _this9._changeDetectorRef.markForCheck();\n      });\n\n      if (drawer.mode !== 'side') {\n        drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n          return _this9._setContainerClass(drawer.opened);\n        });\n      }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n\n  }, {\n    key: \"_watchDrawerPosition\",\n    value: function _watchDrawerPosition(drawer) {\n      var _this10 = this;\n\n      if (!drawer) {\n        return;\n      } // NOTE: We need to wait for the microtask queue to be empty before validating,\n      // since both drawers may be swapping positions at the same time.\n\n\n      drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n        _this10._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n          _this10._validateDrawers();\n        });\n      });\n    }\n    /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n\n  }, {\n    key: \"_watchDrawerMode\",\n    value: function _watchDrawerMode(drawer) {\n      var _this11 = this;\n\n      if (drawer) {\n        drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(function () {\n          _this11._updateContentMargins();\n\n          _this11._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @private\n     * @param {?} isAdd\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setContainerClass\",\n    value: function _setContainerClass(isAdd) {\n      if (isAdd) {\n        this._element.nativeElement.classList.add('mat-drawer-opened');\n      } else {\n        this._element.nativeElement.classList.remove('mat-drawer-opened');\n      }\n    }\n    /**\n     * Validate the state of the drawer children components.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_validateDrawers\",\n    value: function _validateDrawers() {\n      var _this12 = this;\n\n      this._start = this._end = null; // Ensure that we have at most one start and one end drawer.\n\n      this._drawers.forEach(function (drawer) {\n        if (drawer.position == 'end') {\n          if (_this12._end != null) {\n            throwMatDuplicatedDrawerError('end');\n          }\n\n          _this12._end = drawer;\n        } else {\n          if (_this12._start != null) {\n            throwMatDuplicatedDrawerError('start');\n          }\n\n          _this12._start = drawer;\n        }\n      });\n\n      this._right = this._left = null; // Detect if we're LTR or RTL.\n\n      if (this._dir && this._dir.value === 'rtl') {\n        this._left = this._end;\n        this._right = this._start;\n      } else {\n        this._left = this._start;\n        this._right = this._end;\n      }\n    }\n    /**\n     * Whether the container is being pushed to the side by one of the drawers.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isPushed\",\n    value: function _isPushed() {\n      return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBackdropClicked\",\n    value: function _onBackdropClicked() {\n      this.backdropClick.emit();\n\n      this._closeModalDrawer();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_closeModalDrawer\",\n    value: function _closeModalDrawer() {\n      var _this13 = this;\n\n      // Close all open drawers where closing is not disabled and the mode is not `side`.\n      [this._start, this._end].filter(function (drawer) {\n        return drawer && !drawer.disableClose && _this13._canHaveBackdrop(drawer);\n      }).forEach(function (drawer) {\n        return (\n          /** @type {?} */\n          drawer.close()\n        );\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isShowingBackdrop\",\n    value: function _isShowingBackdrop() {\n      return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n    }\n    /**\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n\n  }, {\n    key: \"_canHaveBackdrop\",\n    value: function _canHaveBackdrop(drawer) {\n      return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    /**\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isDrawerOpen\",\n    value: function _isDrawerOpen(drawer) {\n      return drawer != null && drawer.opened;\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateContentMargins\",\n    value: function _updateContentMargins() {\n      var _this14 = this;\n\n      // 1. For drawers in `over` mode, they don't affect the content.\n      // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n      //    left margin (for left drawer) or right margin (for right the drawer).\n      // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n      //    adding to the left or right margin and simultaneously subtracting the same amount of\n      //    margin from the other side.\n      // 1. For drawers in `over` mode, they don't affect the content.\n      // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n      //    left margin (for left drawer) or right margin (for right the drawer).\n      // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n      //    adding to the left or right margin and simultaneously subtracting the same amount of\n      //    margin from the other side.\n\n      /** @type {?} */\n      var left = 0;\n      /** @type {?} */\n\n      var right = 0;\n\n      if (this._left && this._left.opened) {\n        if (this._left.mode == 'side') {\n          left += this._left._width;\n        } else if (this._left.mode == 'push') {\n          /** @type {?} */\n          var width = this._left._width;\n          left += width;\n          right -= width;\n        }\n      }\n\n      if (this._right && this._right.opened) {\n        if (this._right.mode == 'side') {\n          right += this._right._width;\n        } else if (this._right.mode == 'push') {\n          /** @type {?} */\n          var _width = this._right._width;\n          right += _width;\n          left -= _width;\n        }\n      } // If either `right` or `left` is zero, don't set a style to the element. This\n      // allows users to specify a custom size via CSS class in SSR scenarios where the\n      // measured widths will always be zero. Note that we reset to `null` here, rather\n      // than below, in order to ensure that the types in the `if` below are consistent.\n\n\n      left = left ||\n      /** @type {?} */\n      null;\n      right = right ||\n      /** @type {?} */\n      null;\n\n      if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n        this._contentMargins = {\n          left: left,\n          right: right\n        }; // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n        // to do it only when something changed, otherwise we can end up hitting the zone too often.\n\n        this._ngZone.run(function () {\n          return _this14._contentMarginChanges.next(_this14._contentMargins);\n        });\n      }\n    }\n  }, {\n    key: \"start\",\n    get: function get() {\n      return this._start;\n    }\n    /**\n     * The drawer child with the `end` position.\n     * @return {?}\n     */\n\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this._end;\n    }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     * @return {?}\n     */\n\n  }, {\n    key: \"autosize\",\n    get: function get() {\n      return this._autosize;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._autosize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      if (this._backdropOverride == null) {\n        return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n      }\n\n      return this._backdropOverride;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /**\n     * Reference to the CdkScrollable instance that wraps the scrollable content.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollable\",\n    get: function get() {\n      return this._userContent || this._content;\n    }\n  }]);\n\n  return MatDrawerContainer;\n}();\n\nMatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) {\n  return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler, 8));\n};\n\nMatDrawerContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDrawerContainer,\n  selectors: [[\"mat-drawer-container\"]],\n  contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._drawers = _t);\n    }\n  },\n  viewQuery: function MatDrawerContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatDrawerContent, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-drawer-container\"],\n  hostVars: 2,\n  hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    }\n  },\n  inputs: {\n    autosize: \"autosize\",\n    hasBackdrop: \"hasBackdrop\"\n  },\n  outputs: {\n    backdropClick: \"backdropClick\"\n  },\n  exportAs: [\"matDrawerContainer\"],\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n  template: function MatDrawerContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    }\n  },\n  directives: [ɵngcc5.NgIf, MatDrawerContent],\n  styles: [_c5],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDrawerContainer.ctorParameters = function () {\n  return [{\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: ViewportRuler,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatDrawerContainer.propDecorators = {\n  _drawers: [{\n    type: ContentChildren,\n    args: [MatDrawer]\n  }],\n  _content: [{\n    type: ContentChild,\n    args: [MatDrawerContent]\n  }],\n  _userContent: [{\n    type: ViewChild,\n    args: [MatDrawerContent]\n  }],\n  autosize: [{\n    type: Input\n  }],\n  hasBackdrop: [{\n    type: Input\n  }],\n  backdropClick: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDrawerContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer-container',\n      exportAs: 'matDrawerContainer',\n      template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-drawer\\\"></ng-content><ng-content select=\\\"mat-drawer-content\\\"></ng-content><mat-drawer-content *ngIf=\\\"!_content\\\"><ng-content></ng-content></mat-drawer-content>\",\n      styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n      host: {\n        'class': 'mat-drawer-container',\n        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: ɵngcc1.ViewportRuler,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    backdropClick: [{\n      type: Output\n    }],\n    autosize: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    _drawers: [{\n      type: ContentChildren,\n      args: [MatDrawer]\n    }],\n    _content: [{\n      type: ContentChild,\n      args: [MatDrawerContent]\n    }],\n    _userContent: [{\n      type: ViewChild,\n      args: [MatDrawerContent]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatSidenavContent = /*#__PURE__*/function (_MatDrawerContent) {\n  _inherits(MatSidenavContent, _MatDrawerContent);\n\n  var _super2 = _createSuper(MatSidenavContent);\n\n  /**\n   * @param {?} changeDetectorRef\n   * @param {?} container\n   * @param {?} elementRef\n   * @param {?} scrollDispatcher\n   * @param {?} ngZone\n   */\n  function MatSidenavContent(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n    _classCallCheck(this, MatSidenavContent);\n\n    return _super2.call(this, changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n\n  return MatSidenavContent;\n}(MatDrawerContent);\n\nMatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) {\n  return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(function () {\n    return MatSidenavContainer;\n  })), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nMatSidenavContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSidenavContent,\n  selectors: [[\"mat-sidenav-content\"]],\n  hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"],\n  hostVars: 4,\n  hostBindings: function MatSidenavContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatSidenavContent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSidenavContent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: MatSidenavContainer,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(function () {\n        return MatSidenavContainer;\n      })]\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSidenavContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav-content',\n      template: '<ng-content></ng-content>',\n      host: {\n        'class': 'mat-drawer-content mat-sidenav-content',\n        '[style.margin-left.px]': '_container._contentMargins.left',\n        '[style.margin-right.px]': '_container._contentMargins.right'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSidenavContainer,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(function () {\n          return MatSidenavContainer;\n        })]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\nvar MatSidenav = /*#__PURE__*/function (_MatDrawer) {\n  _inherits(MatSidenav, _MatDrawer);\n\n  var _super3 = _createSuper(MatSidenav);\n\n  function MatSidenav() {\n    var _this15;\n\n    _classCallCheck(this, MatSidenav);\n\n    _this15 = _super3.apply(this, arguments);\n    _this15._fixedInViewport = false;\n    _this15._fixedTopGap = 0;\n    _this15._fixedBottomGap = 0;\n    return _this15;\n  }\n  /**\n   * Whether the sidenav is fixed in the viewport.\n   * @return {?}\n   */\n\n\n  _createClass(MatSidenav, [{\n    key: \"fixedInViewport\",\n    get: function get() {\n      return this._fixedInViewport;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._fixedInViewport = coerceBooleanProperty(value);\n    }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"fixedTopGap\",\n    get: function get() {\n      return this._fixedTopGap;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._fixedTopGap = coerceNumberProperty(value);\n    }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"fixedBottomGap\",\n    get: function get() {\n      return this._fixedBottomGap;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._fixedBottomGap = coerceNumberProperty(value);\n    }\n  }]);\n\n  return MatSidenav;\n}(MatDrawer);\n\nMatSidenav.ɵfac = function MatSidenav_Factory(t) {\n  return ɵMatSidenav_BaseFactory(t || MatSidenav);\n};\n\nMatSidenav.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSidenav,\n  selectors: [[\"mat-sidenav\"]],\n  hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"],\n  hostVars: 16,\n  hostBindings: function MatSidenav_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatSidenav_animation_transform_start_HostBindingHandler($event) {\n        return ctx._animationStarted.next($event);\n      })(\"@transform.done\", function MatSidenav_animation_transform_done_HostBindingHandler($event) {\n        return ctx._animationEnd.next($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"align\", null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n      ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n      ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n    }\n  },\n  inputs: {\n    fixedInViewport: \"fixedInViewport\",\n    fixedTopGap: \"fixedTopGap\",\n    fixedBottomGap: \"fixedBottomGap\"\n  },\n  exportAs: [\"matSidenav\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-drawer-inner-container\"]],\n  template: function MatSidenav_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2,\n  data: {\n    animation: [matDrawerAnimations.transformDrawer]\n  },\n  changeDetection: 0\n});\nMatSidenav.propDecorators = {\n  fixedInViewport: [{\n    type: Input\n  }],\n  fixedTopGap: [{\n    type: Input\n  }],\n  fixedBottomGap: [{\n    type: Input\n  }]\n};\nvar ɵMatSidenav_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatSidenav);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSidenav, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav',\n      exportAs: 'matSidenav',\n      template: \"<div class=\\\"mat-drawer-inner-container\\\"><ng-content></ng-content></div>\",\n      animations: [matDrawerAnimations.transformDrawer],\n      host: {\n        'class': 'mat-drawer mat-sidenav',\n        'tabIndex': '-1',\n        '[@transform]': '_animationState',\n        '(@transform.start)': '_animationStarted.next($event)',\n        '(@transform.done)': '_animationEnd.next($event)',\n        // must prevent the browser from aligning text based on value\n        '[attr.align]': 'null',\n        '[class.mat-drawer-end]': 'position === \"end\"',\n        '[class.mat-drawer-over]': 'mode === \"over\"',\n        '[class.mat-drawer-push]': 'mode === \"push\"',\n        '[class.mat-drawer-side]': 'mode === \"side\"',\n        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    fixedInViewport: [{\n      type: Input\n    }],\n    fixedTopGap: [{\n      type: Input\n    }],\n    fixedBottomGap: [{\n      type: Input\n    }]\n  });\n})();\n\nvar MatSidenavContainer = /*#__PURE__*/function (_MatDrawerContainer) {\n  _inherits(MatSidenavContainer, _MatDrawerContainer);\n\n  var _super4 = _createSuper(MatSidenavContainer);\n\n  function MatSidenavContainer() {\n    _classCallCheck(this, MatSidenavContainer);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return MatSidenavContainer;\n}(MatDrawerContainer);\n\nMatSidenavContainer.ɵfac = function MatSidenavContainer_Factory(t) {\n  return ɵMatSidenavContainer_BaseFactory(t || MatSidenavContainer);\n};\n\nMatSidenavContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSidenavContainer,\n  selectors: [[\"mat-sidenav-container\"]],\n  contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._drawers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"],\n  hostVars: 2,\n  hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    }\n  },\n  exportAs: [\"matSidenavContainer\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]],\n  template: function MatSidenavContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c3);\n      ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    }\n  },\n  directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable],\n  styles: [_c5],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatSidenavContainer.propDecorators = {\n  _drawers: [{\n    type: ContentChildren,\n    args: [MatSidenav]\n  }],\n  _content: [{\n    type: ContentChild,\n    args: [MatSidenavContent]\n  }]\n};\nvar ɵMatSidenavContainer_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSidenavContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav-container',\n      exportAs: 'matSidenavContainer',\n      template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-sidenav\\\"></ng-content><ng-content select=\\\"mat-sidenav-content\\\"></ng-content><mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable><ng-content></ng-content></mat-sidenav-content>\",\n      styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n      host: {\n        'class': 'mat-drawer-container mat-sidenav-container',\n        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    _drawers: [{\n      type: ContentChildren,\n      args: [MatSidenav]\n    }],\n    _content: [{\n      type: ContentChild,\n      args: [MatSidenavContent]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatSidenavModule = function MatSidenavModule() {\n  _classCallCheck(this, MatSidenavModule);\n};\n\nMatSidenavModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSidenavModule\n});\nMatSidenavModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatSidenavModule_Factory(t) {\n    return new (t || MatSidenavModule)();\n  },\n  imports: [[CommonModule, MatCommonModule, ScrollingModule, PlatformModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, {\n    declarations: function declarations() {\n      return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule, ScrollingModule, PlatformModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSidenavModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, ScrollingModule, PlatformModule],\n      exports: [MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent],\n      declarations: [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MAT_DRAWER_DEFAULT_AUTOSIZE, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations };","map":{"version":3,"sources":["../../../src/lib/sidenav/drawer-animations.ts","../../../src/lib/sidenav/drawer.ts","../../../src/lib/sidenav/sidenav.ts","../../../src/lib/sidenav/sidenav-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string,\n              /**\n               * @deprecated viewportRuler to become a required parameter.\n               * @breaking-change 8.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    if (viewportRuler) {\n      viewportRuler.change()\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._updateContentMargins());\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n"]},"metadata":{},"sourceType":"module"}