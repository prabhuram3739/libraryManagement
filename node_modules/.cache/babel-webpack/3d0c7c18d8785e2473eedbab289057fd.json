{"ast":null,"code":"import _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nexport function mergeScan(accumulator, seed) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\nexport var MergeScanOperator = /*#__PURE__*/function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    _classCallCheck(this, MergeScanOperator);\n\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n\n  _createClass(MergeScanOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n  }]);\n\n  return MergeScanOperator;\n}();\nexport var MergeScanSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(MergeScanSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(MergeScanSubscriber);\n\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this;\n\n    _classCallCheck(this, MergeScanSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(MergeScanSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        var index = this.index++;\n        var ish = tryCatch(this.accumulator)(this.acc, value);\n        var destination = this.destination;\n\n        if (ish === errorObject) {\n          destination.error(errorObject.e);\n        } else {\n          this.active++;\n\n          this._innerSub(ish, value, index);\n        }\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish, value, index) {\n      var innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      subscribeToResult(this, ish, value, index, innerSubscriber);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n\n      if (this.active === 0 && this.buffer.length === 0) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n\n        this.destination.complete();\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      var destination = this.destination;\n      this.acc = innerValue;\n      this.hasValue = true;\n      destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      var buffer = this.buffer;\n      var destination = this.destination;\n      destination.remove(innerSub);\n      this.active--;\n\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n\n        this.destination.complete();\n      }\n    }\n  }]);\n\n  return MergeScanSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/mergeScan.ts"],"names":[],"mappings":"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","sourcesContent":["import { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n    constructor(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n}\nexport class MergeScanSubscriber extends OuterSubscriber {\n    constructor(destination, accumulator, acc, concurrent) {\n        super(destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            const index = this.index++;\n            const ish = tryCatch(this.accumulator)(this.acc, value);\n            const destination = this.destination;\n            if (ish === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _innerSub(ish, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        const { destination } = this;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeScan.js.map"]},"metadata":{},"sourceType":"module"}