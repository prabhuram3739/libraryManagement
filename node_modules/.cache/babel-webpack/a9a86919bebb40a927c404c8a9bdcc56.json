{"ast":null,"code":"import _createClass from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Applications/MAMP/htdocs/LibraryMangementSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, Inject, Optional, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nvar MatTreeNodeOutlet =\n/**\n * @param {?} viewContainer\n * @param {?=} _node\n */\nfunction MatTreeNodeOutlet(viewContainer, _node) {\n  _classCallCheck(this, MatTreeNodeOutlet);\n\n  this.viewContainer = viewContainer;\n  this._node = _node;\n};\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nMatTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nMatTreeNodeOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/** @type {?} */\n\n\nvar _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\n\n\nvar MatTreeNode = /*#__PURE__*/function (_MatTreeNodeMixinBase2) {\n  _inherits(MatTreeNode, _MatTreeNodeMixinBase2);\n\n  var _super = _createSuper(MatTreeNode);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} tabIndex\n   */\n  function MatTreeNode(_elementRef, _tree, tabIndex) {\n    var _this;\n\n    _classCallCheck(this, MatTreeNode);\n\n    _this = _super.call(this, _elementRef, _tree);\n    _this._elementRef = _elementRef;\n    _this._tree = _tree;\n    _this.role = 'treeitem';\n    _this.tabIndex = Number(tabIndex) || 0;\n    return _this;\n  }\n\n  return MatTreeNode;\n}(_MatTreeNodeMixinBase);\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  hostAttrs: [1, \"mat-tree-node\"],\n  hostVars: 3,\n  hostBindings: function MatTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    role: \"role\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['disabled', 'tabIndex'],\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        'class': 'mat-tree-node'\n      },\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\n\n\nvar MatTreeNodeDef = /*#__PURE__*/function (_CdkTreeNodeDef) {\n  _inherits(MatTreeNodeDef, _CdkTreeNodeDef);\n\n  var _super2 = _createSuper(MatTreeNodeDef);\n\n  function MatTreeNodeDef() {\n    _classCallCheck(this, MatTreeNodeDef);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatTreeNodeDef;\n}(CdkTreeNodeDef);\n\nMatTreeNodeDef.ɵfac = function MatTreeNodeDef_Factory(t) {\n  return ɵMatTreeNodeDef_BaseFactory(t || MatTreeNodeDef);\n};\n\nMatTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeDef.propDecorators = {\n  data: [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\nvar ɵMatTreeNodeDef_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\n\n\nvar MatNestedTreeNode = /*#__PURE__*/function (_MatNestedTreeNodeMix) {\n  _inherits(MatNestedTreeNode, _MatNestedTreeNodeMix);\n\n  var _super3 = _createSuper(MatNestedTreeNode);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   * @param {?} tabIndex\n   */\n  function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n    var _this2;\n\n    _classCallCheck(this, MatNestedTreeNode);\n\n    _this2 = _super3.call(this, _elementRef, _tree, _differs);\n    _this2._elementRef = _elementRef;\n    _this2._tree = _tree;\n    _this2._differs = _differs;\n    _this2.tabIndex = Number(tabIndex) || 0;\n    return _this2;\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatNestedTreeNode, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngAfterContentInit\", this).call(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n    }\n  }]);\n\n  return MatNestedTreeNode;\n}(_MatNestedTreeNodeMixinBase);\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  contentQueries: function MatNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTreeNodeOutlet, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-nested-tree-node\"],\n  hostVars: 2,\n  hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatNestedTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: IterableDiffers\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatNestedTreeNode.propDecorators = {\n  node: [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  nodeOutlet: [{\n    type: ContentChildren,\n    args: [MatTreeNodeOutlet, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        'class': 'mat-nested-tree-node'\n      },\n      inputs: ['disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [MatTreeNodeOutlet, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\n\n\nvar MatTreeNodePadding = /*#__PURE__*/function (_CdkTreeNodePadding) {\n  _inherits(MatTreeNodePadding, _CdkTreeNodePadding);\n\n  var _super4 = _createSuper(MatTreeNodePadding);\n\n  function MatTreeNodePadding() {\n    _classCallCheck(this, MatTreeNodePadding);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return MatTreeNodePadding;\n}(CdkTreeNodePadding);\n\nMatTreeNodePadding.ɵfac = function MatTreeNodePadding_Factory(t) {\n  return ɵMatTreeNodePadding_BaseFactory(t || MatTreeNodePadding);\n};\n\nMatTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\nvar ɵMatTreeNodePadding_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\n\n\nvar MatTree = /*#__PURE__*/function (_CdkTree) {\n  _inherits(MatTree, _CdkTree);\n\n  var _super5 = _createSuper(MatTree);\n\n  function MatTree() {\n    _classCallCheck(this, MatTree);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return MatTree;\n}(CdkTree);\n\nMatTree.ɵfac = function MatTree_Factory(t) {\n  return ɵMatTree_BaseFactory(t || MatTree);\n};\n\nMatTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n  exportAs: [\"matTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n  encapsulation: 2\n});\nMatTree.propDecorators = {\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet]\n  }]\n};\nvar ɵMatTree_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTree);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: \"<ng-container matTreeNodeOutlet></ng-container>\",\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n      encapsulation: ViewEncapsulation.None,\n      // See note on CdkTree for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\n\n\nvar MatTreeNodeToggle = /*#__PURE__*/function (_CdkTreeNodeToggle) {\n  _inherits(MatTreeNodeToggle, _CdkTreeNodeToggle);\n\n  var _super6 = _createSuper(MatTreeNodeToggle);\n\n  function MatTreeNodeToggle() {\n    var _this3;\n\n    _classCallCheck(this, MatTreeNodeToggle);\n\n    _this3 = _super6.apply(this, arguments);\n    _this3.recursive = false;\n    return _this3;\n  }\n\n  return MatTreeNodeToggle;\n}(CdkTreeNodeToggle);\n\nMatTreeNodeToggle.ɵfac = function MatTreeNodeToggle_Factory(t) {\n  return ɵMatTreeNodeToggle_BaseFactory(t || MatTreeNodeToggle);\n};\n\nMatTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\nvar ɵMatTreeNodeToggle_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nvar MatTreeModule = function MatTreeModule() {\n  _classCallCheck(this, MatTreeModule);\n};\n\nMatTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatTreeModule_Factory(t) {\n    return new (t || MatTreeModule)();\n  },\n  imports: [[CdkTreeModule, CommonModule, MatCommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function declarations() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function imports() {\n      return [CdkTreeModule, CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, CommonModule, MatCommonModule],\n      exports: MAT_TREE_DIRECTIVES,\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\n\n\nvar MatTreeFlattener = /*#__PURE__*/function () {\n  /**\n   * @param {?} transformFunction\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   * @param {?} getChildren\n   */\n  function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, MatTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  /**\n   * @param {?} node\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeFlattener, [{\n    key: \"_flattenNode\",\n    value: function _flattenNode(node, level, resultNodes, parentMap) {\n      var _this4 = this;\n\n      /** @type {?} */\n      var flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        /** @type {?} */\n        var childrenNodes = this.getChildren(node);\n\n        if (childrenNodes) {\n          if (Array.isArray(childrenNodes)) {\n            this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n          } else {\n            childrenNodes.pipe(take(1)).subscribe(function (children) {\n              _this4._flattenChildren(children, level, resultNodes, parentMap);\n            });\n          }\n        }\n      }\n\n      return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n\n  }, {\n    key: \"_flattenChildren\",\n    value: function _flattenChildren(children, level, resultNodes, parentMap) {\n      var _this5 = this;\n\n      children.forEach(function (child, index) {\n        /** @type {?} */\n        var childParentMap = parentMap.slice();\n        childParentMap.push(index != children.length - 1);\n\n        _this5._flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this6 = this;\n\n      /** @type {?} */\n      var resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this6._flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this7 = this;\n\n      /** @type {?} */\n      var results = [];\n      /** @type {?} */\n\n      var currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        /** @type {?} */\n        var expand = true;\n\n        for (var i = 0; i <= _this7.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this7.isExpandable(node)) {\n          currentExpand[_this7.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return MatTreeFlattener;\n}();\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\n\n\nvar MatTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(MatTreeFlatDataSource, _DataSource);\n\n  var _super7 = _createSuper(MatTreeFlatDataSource);\n\n  /**\n   * @param {?} treeControl\n   * @param {?} treeFlattener\n   * @param {?=} initialData\n   */\n  function MatTreeFlatDataSource(treeControl, treeFlattener) {\n    var _this8;\n\n    var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, MatTreeFlatDataSource);\n\n    _this8 = _super7.call(this);\n    _this8.treeControl = treeControl;\n    _this8.treeFlattener = treeFlattener;\n    _this8._flattenedData = new BehaviorSubject([]);\n    _this8._expandedData = new BehaviorSubject([]);\n    _this8._data = new BehaviorSubject(initialData);\n    return _this8;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeFlatDataSource, [{\n    key: \"connect\",\n\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    value: function connect(collectionViewer) {\n      var _this9 = this;\n\n      /** @type {?} */\n      var changes = [collectionViewer.viewChange, this.treeControl.expansionModel.onChange, this._flattenedData];\n      return merge.apply(void 0, changes).pipe(map(function () {\n        _this9._expandedData.next(_this9.treeFlattener.expandFlattenedNodes(_this9._flattenedData.value, _this9.treeControl));\n\n        return _this9._expandedData.value;\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._data.next(value);\n\n      this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n\n      this.treeControl.dataNodes = this._flattenedData.value;\n    }\n  }]);\n\n  return MatTreeFlatDataSource;\n}(DataSource);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\n\n\nvar MatTreeNestedDataSource = /*#__PURE__*/function (_DataSource2) {\n  _inherits(MatTreeNestedDataSource, _DataSource2);\n\n  var _super8 = _createSuper(MatTreeNestedDataSource);\n\n  function MatTreeNestedDataSource() {\n    var _this10;\n\n    _classCallCheck(this, MatTreeNestedDataSource);\n\n    _this10 = _super8.apply(this, arguments);\n    _this10._data = new BehaviorSubject([]);\n    return _this10;\n  }\n  /**\n   * Data for the nested tree\n   * @return {?}\n   */\n\n\n  _createClass(MatTreeNestedDataSource, [{\n    key: \"connect\",\n\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    value: function connect(collectionViewer) {\n      var _this11 = this;\n\n      return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map(function () {\n        return _this11.data;\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._data.next(value);\n    }\n  }]);\n\n  return MatTreeNestedDataSource;\n}(DataSource);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };","map":{"version":3,"sources":["../../../src/lib/tree/outlet.ts","../../../src/lib/tree/node.ts","../../../src/lib/tree/padding.ts","../../../src/lib/tree/tree.ts","../../../src/lib/tree/toggle.ts","../../../src/lib/tree/tree-module.ts","../../../src/lib/tree/data-source/flat-data-source.ts","../../../src/lib/tree/data-source/nested-data-source.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\n\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T> implements\n    AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n  @Input('matNestedTreeNode') node: T;\n\n  /** The children node placeholder. */\n  @ContentChildren(MatTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n"]},"metadata":{},"sourceType":"module"}